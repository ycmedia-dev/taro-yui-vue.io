/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "Y UI",
  "description": "一个基于 Vue 的 UI 组件库",
  "base": "/taro/taro-yui-vue/",
  "headTags": [
    [
      "link",
      {
        "rel": "icon",
        "href": "/taro/taro-yui-vue/favicon.ico"
      }
    ]
  ],
  "pages": [
    {
      "frontmatter": {
        "layout": "index-page",
        "navbar": false
      },
      "regularPath": "/",
      "relativePath": "README.md",
      "key": "v-4d101b5d",
      "path": "/",
      "headersStr": null,
      "content": "",
      "normalizedContent": "",
      "charsets": {}
    },
    {
      "title": "组件",
      "frontmatter": {},
      "regularPath": "/component/",
      "relativePath": "component/README.md",
      "key": "v-68c3fda4",
      "path": "/component/",
      "headersStr": null,
      "content": "# 组件",
      "normalizedContent": "# 组件",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "图像 y-avatar",
      "frontmatter": {},
      "regularPath": "/component/basic/avatar.html",
      "relativePath": "component/basic/avatar.md",
      "key": "v-0d570fd0",
      "path": "/component/basic/avatar.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 27
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 44
        },
        {
          "level": 3,
          "title": "圆角矩形",
          "slug": "圆角矩形",
          "normalizedTitle": "圆角矩形",
          "charIndex": 591
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 1137
        }
      ],
      "headersStr": "组件名称 基础用法 圆角矩形 属性",
      "content": "# 图像 y-avatar\n图片容器，支持圆角\n\n# 组件名称\ny-avatar\n\n# 基础用法\n<template>\n  <view v-reSize id=\"container\" class=\"container\">\n    <y-avatar :src=\"imgSrc\" :isCircle=\"false\" :size=\"180\"></y-avatar>\n  </view>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, defineAsyncComponent } from 'vue'\nimport './avatar.scss'\nexport default defineComponent({\n  components: {\n    'y-avatar': defineAsyncComponent(() => import('@/components/yui/avatar/avatar.vue'))\n  },\n  setup() {\n    return {\n      imgSrc: 'https://res.xsrkj.cn/upload/20210108/0bbbfeb24fba8ec3e3f4aa99cc25050b.jpg'\n    };\n  }\n});\n</script>\n\n# 圆角矩形\n<template>\n  <view v-reSize id=\"container\" class=\"container\">\n    <y-avatar :src=\"imgSrc\" :isCircle=\"true\" :size=\"180\"></y-avatar>\n  </view>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, defineAsyncComponent } from 'vue'\nimport './avatar.scss'\nexport default defineComponent({\n  components: {\n    'y-avatar': defineAsyncComponent(() => import('@/components/yui/avatar/avatar.vue'))\n  },\n  setup() {\n    return {\n      imgSrc: 'https://res.xsrkj.cn/upload/20210108/0bbbfeb24fba8ec3e3f4aa99cc25050b.jpg'\n    };\n  }\n});\n</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface YAvatarProps extends Record<string, unknown> {\n\n    /**\n     * 图像尺寸\n     */\n    size: number\n\n    /**\n     * 是否是圆角\n     */\n    isCircle: boolean\n\n    /**\n     * 图像地址\n     */\n    src: string\n}",
      "normalizedContent": "# 图像 y-avatar\n图片容器，支持圆角\n\n# 组件名称\ny-avatar\n\n# 基础用法\n<template>\n  <view v-resize id=\"container\" class=\"container\">\n    <y-avatar :src=\"imgsrc\" :iscircle=\"false\" :size=\"180\"></y-avatar>\n  </view>\n</template>\n<script lang=\"ts\">\nimport { definecomponent, defineasynccomponent } from 'vue'\nimport './avatar.scss'\nexport default definecomponent({\n  components: {\n    'y-avatar': defineasynccomponent(() => import('@/components/yui/avatar/avatar.vue'))\n  },\n  setup() {\n    return {\n      imgsrc: 'https://res.xsrkj.cn/upload/20210108/0bbbfeb24fba8ec3e3f4aa99cc25050b.jpg'\n    };\n  }\n});\n</script>\n\n# 圆角矩形\n<template>\n  <view v-resize id=\"container\" class=\"container\">\n    <y-avatar :src=\"imgsrc\" :iscircle=\"true\" :size=\"180\"></y-avatar>\n  </view>\n</template>\n<script lang=\"ts\">\nimport { definecomponent, defineasynccomponent } from 'vue'\nimport './avatar.scss'\nexport default definecomponent({\n  components: {\n    'y-avatar': defineasynccomponent(() => import('@/components/yui/avatar/avatar.vue'))\n  },\n  setup() {\n    return {\n      imgsrc: 'https://res.xsrkj.cn/upload/20210108/0bbbfeb24fba8ec3e3f4aa99cc25050b.jpg'\n    };\n  }\n});\n</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface yavatarprops extends record<string, unknown> {\n\n    /**\n     * 图像尺寸\n     */\n    size: number\n\n    /**\n     * 是否是圆角\n     */\n    iscircle: boolean\n\n    /**\n     * 图像地址\n     */\n    src: string\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "日历 y-calendar",
      "frontmatter": {},
      "regularPath": "/component/basic/calendar.html",
      "relativePath": "component/basic/calendar.md",
      "key": "v-2a5b6a8e",
      "path": "/component/basic/calendar.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 39
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 58
        },
        {
          "level": 3,
          "title": "选择范围及回填单个或范围",
          "slug": "选择范围及回填单个或范围",
          "normalizedTitle": "选择范围及回填单个或范围",
          "charIndex": 1464
        },
        {
          "level": 3,
          "title": "最小值/最大值",
          "slug": "最小值-最大值",
          "normalizedTitle": "最小值/最大值",
          "charIndex": 2890
        },
        {
          "level": 3,
          "title": "年度模式-单选",
          "slug": "年度模式-单选",
          "normalizedTitle": "年度模式-单选",
          "charIndex": 4359
        },
        {
          "level": 3,
          "title": "年度模式-范围",
          "slug": "年度模式-范围",
          "normalizedTitle": "年度模式-范围",
          "charIndex": 5862
        },
        {
          "level": 3,
          "title": "年度模式-最大最小值",
          "slug": "年度模式-最大最小值",
          "normalizedTitle": "年度模式-最大最小值",
          "charIndex": 7453
        },
        {
          "level": 3,
          "title": "年月模式-单选",
          "slug": "年月模式-单选",
          "normalizedTitle": "年月模式-单选",
          "charIndex": 9008
        },
        {
          "level": 3,
          "title": "年月模式-范围",
          "slug": "年月模式-范围",
          "normalizedTitle": "年月模式-范围",
          "charIndex": 10402
        },
        {
          "level": 3,
          "title": "年月模式-最大最小值",
          "slug": "年月模式-最大最小值",
          "normalizedTitle": "年月模式-最大最小值",
          "charIndex": 11851
        },
        {
          "level": 3,
          "title": "季度模式-单选",
          "slug": "季度模式-单选",
          "normalizedTitle": "季度模式-单选",
          "charIndex": 13303
        },
        {
          "level": 3,
          "title": "季度模式-范围",
          "slug": "季度模式-范围",
          "normalizedTitle": "季度模式-范围",
          "charIndex": 14772
        },
        {
          "level": 3,
          "title": "季度模式-最大最小值",
          "slug": "季度模式-最大最小值",
          "normalizedTitle": "季度模式-最大最小值",
          "charIndex": 16333
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 17859
        },
        {
          "level": 3,
          "title": "事件",
          "slug": "事件",
          "normalizedTitle": "事件",
          "charIndex": 732
        }
      ],
      "headersStr": "组件名称 基础用法 选择范围及回填单个或范围 最小值/最大值 年度模式-单选 年度模式-范围 年度模式-最大最小值 年月模式-单选 年月模式-范围 年月模式-最大最小值 季度模式-单选 季度模式-范围 季度模式-最大最小值 属性 事件",
      "content": "# 日历 y-calendar\n该组件提供日历选择功能（包括范围选择）\n\n# 组件名称\ny-calendar\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\" :options=\"calendarOptions\" @onSelectDate=\"onSelectDate\"></y-calendar>\r\n\r\n    <view>选中的日期：{{ date }}</view>\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import { ref, defineComponent, defineAsyncComponent } from 'vue'\r\n  import {CalendarBasic} from '@/components/yui/calendar/calendarBasic/types/calendarBasic'\r\n\r\n  class CalendarBasicService{\r\n    /**\r\n     * 日期\r\n     * */\r\n    date = ref('2023-02-01')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendarOptions = {\r\n      isMultiSelect: false,\r\n      showToolBar: true\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onSelectDate(e:CalendarBasic.SelectDateCallbackResult){\r\n      this.date.value = e.startDate.format('YYYY-MM-DD HH:mm:ss')\r\n    }\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-calendar': defineAsyncComponent(() => import('@/components/yui/calendar/calendarBasic/calendarBasic.vue'))\r\n      // 'y-calendar': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarBasic/calendarBasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new CalendarBasicService()\r\n      return {\r\n        date:service.date,\r\n        calendarOptions:service.calendarOptions,\r\n        onSelectDate:service.onSelectDate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 选择范围及回填单个或范围\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                @onSelectDate=\"onSelectDate\"\r\n                :options=\"options\"></y-calendar>\r\n  </view></template><script lang=\"ts\">import \"./calendar.scss\";import { ref, defineComponent, defineAsyncComponent } from \"vue\";import { CalendarBasic } from \"@/components/calendar/calendarBasic/types/calendarBasic\";\r\n\r\nclass CalendarBasicService {\r\n  /**\r\n   * 日期\r\n   * */\r\n  date = ref('2021-03-18')\r\n\r\n\r\n  /**\r\n   * 日期组件参数\r\n   * */\r\n  options: CalendarBasic.CalendarOptions = {\r\n    isMultiSelect: true,\r\n    showToolBar: true,\r\n    endDate: '2021-03-20'\r\n  };\r\n\r\n  /**\r\n   * 日期选中事件\r\n   */\r\n  onSelectDate(e: CalendarBasic.SelectDateCallbackResult) {\r\n    console.log(`${e.startDate.format('YYYY-MM-DD HH:mm:ss')}~${e.endDate&&e.endDate.format('YYYY-MM-DD HH:mm:ss')}`)\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    \"y-calendar\": defineAsyncComponent(() => import(\"@/components/yui/calendar/calendarBasic/calendarBasic.vue\")),\r\n    // \"y-calendar\": defineAsyncComponent(() => import(\"../../../../../taro-yui-vue/src/components/calendar/calendarBasic/calendarBasic.vue\")),\r\n  },\r\n  setup() {\r\n    const service = new CalendarBasicService();\r\n    return {\r\n      date: service.date,\r\n      options: service.options,\r\n      onSelectDate: service.onSelectDate.bind(service),\r\n    };\r\n  },});</script>\n\n# 最小值/最大值\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\" :options=\"calendarOptions\" @onSelectDate=\"onSelectDate\"></y-calendar>\r\n\r\n    <view>选中的日期：{{ date }}</view>\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import { ref, defineComponent, defineAsyncComponent } from 'vue'\r\n  import {CalendarBasic} from '@/components/yui/calendar/calendarBasic/types/calendarBasic'\r\n\r\n  class CalendarBasicService{\r\n    /**\r\n     * 日期\r\n     * */\r\n    date = ref('2021-02-05')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendarOptions = {\r\n      minDate: '2021-02-04',\r\n      maxDate: '2021-03-03',\r\n      isMultiSelect: false,\r\n      showToolBar: true\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onSelectDate(e:CalendarBasic.SelectDateCallbackResult){\r\n      this.date.value = e.startDate.format('YYYY-MM-DD HH:mm:ss')\r\n    }\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-calendar': defineAsyncComponent(() => import('@/components/yui/calendar/calendarBasic/calendarBasic.vue'))\r\n      // 'y-calendar': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarBasic/calendarBasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new CalendarBasicService()\r\n      return {\r\n        date:service.date,\r\n        calendarOptions:service.calendarOptions,\r\n        onSelectDate:service.onSelectDate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 年度模式-单选\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                :options=\"calendarOptions\"\r\n                @onSelectDate=\"onCatchSelectDate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import {Ref, ref, defineComponent, defineAsyncComponent} from 'vue'\r\n  import {CalendarBasic, CalendarTypeEnum} from '@/components/yui/calendar/calendarBasic/types/calendarBasic.d'\r\n\r\n  class CalendarBasicService{\r\n    /**\r\n     * 年-季度\r\n     * */\r\n    date: Ref<string> = ref('2019')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendarOptions = {\r\n      type: CalendarTypeEnum.YEAR\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onCatchSelectDate(e:CalendarBasic.SelectDateCallbackResult){\r\n      const { startDate } = e\r\n      console.log('选中的：', startDate.format('YYYY'))\r\n    }\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-calendar': defineAsyncComponent(() => import('@/components/yui/calendar/calendarBasic/calendarBasic.vue'))\r\n      // 'y-calendar': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarBasic/calendarBasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new CalendarBasicService()\r\n      return {\r\n        date:service.date,\r\n        selectedDate: service.selectedDate,\r\n        calendarOptions:service.calendarOptions,\r\n        onCatchSelectDate:service.onCatchSelectDate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 年度模式-范围\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                :options=\"calendarOptions\"\r\n                @onSelectDate=\"onCatchSelectDate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import {Ref, ref, defineComponent, defineAsyncComponent} from 'vue'\r\n  import {CalendarBasic, CalendarTypeEnum} from '@/components/yui/calendar/calendarBasic/types/calendarBasic.d'\r\n\r\n  class CalendarBasicService{\r\n    /**\r\n     * 年-季度\r\n     * */\r\n    date: Ref<string> = ref('2015')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendarOptions = {\r\n      type: CalendarTypeEnum.YEAR,\r\n      isMultiSelect: true,\r\n      endDate: '2018'\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onCatchSelectDate(e:CalendarBasic.SelectDateCallbackResult){\r\n      const { startDate, endDate } = e\r\n      console.log(`选中的：${startDate.format('YYYY')}-${endDate.format('YYYY')}`)\r\n    }\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-calendar': defineAsyncComponent(() => import('@/components/yui/calendar/calendarBasic/calendarBasic.vue'))\r\n      // 'y-calendar': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarBasic/calendarBasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new CalendarBasicService()\r\n      return {\r\n        date:service.date,\r\n        selectedDate: service.selectedDate,\r\n        calendarOptions:service.calendarOptions,\r\n        onCatchSelectDate:service.onCatchSelectDate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 年度模式-最大最小值\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                :options=\"calendarOptions\"\r\n                @onSelectDate=\"onCatchSelectDate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import {Ref, ref, defineComponent, defineAsyncComponent} from 'vue'\r\n  import {CalendarBasic, CalendarTypeEnum} from '@/components/yui/calendar/calendarBasic/types/calendarBasic.d'\r\n\r\n  class CalendarBasicService{\r\n    /**\r\n     * 年-季度\r\n     * */\r\n    date: Ref<string> = ref('2019')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendarOptions = {\r\n      type: CalendarTypeEnum.YEAR,\r\n      minDate: '2018',\r\n      maxDate: '2022',\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onCatchSelectDate(e:CalendarBasic.SelectDateCallbackResult){\r\n      const { startDate } = e\r\n      console.log('选中的：', startDate.format('YYYY'))\r\n    }\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-calendar': defineAsyncComponent(() => import('@/components/yui/calendar/calendarBasic/calendarBasic.vue'))\r\n      // 'y-calendar': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarBasic/calendarBasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new CalendarBasicService()\r\n      return {\r\n        date:service.date,\r\n        selectedDate: service.selectedDate,\r\n        calendarOptions:service.calendarOptions,\r\n        onCatchSelectDate:service.onCatchSelectDate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 年月模式-单选\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\" :options=\"calendarOptions\" @onSelectDate=\"onSelectDate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import { ref, defineComponent, defineAsyncComponent } from 'vue'\r\n  import {CalendarBasic, CalendarTypeEnum} from '@/components/yui/calendar/calendarBasic/types/calendarBasic.d'\r\n\r\n  class CalendarBasicService{\r\n    /**\r\n     * 日期\r\n     * */\r\n    date = ref('2020-05')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendarOptions = {\r\n      type: CalendarTypeEnum.MONTH\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onSelectDate(e:CalendarBasic.SelectDateCallbackResult){\r\n      const { startDate } = e\r\n      console.log(`选中的：${startDate.format('YYYY-MM')}`)\r\n    }\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-calendar': defineAsyncComponent(() => import('@/components/yui/calendar/calendarBasic/calendarBasic.vue'))\r\n      // 'y-calendar': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarBasic/calendarBasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new CalendarBasicService()\r\n      return {\r\n        date:service.date,\r\n        calendarOptions:service.calendarOptions,\r\n        onSelectDate:service.onSelectDate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 年月模式-范围\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\" :options=\"calendarOptions\" @onSelectDate=\"onSelectDate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import { ref, defineComponent, defineAsyncComponent } from 'vue'\r\n  import {CalendarBasic, CalendarTypeEnum} from '@/components/yui/calendar/calendarBasic/types/calendarBasic.d'\r\n\r\n  class CalendarBasicService{\r\n    /**\r\n     * 日期\r\n     * */\r\n    date = ref('2020-05')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendarOptions = {\r\n      type: CalendarTypeEnum.MONTH,\r\n      isMultiSelect: true,\r\n      endDate: '2021-03'\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onSelectDate(e:CalendarBasic.SelectDateCallbackResult){\r\n      const { startDate } = e\r\n      console.log(`选中的：${startDate.format('YYYY-MM')}`)\r\n    }\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-calendar': defineAsyncComponent(() => import('@/components/yui/calendar/calendarBasic/calendarBasic.vue'))\r\n      // 'y-calendar': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarBasic/calendarBasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new CalendarBasicService()\r\n      return {\r\n        date:service.date,\r\n        calendarOptions:service.calendarOptions,\r\n        onSelectDate:service.onSelectDate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 年月模式-最大最小值\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\" :options=\"calendarOptions\" @onSelectDate=\"onSelectDate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import { ref, defineComponent, defineAsyncComponent } from 'vue'\r\n  import {CalendarBasic, CalendarTypeEnum} from '@/components/yui/calendar/calendarBasic/types/calendarBasic.d'\r\n\r\n  class CalendarBasicService{\r\n    /**\r\n     * 日期\r\n     * */\r\n    date = ref('2020-05')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendarOptions = {\r\n      type: CalendarTypeEnum.MONTH,\r\n      minDate: '2020-03',\r\n      maxDate: '2020-08',\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onSelectDate(e:CalendarBasic.SelectDateCallbackResult){\r\n      const { startDate } = e\r\n      console.log(`选中的：${startDate.format('YYYY-MM')}`)\r\n    }\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-calendar': defineAsyncComponent(() => import('@/components/yui/calendar/calendarBasic/calendarBasic.vue'))\r\n      // 'y-calendar': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarBasic/calendarBasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new CalendarBasicService()\r\n      return {\r\n        date:service.date,\r\n        calendarOptions:service.calendarOptions,\r\n        onSelectDate:service.onSelectDate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 季度模式-单选\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                :options=\"calendarOptions\"\r\n                @onSelectDate=\"onCatchSelectDate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import {Ref, ref, defineComponent, defineAsyncComponent} from 'vue'\r\n  import {CalendarBasic, CalendarTypeEnum} from '@/components/yui/calendar/calendarBasic/types/calendarBasic.d'\r\n\r\n  class CalendarBasicService{\r\n    /**\r\n     * 年-季度\r\n     * */\r\n    date: Ref<string> = ref('2021-01')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendarOptions = {\r\n      type: CalendarTypeEnum.QUARTER,\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onCatchSelectDate(e:CalendarBasic.SelectDateCallbackResult){\r\n      const { startDate } = e\r\n      console.log(`选中的：${startDate.format('YYYY-MM')}`)\r\n    }\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-calendar': defineAsyncComponent(() => import('@/components/yui/calendar/calendarBasic/calendarBasic.vue'))\r\n      // 'y-calendar': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarBasic/calendarBasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new CalendarBasicService()\r\n      return {\r\n        date:service.date,\r\n        calendarOptions:service.calendarOptions,\r\n        onCatchSelectDate:service.onCatchSelectDate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 季度模式-范围\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                :options=\"calendarOptions\"\r\n                @onSelectDate=\"onCatchSelectDate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import {Ref, ref, defineComponent, defineAsyncComponent} from 'vue'\r\n  import {CalendarBasic, CalendarTypeEnum} from '@/components/yui/calendar/calendarBasic/types/calendarBasic.d'\r\n\r\n  class CalendarBasicService{\r\n    /**\r\n     * 年-季度\r\n     * */\r\n    date: Ref<string> = ref('2021-01')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendarOptions = {\r\n      type: CalendarTypeEnum.QUARTER,\r\n      isMultiSelect: true,\r\n      endDate: '2021-03'\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onCatchSelectDate(e:CalendarBasic.SelectDateCallbackResult){\r\n      const { startDate, endDate } = e\r\n      console.log(`选中的：${startDate.format('YYYY-MM')}-${endDate.format('YYYY-MM')}`)\r\n    }\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-calendar': defineAsyncComponent(() => import('@/components/yui/calendar/calendarBasic/calendarBasic.vue'))\r\n      // 'y-calendar': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarBasic/calendarBasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new CalendarBasicService()\r\n      return {\r\n        date:service.date,\r\n        calendarOptions:service.calendarOptions,\r\n        onCatchSelectDate:service.onCatchSelectDate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 季度模式-最大最小值\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                :options=\"calendarOptions\"\r\n                @onSelectDate=\"onCatchSelectDate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import {Ref, ref, defineComponent, defineAsyncComponent} from 'vue'\r\n  import {CalendarBasic, CalendarTypeEnum} from '@/components/yui/calendar/calendarBasic/types/calendarBasic.d'\r\n\r\n  class CalendarBasicService{\r\n    /**\r\n     * 年-季度\r\n     * */\r\n    date: Ref<string> = ref('2021-01')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendarOptions = {\r\n      type: CalendarTypeEnum.QUARTER,\r\n      minDate: '2020-02',\r\n      maxDate: '2021-04',\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onCatchSelectDate(e:CalendarBasic.SelectDateCallbackResult){\r\n      const { startDate } = e\r\n      console.log(`选中的：${startDate.format('YYYY-MM')}`)\r\n    }\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-calendar': defineAsyncComponent(() => import('@/components/yui/calendar/calendarBasic/calendarBasic.vue'))\r\n      // 'y-calendar': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarBasic/calendarBasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new CalendarBasicService()\r\n      return {\r\n        date:service.date,\r\n        calendarOptions:service.calendarOptions,\r\n        onCatchSelectDate:service.onCatchSelectDate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface CalendarBasicProps extends Record<string, unknown> {\n\n  /**\n * 参数\n */\n  options: CalendarOptions\n\n  /**\n   * 值，必填，开始日期\n   */\n  modelValue: string\n}\n\n/**\n * 日历参数\n */\nexport interface CalendarOptions {\n  /**\n   * 日期类型, 默认'date'\n   */\n  type?: CalendarTypeEnum\n\n  /**\n   * 是否多选，默认：false\n   */\n  isMultiSelect?: boolean\n\n  /**\n   * 是否显示工具条，默认：true\n   */\n  showToolBar?: boolean\n\n  /**\n   * 结束日期\n   */\n  endDate?: string\n\n  /**\n   * 最小值\n   */\n  minDate?: string\n\n  /**\n   * 最大值\n   */\n  maxDate?: string\n\n  /**\n   * 日历快捷键配置\n   */\n  shortcuts?: ShortcutsItem[]\n}\n\n/**\n * 日历快捷键\n */\nexport interface ShortcutsItem {\n  /**\n   * 文字\n   */\n  text: string\n\n  /**\n   * 值\n   */\n  value: Function\n}\n\nexport enum CalendarTypeEnum {\n  /**\n   * 年月日模式\n   */\n  DATE= 'date',\n\n  /**\n   * 年月模式\n   */\n  MONTH = 'month',\n\n  /**\n   * 年模式\n   */\n  YEAR = 'year',\n\n  /**\n   * 季度\n   */\n  QUARTER = 'quarter',\n}\n\n# 事件\n/**\n * 事件\n */\nexport interface Events {\n\n  /**\n   * 日期选中事件\n   */\n  onSelectDate: SelectDateCallbackResult\n}\n\n/**\n * 选中日期回调参数\n */\nexport interface SelectDateCallbackResult {\n\n  /**\n   * 开始日期\n   */\n  startDate: Dayjs\n\n  /**\n   * 结束日期\n   */\n  endDate?: Dayjs\n}",
      "normalizedContent": "# 日历 y-calendar\n该组件提供日历选择功能（包括范围选择）\n\n# 组件名称\ny-calendar\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\" :options=\"calendaroptions\" @onselectdate=\"onselectdate\"></y-calendar>\r\n\r\n    <view>选中的日期：{{ date }}</view>\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import { ref, definecomponent, defineasynccomponent } from 'vue'\r\n  import {calendarbasic} from '@/components/yui/calendar/calendarbasic/types/calendarbasic'\r\n\r\n  class calendarbasicservice{\r\n    /**\r\n     * 日期\r\n     * */\r\n    date = ref('2023-02-01')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendaroptions = {\r\n      ismultiselect: false,\r\n      showtoolbar: true\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onselectdate(e:calendarbasic.selectdatecallbackresult){\r\n      this.date.value = e.startdate.format('yyyy-mm-dd hh:mm:ss')\r\n    }\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-calendar': defineasynccomponent(() => import('@/components/yui/calendar/calendarbasic/calendarbasic.vue'))\r\n      // 'y-calendar': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarbasic/calendarbasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new calendarbasicservice()\r\n      return {\r\n        date:service.date,\r\n        calendaroptions:service.calendaroptions,\r\n        onselectdate:service.onselectdate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 选择范围及回填单个或范围\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                @onselectdate=\"onselectdate\"\r\n                :options=\"options\"></y-calendar>\r\n  </view></template><script lang=\"ts\">import \"./calendar.scss\";import { ref, definecomponent, defineasynccomponent } from \"vue\";import { calendarbasic } from \"@/components/calendar/calendarbasic/types/calendarbasic\";\r\n\r\nclass calendarbasicservice {\r\n  /**\r\n   * 日期\r\n   * */\r\n  date = ref('2021-03-18')\r\n\r\n\r\n  /**\r\n   * 日期组件参数\r\n   * */\r\n  options: calendarbasic.calendaroptions = {\r\n    ismultiselect: true,\r\n    showtoolbar: true,\r\n    enddate: '2021-03-20'\r\n  };\r\n\r\n  /**\r\n   * 日期选中事件\r\n   */\r\n  onselectdate(e: calendarbasic.selectdatecallbackresult) {\r\n    console.log(`${e.startdate.format('yyyy-mm-dd hh:mm:ss')}~${e.enddate&&e.enddate.format('yyyy-mm-dd hh:mm:ss')}`)\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    \"y-calendar\": defineasynccomponent(() => import(\"@/components/yui/calendar/calendarbasic/calendarbasic.vue\")),\r\n    // \"y-calendar\": defineasynccomponent(() => import(\"../../../../../taro-yui-vue/src/components/calendar/calendarbasic/calendarbasic.vue\")),\r\n  },\r\n  setup() {\r\n    const service = new calendarbasicservice();\r\n    return {\r\n      date: service.date,\r\n      options: service.options,\r\n      onselectdate: service.onselectdate.bind(service),\r\n    };\r\n  },});</script>\n\n# 最小值/最大值\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\" :options=\"calendaroptions\" @onselectdate=\"onselectdate\"></y-calendar>\r\n\r\n    <view>选中的日期：{{ date }}</view>\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import { ref, definecomponent, defineasynccomponent } from 'vue'\r\n  import {calendarbasic} from '@/components/yui/calendar/calendarbasic/types/calendarbasic'\r\n\r\n  class calendarbasicservice{\r\n    /**\r\n     * 日期\r\n     * */\r\n    date = ref('2021-02-05')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendaroptions = {\r\n      mindate: '2021-02-04',\r\n      maxdate: '2021-03-03',\r\n      ismultiselect: false,\r\n      showtoolbar: true\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onselectdate(e:calendarbasic.selectdatecallbackresult){\r\n      this.date.value = e.startdate.format('yyyy-mm-dd hh:mm:ss')\r\n    }\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-calendar': defineasynccomponent(() => import('@/components/yui/calendar/calendarbasic/calendarbasic.vue'))\r\n      // 'y-calendar': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarbasic/calendarbasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new calendarbasicservice()\r\n      return {\r\n        date:service.date,\r\n        calendaroptions:service.calendaroptions,\r\n        onselectdate:service.onselectdate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 年度模式-单选\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                :options=\"calendaroptions\"\r\n                @onselectdate=\"oncatchselectdate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import {ref, ref, definecomponent, defineasynccomponent} from 'vue'\r\n  import {calendarbasic, calendartypeenum} from '@/components/yui/calendar/calendarbasic/types/calendarbasic.d'\r\n\r\n  class calendarbasicservice{\r\n    /**\r\n     * 年-季度\r\n     * */\r\n    date: ref<string> = ref('2019')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendaroptions = {\r\n      type: calendartypeenum.year\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    oncatchselectdate(e:calendarbasic.selectdatecallbackresult){\r\n      const { startdate } = e\r\n      console.log('选中的：', startdate.format('yyyy'))\r\n    }\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-calendar': defineasynccomponent(() => import('@/components/yui/calendar/calendarbasic/calendarbasic.vue'))\r\n      // 'y-calendar': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarbasic/calendarbasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new calendarbasicservice()\r\n      return {\r\n        date:service.date,\r\n        selecteddate: service.selecteddate,\r\n        calendaroptions:service.calendaroptions,\r\n        oncatchselectdate:service.oncatchselectdate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 年度模式-范围\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                :options=\"calendaroptions\"\r\n                @onselectdate=\"oncatchselectdate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import {ref, ref, definecomponent, defineasynccomponent} from 'vue'\r\n  import {calendarbasic, calendartypeenum} from '@/components/yui/calendar/calendarbasic/types/calendarbasic.d'\r\n\r\n  class calendarbasicservice{\r\n    /**\r\n     * 年-季度\r\n     * */\r\n    date: ref<string> = ref('2015')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendaroptions = {\r\n      type: calendartypeenum.year,\r\n      ismultiselect: true,\r\n      enddate: '2018'\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    oncatchselectdate(e:calendarbasic.selectdatecallbackresult){\r\n      const { startdate, enddate } = e\r\n      console.log(`选中的：${startdate.format('yyyy')}-${enddate.format('yyyy')}`)\r\n    }\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-calendar': defineasynccomponent(() => import('@/components/yui/calendar/calendarbasic/calendarbasic.vue'))\r\n      // 'y-calendar': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarbasic/calendarbasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new calendarbasicservice()\r\n      return {\r\n        date:service.date,\r\n        selecteddate: service.selecteddate,\r\n        calendaroptions:service.calendaroptions,\r\n        oncatchselectdate:service.oncatchselectdate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 年度模式-最大最小值\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                :options=\"calendaroptions\"\r\n                @onselectdate=\"oncatchselectdate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import {ref, ref, definecomponent, defineasynccomponent} from 'vue'\r\n  import {calendarbasic, calendartypeenum} from '@/components/yui/calendar/calendarbasic/types/calendarbasic.d'\r\n\r\n  class calendarbasicservice{\r\n    /**\r\n     * 年-季度\r\n     * */\r\n    date: ref<string> = ref('2019')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendaroptions = {\r\n      type: calendartypeenum.year,\r\n      mindate: '2018',\r\n      maxdate: '2022',\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    oncatchselectdate(e:calendarbasic.selectdatecallbackresult){\r\n      const { startdate } = e\r\n      console.log('选中的：', startdate.format('yyyy'))\r\n    }\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-calendar': defineasynccomponent(() => import('@/components/yui/calendar/calendarbasic/calendarbasic.vue'))\r\n      // 'y-calendar': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarbasic/calendarbasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new calendarbasicservice()\r\n      return {\r\n        date:service.date,\r\n        selecteddate: service.selecteddate,\r\n        calendaroptions:service.calendaroptions,\r\n        oncatchselectdate:service.oncatchselectdate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 年月模式-单选\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\" :options=\"calendaroptions\" @onselectdate=\"onselectdate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import { ref, definecomponent, defineasynccomponent } from 'vue'\r\n  import {calendarbasic, calendartypeenum} from '@/components/yui/calendar/calendarbasic/types/calendarbasic.d'\r\n\r\n  class calendarbasicservice{\r\n    /**\r\n     * 日期\r\n     * */\r\n    date = ref('2020-05')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendaroptions = {\r\n      type: calendartypeenum.month\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onselectdate(e:calendarbasic.selectdatecallbackresult){\r\n      const { startdate } = e\r\n      console.log(`选中的：${startdate.format('yyyy-mm')}`)\r\n    }\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-calendar': defineasynccomponent(() => import('@/components/yui/calendar/calendarbasic/calendarbasic.vue'))\r\n      // 'y-calendar': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarbasic/calendarbasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new calendarbasicservice()\r\n      return {\r\n        date:service.date,\r\n        calendaroptions:service.calendaroptions,\r\n        onselectdate:service.onselectdate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 年月模式-范围\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\" :options=\"calendaroptions\" @onselectdate=\"onselectdate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import { ref, definecomponent, defineasynccomponent } from 'vue'\r\n  import {calendarbasic, calendartypeenum} from '@/components/yui/calendar/calendarbasic/types/calendarbasic.d'\r\n\r\n  class calendarbasicservice{\r\n    /**\r\n     * 日期\r\n     * */\r\n    date = ref('2020-05')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendaroptions = {\r\n      type: calendartypeenum.month,\r\n      ismultiselect: true,\r\n      enddate: '2021-03'\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onselectdate(e:calendarbasic.selectdatecallbackresult){\r\n      const { startdate } = e\r\n      console.log(`选中的：${startdate.format('yyyy-mm')}`)\r\n    }\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-calendar': defineasynccomponent(() => import('@/components/yui/calendar/calendarbasic/calendarbasic.vue'))\r\n      // 'y-calendar': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarbasic/calendarbasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new calendarbasicservice()\r\n      return {\r\n        date:service.date,\r\n        calendaroptions:service.calendaroptions,\r\n        onselectdate:service.onselectdate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 年月模式-最大最小值\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\" :options=\"calendaroptions\" @onselectdate=\"onselectdate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import { ref, definecomponent, defineasynccomponent } from 'vue'\r\n  import {calendarbasic, calendartypeenum} from '@/components/yui/calendar/calendarbasic/types/calendarbasic.d'\r\n\r\n  class calendarbasicservice{\r\n    /**\r\n     * 日期\r\n     * */\r\n    date = ref('2020-05')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendaroptions = {\r\n      type: calendartypeenum.month,\r\n      mindate: '2020-03',\r\n      maxdate: '2020-08',\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    onselectdate(e:calendarbasic.selectdatecallbackresult){\r\n      const { startdate } = e\r\n      console.log(`选中的：${startdate.format('yyyy-mm')}`)\r\n    }\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-calendar': defineasynccomponent(() => import('@/components/yui/calendar/calendarbasic/calendarbasic.vue'))\r\n      // 'y-calendar': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarbasic/calendarbasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new calendarbasicservice()\r\n      return {\r\n        date:service.date,\r\n        calendaroptions:service.calendaroptions,\r\n        onselectdate:service.onselectdate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 季度模式-单选\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                :options=\"calendaroptions\"\r\n                @onselectdate=\"oncatchselectdate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import {ref, ref, definecomponent, defineasynccomponent} from 'vue'\r\n  import {calendarbasic, calendartypeenum} from '@/components/yui/calendar/calendarbasic/types/calendarbasic.d'\r\n\r\n  class calendarbasicservice{\r\n    /**\r\n     * 年-季度\r\n     * */\r\n    date: ref<string> = ref('2021-01')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendaroptions = {\r\n      type: calendartypeenum.quarter,\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    oncatchselectdate(e:calendarbasic.selectdatecallbackresult){\r\n      const { startdate } = e\r\n      console.log(`选中的：${startdate.format('yyyy-mm')}`)\r\n    }\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-calendar': defineasynccomponent(() => import('@/components/yui/calendar/calendarbasic/calendarbasic.vue'))\r\n      // 'y-calendar': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarbasic/calendarbasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new calendarbasicservice()\r\n      return {\r\n        date:service.date,\r\n        calendaroptions:service.calendaroptions,\r\n        oncatchselectdate:service.oncatchselectdate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 季度模式-范围\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                :options=\"calendaroptions\"\r\n                @onselectdate=\"oncatchselectdate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import {ref, ref, definecomponent, defineasynccomponent} from 'vue'\r\n  import {calendarbasic, calendartypeenum} from '@/components/yui/calendar/calendarbasic/types/calendarbasic.d'\r\n\r\n  class calendarbasicservice{\r\n    /**\r\n     * 年-季度\r\n     * */\r\n    date: ref<string> = ref('2021-01')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendaroptions = {\r\n      type: calendartypeenum.quarter,\r\n      ismultiselect: true,\r\n      enddate: '2021-03'\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    oncatchselectdate(e:calendarbasic.selectdatecallbackresult){\r\n      const { startdate, enddate } = e\r\n      console.log(`选中的：${startdate.format('yyyy-mm')}-${enddate.format('yyyy-mm')}`)\r\n    }\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-calendar': defineasynccomponent(() => import('@/components/yui/calendar/calendarbasic/calendarbasic.vue'))\r\n      // 'y-calendar': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarbasic/calendarbasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new calendarbasicservice()\r\n      return {\r\n        date:service.date,\r\n        calendaroptions:service.calendaroptions,\r\n        oncatchselectdate:service.oncatchselectdate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 季度模式-最大最小值\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-calendar v-model=\"date\"\r\n                :options=\"calendaroptions\"\r\n                @onselectdate=\"oncatchselectdate\"></y-calendar>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './calendar.scss'\r\n  import {ref, ref, definecomponent, defineasynccomponent} from 'vue'\r\n  import {calendarbasic, calendartypeenum} from '@/components/yui/calendar/calendarbasic/types/calendarbasic.d'\r\n\r\n  class calendarbasicservice{\r\n    /**\r\n     * 年-季度\r\n     * */\r\n    date: ref<string> = ref('2021-01')\r\n\r\n    /**\r\n     * 组件参数\r\n     * */\r\n    calendaroptions = {\r\n      type: calendartypeenum.quarter,\r\n      mindate: '2020-02',\r\n      maxdate: '2021-04',\r\n    }\r\n\r\n    /**\r\n     * 日期选中事件\r\n     */\r\n    oncatchselectdate(e:calendarbasic.selectdatecallbackresult){\r\n      const { startdate } = e\r\n      console.log(`选中的：${startdate.format('yyyy-mm')}`)\r\n    }\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-calendar': defineasynccomponent(() => import('@/components/yui/calendar/calendarbasic/calendarbasic.vue'))\r\n      // 'y-calendar': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/calendar/calendarbasic/calendarbasic.vue'))\r\n    },\r\n    setup() {\r\n      const service = new calendarbasicservice()\r\n      return {\r\n        date:service.date,\r\n        calendaroptions:service.calendaroptions,\r\n        oncatchselectdate:service.oncatchselectdate.bind(service)\r\n      };\r\n    }\r\n  });</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface calendarbasicprops extends record<string, unknown> {\n\n  /**\n * 参数\n */\n  options: calendaroptions\n\n  /**\n   * 值，必填，开始日期\n   */\n  modelvalue: string\n}\n\n/**\n * 日历参数\n */\nexport interface calendaroptions {\n  /**\n   * 日期类型, 默认'date'\n   */\n  type?: calendartypeenum\n\n  /**\n   * 是否多选，默认：false\n   */\n  ismultiselect?: boolean\n\n  /**\n   * 是否显示工具条，默认：true\n   */\n  showtoolbar?: boolean\n\n  /**\n   * 结束日期\n   */\n  enddate?: string\n\n  /**\n   * 最小值\n   */\n  mindate?: string\n\n  /**\n   * 最大值\n   */\n  maxdate?: string\n\n  /**\n   * 日历快捷键配置\n   */\n  shortcuts?: shortcutsitem[]\n}\n\n/**\n * 日历快捷键\n */\nexport interface shortcutsitem {\n  /**\n   * 文字\n   */\n  text: string\n\n  /**\n   * 值\n   */\n  value: function\n}\n\nexport enum calendartypeenum {\n  /**\n   * 年月日模式\n   */\n  date= 'date',\n\n  /**\n   * 年月模式\n   */\n  month = 'month',\n\n  /**\n   * 年模式\n   */\n  year = 'year',\n\n  /**\n   * 季度\n   */\n  quarter = 'quarter',\n}\n\n# 事件\n/**\n * 事件\n */\nexport interface events {\n\n  /**\n   * 日期选中事件\n   */\n  onselectdate: selectdatecallbackresult\n}\n\n/**\n * 选中日期回调参数\n */\nexport interface selectdatecallbackresult {\n\n  /**\n   * 开始日期\n   */\n  startdate: dayjs\n\n  /**\n   * 结束日期\n   */\n  enddate?: dayjs\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "卡片 y-card",
      "frontmatter": {},
      "regularPath": "/component/basic/card.html",
      "relativePath": "component/basic/card.md",
      "key": "v-3ae87fea",
      "path": "/component/basic/card.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 27
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 42
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 1102
        },
        {
          "level": 3,
          "title": "事件",
          "slug": "事件",
          "normalizedTitle": "事件",
          "charIndex": 1533
        }
      ],
      "headersStr": "组件名称 基础用法 属性 事件",
      "content": "# 卡片 y-card\n在一组备选项中进行单选\n\n# 组件名称\ny-card\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-card\r\n      :info=\"info\"\r\n      titleProperty=\"createTime\"\r\n      :bodyPropertyList=\"bodyPropertyList\"\r\n      :actionList=\"actionList\"\r\n      :customActionList=\"customActionList\"\r\n      @action=\"onCardAction\"\r\n      @click=\"onCardClick\"\r\n    >\r\n      <template v-slot:school-left>我是左插槽</template>\r\n      <template v-slot:address-right>我是右插槽</template>\r\n      <template v-slot:content>\r\n        <view style=\"text-align: left\">\r\n          我是整条插槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽\r\n        </view>\r\n      </template>\r\n    </y-card>\r\n  </view></template><style>.createOrder {\r\n  color: red;\r\n  background-image: url(../../assets/img/custom_action_buy.svg);}</style><script lang=\"ts\">import { defineComponent, defineAsyncComponent } from \"vue\";import \"./card.scss\";import { Card, ActionTypeEnum } from \"@/components/yui/card/types/card.d\";// import { Card, ActionTypeEnum } from \"../../../../taro-yui-vue/src/components/card/types/card.d\";\r\n\r\n/**\r\n * 卡片\r\n */class CardService {\r\n\r\n\r\n  /**\r\n   * 卡片属性标签列表\r\n   */\r\n  bodyPropertyList: Card.CardProperty[] = [\r\n    { name: \"fullName\", label: \"姓名\" },\r\n    { name: \"sex\", label: \"性别\" },\r\n    { name: \"age\", label: \"年龄\" },\r\n    { name: \"school\", label: \"学校\" },\r\n    { name: \"address\", label: \"地址\" },\r\n    { name: \"content\", label: \"详情\" },\r\n  ];\r\n\r\n  customActionList: Card.ActionInfo[] = [\r\n    {\r\n      className: \"createOrder\",\r\n      label: \"下单\",\r\n    },\r\n  ];\r\n\r\n  /**\r\n   * card点击事件\r\n   */\r\n  onCardClick() {\r\n    console.log(\"card点击\");\r\n  }\r\n\r\n  /**\r\n   * 编辑\r\n   */\r\n  onCardAction(e: Card.ActionCallbackResult) {\r\n    console.log(`card编辑:${e.type}`);\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // \"y-card\": defineAsyncComponent(\r\n    //   () => import(\"@/components/yui/card/card.vue\")\r\n    // ),\r\n    \"y-card\": defineAsyncComponent(\r\n      () => import(\"../../../../taro-yui-vue/src/components/card/card.vue\")\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new CardService();\r\n    return {\r\n      info: {\r\n        id: 13,\r\n        fullName: \"张三\",\r\n        sex: \"男\",\r\n        age: 25,\r\n        createTime: \"2020-11-13 12:45:23\",\r\n        school: '某某中学',\r\n        address: '某市某区某条街'\r\n      },\r\n      bodyPropertyList: service.bodyPropertyList,\r\n      customActionList: service.customActionList,\r\n      actionList: [\r\n        ActionTypeEnum.edit,\r\n        ActionTypeEnum.delete,\r\n        ActionTypeEnum.rename,\r\n        ActionTypeEnum.disable,\r\n      ],\r\n      onCardAction: service.onCardAction.bind(service),\r\n      onCardClick: service.onCardClick.bind(service),\r\n    };\r\n  },});</script>\n\n# 属性\n/**\n * 操作按钮类型\n */\nexport enum ActionTypeEnum {\n    /**\n     * 删除\n     */\n    delete = 'action_delete',\n\n    /**\n     * 编辑\n     */\n    edit = 'action_edit',\n\n    /**\n     * 重命名\n     */\n    rename = 'action_rename',\n\n    /**\n     * 禁用\n     */\n    disable = \"action_disable\",\n\n\n  /**\n   * 启用\n   */\n  enable = \"action_enable\"\n}\n\n/**\n * 属性标签\n */\nexport interface CardProperty {\n\n    /**\n     * 名称\n     */\n    name: string\n\n    /**\n     * 显示标签\n     */\n    label: string\n}\n\nexport interface Props {\n\n    /**\n     * 绑定数据\n     */\n    info: Object,\n\n    /**\n     * 标题属性\n     */\n    titleProperty: string\n\n    /**\n     * 属性显示标签列表\n     */\n    bodyPropertyList: CardProperty[],\n\n    /**\n     * 操作列表\n     */\n    actionList: ActionTypeEnum[]\n\n    /**\n     * 自定义操作列表，默认值：[]\n     */\n    customActionList?: ActionInfo[]\n}\n\n/**\n * 操作按钮信息\n */\nexport interface ActionInfo {\n\n    /**\n     * class属性\n     */\n    className: string\n\n    /**\n     * 显示的名称\n     */\n    label: string\n}\n\n# 事件\nexport interface Events {\n\n    /**\n     * 操作按钮点击事件回调参数\n     */\n    action: ActionCallbackResult\n\n    /**\n     * 卡片点击事件回调参数\n     */\n    click: ClickCallbackResult\n}\n\n/**\n * card点击事件返回值\n */\ninterface ClickCallbackResult {\n\n    /**\n     * 绑定数据\n     */\n    value: Object\n}\n\n/**\n * 操作按钮点击事件返回值\n */\ninterface ActionCallbackResult {\n\n    /**\n     * 绑定数据\n     */\n    value: Object\n\n    /**\n     * 操作类型\n     */\n    type: ActionTypeEnum | string\n}",
      "normalizedContent": "# 卡片 y-card\n在一组备选项中进行单选\n\n# 组件名称\ny-card\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-card\r\n      :info=\"info\"\r\n      titleproperty=\"createtime\"\r\n      :bodypropertylist=\"bodypropertylist\"\r\n      :actionlist=\"actionlist\"\r\n      :customactionlist=\"customactionlist\"\r\n      @action=\"oncardaction\"\r\n      @click=\"oncardclick\"\r\n    >\r\n      <template v-slot:school-left>我是左插槽</template>\r\n      <template v-slot:address-right>我是右插槽</template>\r\n      <template v-slot:content>\r\n        <view style=\"text-align: left\">\r\n          我是整条插槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽槽\r\n        </view>\r\n      </template>\r\n    </y-card>\r\n  </view></template><style>.createorder {\r\n  color: red;\r\n  background-image: url(../../assets/img/custom_action_buy.svg);}</style><script lang=\"ts\">import { definecomponent, defineasynccomponent } from \"vue\";import \"./card.scss\";import { card, actiontypeenum } from \"@/components/yui/card/types/card.d\";// import { card, actiontypeenum } from \"../../../../taro-yui-vue/src/components/card/types/card.d\";\r\n\r\n/**\r\n * 卡片\r\n */class cardservice {\r\n\r\n\r\n  /**\r\n   * 卡片属性标签列表\r\n   */\r\n  bodypropertylist: card.cardproperty[] = [\r\n    { name: \"fullname\", label: \"姓名\" },\r\n    { name: \"sex\", label: \"性别\" },\r\n    { name: \"age\", label: \"年龄\" },\r\n    { name: \"school\", label: \"学校\" },\r\n    { name: \"address\", label: \"地址\" },\r\n    { name: \"content\", label: \"详情\" },\r\n  ];\r\n\r\n  customactionlist: card.actioninfo[] = [\r\n    {\r\n      classname: \"createorder\",\r\n      label: \"下单\",\r\n    },\r\n  ];\r\n\r\n  /**\r\n   * card点击事件\r\n   */\r\n  oncardclick() {\r\n    console.log(\"card点击\");\r\n  }\r\n\r\n  /**\r\n   * 编辑\r\n   */\r\n  oncardaction(e: card.actioncallbackresult) {\r\n    console.log(`card编辑:${e.type}`);\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // \"y-card\": defineasynccomponent(\r\n    //   () => import(\"@/components/yui/card/card.vue\")\r\n    // ),\r\n    \"y-card\": defineasynccomponent(\r\n      () => import(\"../../../../taro-yui-vue/src/components/card/card.vue\")\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new cardservice();\r\n    return {\r\n      info: {\r\n        id: 13,\r\n        fullname: \"张三\",\r\n        sex: \"男\",\r\n        age: 25,\r\n        createtime: \"2020-11-13 12:45:23\",\r\n        school: '某某中学',\r\n        address: '某市某区某条街'\r\n      },\r\n      bodypropertylist: service.bodypropertylist,\r\n      customactionlist: service.customactionlist,\r\n      actionlist: [\r\n        actiontypeenum.edit,\r\n        actiontypeenum.delete,\r\n        actiontypeenum.rename,\r\n        actiontypeenum.disable,\r\n      ],\r\n      oncardaction: service.oncardaction.bind(service),\r\n      oncardclick: service.oncardclick.bind(service),\r\n    };\r\n  },});</script>\n\n# 属性\n/**\n * 操作按钮类型\n */\nexport enum actiontypeenum {\n    /**\n     * 删除\n     */\n    delete = 'action_delete',\n\n    /**\n     * 编辑\n     */\n    edit = 'action_edit',\n\n    /**\n     * 重命名\n     */\n    rename = 'action_rename',\n\n    /**\n     * 禁用\n     */\n    disable = \"action_disable\",\n\n\n  /**\n   * 启用\n   */\n  enable = \"action_enable\"\n}\n\n/**\n * 属性标签\n */\nexport interface cardproperty {\n\n    /**\n     * 名称\n     */\n    name: string\n\n    /**\n     * 显示标签\n     */\n    label: string\n}\n\nexport interface props {\n\n    /**\n     * 绑定数据\n     */\n    info: object,\n\n    /**\n     * 标题属性\n     */\n    titleproperty: string\n\n    /**\n     * 属性显示标签列表\n     */\n    bodypropertylist: cardproperty[],\n\n    /**\n     * 操作列表\n     */\n    actionlist: actiontypeenum[]\n\n    /**\n     * 自定义操作列表，默认值：[]\n     */\n    customactionlist?: actioninfo[]\n}\n\n/**\n * 操作按钮信息\n */\nexport interface actioninfo {\n\n    /**\n     * class属性\n     */\n    classname: string\n\n    /**\n     * 显示的名称\n     */\n    label: string\n}\n\n# 事件\nexport interface events {\n\n    /**\n     * 操作按钮点击事件回调参数\n     */\n    action: actioncallbackresult\n\n    /**\n     * 卡片点击事件回调参数\n     */\n    click: clickcallbackresult\n}\n\n/**\n * card点击事件返回值\n */\ninterface clickcallbackresult {\n\n    /**\n     * 绑定数据\n     */\n    value: object\n}\n\n/**\n * 操作按钮点击事件返回值\n */\ninterface actioncallbackresult {\n\n    /**\n     * 绑定数据\n     */\n    value: object\n\n    /**\n     * 操作类型\n     */\n    type: actiontypeenum | string\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "日期选择器 y-date-picker",
      "frontmatter": {},
      "regularPath": "/component/basic/datePicker.html",
      "relativePath": "component/basic/datePicker.md",
      "key": "v-6c4fd712",
      "path": "/component/basic/datePicker.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 32
        },
        {
          "level": 3,
          "title": "依赖组件",
          "slug": "依赖组件",
          "normalizedTitle": "依赖组件",
          "charIndex": 54
        },
        {
          "level": 3,
          "title": "单选",
          "slug": "单选",
          "normalizedTitle": "单选",
          "charIndex": 96
        },
        {
          "level": 3,
          "title": "多选",
          "slug": "多选",
          "normalizedTitle": "多选",
          "charIndex": 1638
        },
        {
          "level": 3,
          "title": "年度-单选",
          "slug": "年度-单选",
          "normalizedTitle": "年度-单选",
          "charIndex": 3480
        },
        {
          "level": 3,
          "title": "年度-范围",
          "slug": "年度-范围",
          "normalizedTitle": "年度-范围",
          "charIndex": 4648
        },
        {
          "level": 3,
          "title": "年月-单选",
          "slug": "年月-单选",
          "normalizedTitle": "年月-单选",
          "charIndex": 5777
        },
        {
          "level": 3,
          "title": "年月-范围",
          "slug": "年月-范围",
          "normalizedTitle": "年月-范围",
          "charIndex": 6879
        },
        {
          "level": 3,
          "title": "季度-单选",
          "slug": "季度-单选",
          "normalizedTitle": "季度-单选",
          "charIndex": 8010
        },
        {
          "level": 3,
          "title": "季度-范围",
          "slug": "季度-范围",
          "normalizedTitle": "季度-范围",
          "charIndex": 9113
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 10246
        }
      ],
      "headersStr": "组件名称 依赖组件 单选 多选 年度-单选 年度-范围 年月-单选 年月-范围 季度-单选 季度-范围 属性",
      "content": "# 日期选择器 y-date-picker\n用于选择日期\n\n# 组件名称\ny-date-picker\n\n# 依赖组件\n 1. y-float-layout\n 2. y-calendar\n\n# 单选\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <view id=\"maskOuterElId\"></view>\r\n\r\n    <view class=\"box box-1\">\r\n      <y-date-picker :options=\"options1\"></y-date-picker>\r\n    </view>\r\n\r\n    <view class=\"box\">\r\n      <y-date-picker :options=\"options2\"></y-date-picker>\r\n    </view>\r\n\r\n    <view class=\"box\">\r\n      <y-date-picker :options=\"options3\"></y-date-picker>\r\n    </view>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './datePicker.scss'\r\n  import { defineComponent, defineAsyncComponent, ref } from 'vue'\r\n  import { CalendarBasic } from \"@/components/yui/calendar/calendarBasic/types/calendarBasic\";\r\n\r\n\r\n  class DatePickerService{\r\n\r\n    /**\r\n     * date-picker组件参数\r\n     * */\r\n    options1 = ref({\r\n      placeholder: '请选择单个日期',\r\n      minDate: '2021-03-04',\r\n      maxDate: '2023-03-20',\r\n    })\r\n\r\n    options2 = ref({\r\n      placeholder: '请选择单个日期',\r\n    })\r\n\r\n    options3 = ref({\r\n      placeholder: '请选择单个日期-外部定点',\r\n      maskOuterElId: 'maskOuterElId'\r\n    })\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-date-picker': defineAsyncComponent(() => import('@/components/yui/datePicker/datePicker.vue'))\r\n      // 'y-date-picker': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/datePicker/datePicker.vue'))\r\n    },\r\n    setup() {\r\n      const service = new DatePickerService()\r\n      return {\r\n        options1: service.options1,\r\n        options2: service.options2,\r\n        options3: service.options3,\r\n      };\r\n    }\r\n  });</script>\n\n# 多选\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <view class=\"box\">\r\n      <y-date-picker\r\n        :options=\"options\"\r\n        v-model=\"dateList\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import \"./datePicker.scss\";import { defineComponent, defineAsyncComponent,Ref,ref } from \"vue\";import { CalendarBasic } from \"@/components/yui/calendar/calendarBasic/types/calendarBasic\";\r\n\r\nclass DatePickerService {\r\n\r\n  /**\r\n   * 参数\r\n   */\r\n  options: CalendarBasic.CalendarOptions = {\r\n    isMultiSelect: true,\r\n    showToolBar: true,\r\n    shortcuts: [{\r\n      text: '最近一周',\r\n      value: (() => {\r\n        const end = new Date();\r\n        const start = new Date();\r\n        start.setTime(start.getTime() - 3600 * 1000 * 24 * 7)\r\n        return [start, end]\r\n      })\r\n    },{\r\n      text: '最近一个月',\r\n      value: (() => {\r\n        const end = new Date();\r\n        const start = new Date();\r\n        start.setTime(start.getTime() - 3600 * 1000 * 24 * 30)\r\n        return [start, end]\r\n      })\r\n    },{\r\n      text: '最近三个月',\r\n      value: (() => {\r\n        const end = new Date();\r\n        const start = new Date();\r\n        start.setTime(start.getTime() - 3600 * 1000 * 24 * 90)\r\n        return [start, end]\r\n      })\r\n    }]\r\n  };\r\n\r\n  /**\r\n   * 值\r\n   */\r\n   dateList:Ref<string[]> = ref(['2021-01-25','2021-01-26'])\r\n\r\n}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-date-picker': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/datePicker/datePicker.vue'))\r\n    \"y-date-picker\": defineAsyncComponent(\r\n      () => import(\"@/components/yui/datePicker/datePicker.vue\")\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new DatePickerService();\r\n    return {\r\n      options: service.options,\r\n      dateList: service.dateList,\r\n    };\r\n  },});</script>\n\n# 年度-单选\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <view class=\"box box-1\">\r\n      <y-date-picker  v-model=\"date\" :options=\"options\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">\r\n  import './datePicker.scss'\r\n  import { defineComponent, defineAsyncComponent, ref, Ref} from 'vue'\r\n  import { CalendarBasic, CalendarTypeEnum } from \"@/components/yui/calendar/calendarBasic/types/calendarBasic.d\";\r\n\r\n\r\n  class DatePickerService{\r\n\r\n    /**\r\n     * 值\r\n     * */\r\n    date: Ref<string> = ref('')\r\n\r\n    /**\r\n     * date-picker组件参数\r\n     * */\r\n    options = ref({\r\n      placeholder: '请选择单个年',\r\n      type: CalendarTypeEnum.YEAR\r\n    })\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-date-picker': defineAsyncComponent(() => import('@/components/yui/datePicker/datePicker.vue'))\r\n      // 'y-date-picker': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/datePicker/datePicker.vue'))\r\n    },\r\n    setup() {\r\n      const service = new DatePickerService()\r\n      return {\r\n        date: service.date,\r\n        options: service.options,\r\n      };\r\n    }\r\n  });</script>\n\n# 年度-范围\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <view class=\"box box-1\">\r\n      <y-date-picker v-model=\"date\" :options=\"options\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import './datePicker.scss'import { Ref, defineComponent, defineAsyncComponent, ref } from 'vue'import { CalendarBasic, CalendarTypeEnum } from \"@/components/yui/calendar/calendarBasic/types/calendarBasic.d\";\r\n\r\n\r\nclass DatePickerService{\r\n\r\n  /**\r\n   * 值\r\n   * */\r\n  date: Ref<string[]> = ref([])\r\n\r\n  /**\r\n   * date-picker组件参数\r\n   * */\r\n  options = ref({\r\n    placeholder: '请选择年范围',\r\n    type: CalendarTypeEnum.YEAR,\r\n    isMultiSelect: true,\r\n  })}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-date-picker': defineAsyncComponent(() => import('@/components/yui/datePicker/datePicker.vue'))\r\n    // 'y-date-picker': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/datePicker/datePicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new DatePickerService()\r\n    return {\r\n      date: service.date,\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 年月-单选\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <view class=\"box box-1\">\r\n      <y-date-picker  v-model=\"date\" :options=\"options\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import './datePicker.scss'import { defineComponent, defineAsyncComponent, ref, Ref} from 'vue'import { CalendarBasic, CalendarTypeEnum } from \"@/components/yui/calendar/calendarBasic/types/calendarBasic.d\";\r\n\r\n\r\nclass DatePickerService{\r\n\r\n  /**\r\n   * 值\r\n   * */\r\n  date: Ref<string> = ref('')\r\n\r\n  /**\r\n   * date-picker组件参数\r\n   * */\r\n  options = ref({\r\n    placeholder: '请选择单个年月',\r\n    type: CalendarTypeEnum.MONTH\r\n  })}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-date-picker': defineAsyncComponent(() => import('@/components/yui/datePicker/datePicker.vue'))\r\n    // 'y-date-picker': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/datePicker/datePicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new DatePickerService()\r\n    return {\r\n      date: service.date,\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 年月-范围\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <view class=\"box box-1\">\r\n      <y-date-picker  v-model=\"date\" :options=\"options\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import './datePicker.scss'import { defineComponent, defineAsyncComponent, ref, Ref} from 'vue'import { CalendarBasic, CalendarTypeEnum } from \"@/components/yui/calendar/calendarBasic/types/calendarBasic.d\";\r\n\r\n\r\nclass DatePickerService{\r\n\r\n  /**\r\n   * 值\r\n   * */\r\n  date: Ref<string[]> = ref([])\r\n\r\n  /**\r\n   * date-picker组件参数\r\n   * */\r\n  options = ref({\r\n    placeholder: '请选择年月范围',\r\n    type: CalendarTypeEnum.MONTH,\r\n    isMultiSelect: true,\r\n  })}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-date-picker': defineAsyncComponent(() => import('@/components/yui/datePicker/datePicker.vue'))\r\n    // 'y-date-picker': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/datePicker/datePicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new DatePickerService()\r\n    return {\r\n      date: service.date,\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 季度-单选\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <view class=\"box box-1\">\r\n      <y-date-picker  v-model=\"date\" :options=\"options\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import './datePicker.scss'import { defineComponent, defineAsyncComponent, ref, Ref} from 'vue'import { CalendarBasic, CalendarTypeEnum } from \"@/components/yui/calendar/calendarBasic/types/calendarBasic.d\";\r\n\r\n\r\nclass DatePickerService{\r\n\r\n  /**\r\n   * 值\r\n   * */\r\n  date: Ref<string> = ref('')\r\n\r\n  /**\r\n   * date-picker组件参数\r\n   * */\r\n  options = ref({\r\n    placeholder: '请选择季度',\r\n    type: CalendarTypeEnum.QUARTER,\r\n  })}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-date-picker': defineAsyncComponent(() => import('@/components/yui/datePicker/datePicker.vue'))\r\n    // 'y-date-picker': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/datePicker/datePicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new DatePickerService()\r\n    return {\r\n      date: service.date,\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 季度-范围\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <view class=\"box box-1\">\r\n      <y-date-picker  v-model=\"date\" :options=\"options\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import './datePicker.scss'import { defineComponent, defineAsyncComponent, ref, Ref} from 'vue'import { CalendarBasic, CalendarTypeEnum } from \"@/components/yui/calendar/calendarBasic/types/calendarBasic.d\";\r\n\r\n\r\nclass DatePickerService{\r\n\r\n  /**\r\n   * 值\r\n   * */\r\n  date: Ref<string[]> = ref([])\r\n\r\n  /**\r\n   * date-picker组件参数\r\n   * */\r\n  options = ref({\r\n    placeholder: '请选择季度范围',\r\n    type: CalendarTypeEnum.QUARTER,\r\n    isMultiSelect: true,\r\n  })}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-date-picker': defineAsyncComponent(() => import('@/components/yui/datePicker/datePicker.vue'))\r\n    // 'y-date-picker': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/datePicker/datePicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new DatePickerService()\r\n    return {\r\n      date: service.date,\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface Props extends Record<string, unknown> {\n  /***\n   * 模式：可编辑edit/可查看view, 默认edit\n   */\n  pattern?: string\n\n  /**\n   * 参数\n   */\n  options:YDatePickerOptions\n\n  /**\n   * 值，必填\n   */\n  modelValue: string|string[]\n}\n\n/**\n * datePicker参数\n */\nexport interface YDatePickerOptions {\n  /**\n   * 日期类型, 默认'date'\n   */\n  type?: CalendarTypeEnum\n\n  /**\n   *  提示信息，非必填\n   */\n  placeholder?: string\n\n  /**\n   * 是否多选，默认：false\n   */\n  isMultiSelect?: boolean\n\n  /**\n   * 日期格式化点位符，默认：YYYY-MM-DD\n   */\n  format?:string\n\n  /**\n   * 是否可清除, 必填项， 默认true\n   */\n  canClear?: boolean\n\n  /**\n   * 外部定点id\n   */\n  maskOuterElId?: string\n\n  /**\n   * 结束日期\n   */\n  endDate?: string\n\n  /**\n   * 最小值\n   */\n  minDate?: string\n\n  /**\n   * 最大值\n   */\n  maxDate?: string\n\n  /**\n   * 日历快捷键配置\n   */\n  shortcuts?: CalendarBasic.ShortcutsItem[]\n}",
      "normalizedContent": "# 日期选择器 y-date-picker\n用于选择日期\n\n# 组件名称\ny-date-picker\n\n# 依赖组件\n 1. y-float-layout\n 2. y-calendar\n\n# 单选\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <view id=\"maskouterelid\"></view>\r\n\r\n    <view class=\"box box-1\">\r\n      <y-date-picker :options=\"options1\"></y-date-picker>\r\n    </view>\r\n\r\n    <view class=\"box\">\r\n      <y-date-picker :options=\"options2\"></y-date-picker>\r\n    </view>\r\n\r\n    <view class=\"box\">\r\n      <y-date-picker :options=\"options3\"></y-date-picker>\r\n    </view>\r\n\r\n  </view></template><script lang=\"ts\">\r\n  import './datepicker.scss'\r\n  import { definecomponent, defineasynccomponent, ref } from 'vue'\r\n  import { calendarbasic } from \"@/components/yui/calendar/calendarbasic/types/calendarbasic\";\r\n\r\n\r\n  class datepickerservice{\r\n\r\n    /**\r\n     * date-picker组件参数\r\n     * */\r\n    options1 = ref({\r\n      placeholder: '请选择单个日期',\r\n      mindate: '2021-03-04',\r\n      maxdate: '2023-03-20',\r\n    })\r\n\r\n    options2 = ref({\r\n      placeholder: '请选择单个日期',\r\n    })\r\n\r\n    options3 = ref({\r\n      placeholder: '请选择单个日期-外部定点',\r\n      maskouterelid: 'maskouterelid'\r\n    })\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-date-picker': defineasynccomponent(() => import('@/components/yui/datepicker/datepicker.vue'))\r\n      // 'y-date-picker': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/datepicker/datepicker.vue'))\r\n    },\r\n    setup() {\r\n      const service = new datepickerservice()\r\n      return {\r\n        options1: service.options1,\r\n        options2: service.options2,\r\n        options3: service.options3,\r\n      };\r\n    }\r\n  });</script>\n\n# 多选\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <view class=\"box\">\r\n      <y-date-picker\r\n        :options=\"options\"\r\n        v-model=\"datelist\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import \"./datepicker.scss\";import { definecomponent, defineasynccomponent,ref,ref } from \"vue\";import { calendarbasic } from \"@/components/yui/calendar/calendarbasic/types/calendarbasic\";\r\n\r\nclass datepickerservice {\r\n\r\n  /**\r\n   * 参数\r\n   */\r\n  options: calendarbasic.calendaroptions = {\r\n    ismultiselect: true,\r\n    showtoolbar: true,\r\n    shortcuts: [{\r\n      text: '最近一周',\r\n      value: (() => {\r\n        const end = new date();\r\n        const start = new date();\r\n        start.settime(start.gettime() - 3600 * 1000 * 24 * 7)\r\n        return [start, end]\r\n      })\r\n    },{\r\n      text: '最近一个月',\r\n      value: (() => {\r\n        const end = new date();\r\n        const start = new date();\r\n        start.settime(start.gettime() - 3600 * 1000 * 24 * 30)\r\n        return [start, end]\r\n      })\r\n    },{\r\n      text: '最近三个月',\r\n      value: (() => {\r\n        const end = new date();\r\n        const start = new date();\r\n        start.settime(start.gettime() - 3600 * 1000 * 24 * 90)\r\n        return [start, end]\r\n      })\r\n    }]\r\n  };\r\n\r\n  /**\r\n   * 值\r\n   */\r\n   datelist:ref<string[]> = ref(['2021-01-25','2021-01-26'])\r\n\r\n}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-date-picker': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/datepicker/datepicker.vue'))\r\n    \"y-date-picker\": defineasynccomponent(\r\n      () => import(\"@/components/yui/datepicker/datepicker.vue\")\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new datepickerservice();\r\n    return {\r\n      options: service.options,\r\n      datelist: service.datelist,\r\n    };\r\n  },});</script>\n\n# 年度-单选\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <view class=\"box box-1\">\r\n      <y-date-picker  v-model=\"date\" :options=\"options\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">\r\n  import './datepicker.scss'\r\n  import { definecomponent, defineasynccomponent, ref, ref} from 'vue'\r\n  import { calendarbasic, calendartypeenum } from \"@/components/yui/calendar/calendarbasic/types/calendarbasic.d\";\r\n\r\n\r\n  class datepickerservice{\r\n\r\n    /**\r\n     * 值\r\n     * */\r\n    date: ref<string> = ref('')\r\n\r\n    /**\r\n     * date-picker组件参数\r\n     * */\r\n    options = ref({\r\n      placeholder: '请选择单个年',\r\n      type: calendartypeenum.year\r\n    })\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-date-picker': defineasynccomponent(() => import('@/components/yui/datepicker/datepicker.vue'))\r\n      // 'y-date-picker': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/datepicker/datepicker.vue'))\r\n    },\r\n    setup() {\r\n      const service = new datepickerservice()\r\n      return {\r\n        date: service.date,\r\n        options: service.options,\r\n      };\r\n    }\r\n  });</script>\n\n# 年度-范围\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <view class=\"box box-1\">\r\n      <y-date-picker v-model=\"date\" :options=\"options\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import './datepicker.scss'import { ref, definecomponent, defineasynccomponent, ref } from 'vue'import { calendarbasic, calendartypeenum } from \"@/components/yui/calendar/calendarbasic/types/calendarbasic.d\";\r\n\r\n\r\nclass datepickerservice{\r\n\r\n  /**\r\n   * 值\r\n   * */\r\n  date: ref<string[]> = ref([])\r\n\r\n  /**\r\n   * date-picker组件参数\r\n   * */\r\n  options = ref({\r\n    placeholder: '请选择年范围',\r\n    type: calendartypeenum.year,\r\n    ismultiselect: true,\r\n  })}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-date-picker': defineasynccomponent(() => import('@/components/yui/datepicker/datepicker.vue'))\r\n    // 'y-date-picker': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/datepicker/datepicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new datepickerservice()\r\n    return {\r\n      date: service.date,\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 年月-单选\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <view class=\"box box-1\">\r\n      <y-date-picker  v-model=\"date\" :options=\"options\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import './datepicker.scss'import { definecomponent, defineasynccomponent, ref, ref} from 'vue'import { calendarbasic, calendartypeenum } from \"@/components/yui/calendar/calendarbasic/types/calendarbasic.d\";\r\n\r\n\r\nclass datepickerservice{\r\n\r\n  /**\r\n   * 值\r\n   * */\r\n  date: ref<string> = ref('')\r\n\r\n  /**\r\n   * date-picker组件参数\r\n   * */\r\n  options = ref({\r\n    placeholder: '请选择单个年月',\r\n    type: calendartypeenum.month\r\n  })}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-date-picker': defineasynccomponent(() => import('@/components/yui/datepicker/datepicker.vue'))\r\n    // 'y-date-picker': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/datepicker/datepicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new datepickerservice()\r\n    return {\r\n      date: service.date,\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 年月-范围\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <view class=\"box box-1\">\r\n      <y-date-picker  v-model=\"date\" :options=\"options\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import './datepicker.scss'import { definecomponent, defineasynccomponent, ref, ref} from 'vue'import { calendarbasic, calendartypeenum } from \"@/components/yui/calendar/calendarbasic/types/calendarbasic.d\";\r\n\r\n\r\nclass datepickerservice{\r\n\r\n  /**\r\n   * 值\r\n   * */\r\n  date: ref<string[]> = ref([])\r\n\r\n  /**\r\n   * date-picker组件参数\r\n   * */\r\n  options = ref({\r\n    placeholder: '请选择年月范围',\r\n    type: calendartypeenum.month,\r\n    ismultiselect: true,\r\n  })}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-date-picker': defineasynccomponent(() => import('@/components/yui/datepicker/datepicker.vue'))\r\n    // 'y-date-picker': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/datepicker/datepicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new datepickerservice()\r\n    return {\r\n      date: service.date,\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 季度-单选\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <view class=\"box box-1\">\r\n      <y-date-picker  v-model=\"date\" :options=\"options\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import './datepicker.scss'import { definecomponent, defineasynccomponent, ref, ref} from 'vue'import { calendarbasic, calendartypeenum } from \"@/components/yui/calendar/calendarbasic/types/calendarbasic.d\";\r\n\r\n\r\nclass datepickerservice{\r\n\r\n  /**\r\n   * 值\r\n   * */\r\n  date: ref<string> = ref('')\r\n\r\n  /**\r\n   * date-picker组件参数\r\n   * */\r\n  options = ref({\r\n    placeholder: '请选择季度',\r\n    type: calendartypeenum.quarter,\r\n  })}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-date-picker': defineasynccomponent(() => import('@/components/yui/datepicker/datepicker.vue'))\r\n    // 'y-date-picker': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/datepicker/datepicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new datepickerservice()\r\n    return {\r\n      date: service.date,\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 季度-范围\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <view class=\"box box-1\">\r\n      <y-date-picker  v-model=\"date\" :options=\"options\"></y-date-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import './datepicker.scss'import { definecomponent, defineasynccomponent, ref, ref} from 'vue'import { calendarbasic, calendartypeenum } from \"@/components/yui/calendar/calendarbasic/types/calendarbasic.d\";\r\n\r\n\r\nclass datepickerservice{\r\n\r\n  /**\r\n   * 值\r\n   * */\r\n  date: ref<string[]> = ref([])\r\n\r\n  /**\r\n   * date-picker组件参数\r\n   * */\r\n  options = ref({\r\n    placeholder: '请选择季度范围',\r\n    type: calendartypeenum.quarter,\r\n    ismultiselect: true,\r\n  })}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-date-picker': defineasynccomponent(() => import('@/components/yui/datepicker/datepicker.vue'))\r\n    // 'y-date-picker': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/datepicker/datepicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new datepickerservice()\r\n    return {\r\n      date: service.date,\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface props extends record<string, unknown> {\n  /***\n   * 模式：可编辑edit/可查看view, 默认edit\n   */\n  pattern?: string\n\n  /**\n   * 参数\n   */\n  options:ydatepickeroptions\n\n  /**\n   * 值，必填\n   */\n  modelvalue: string|string[]\n}\n\n/**\n * datepicker参数\n */\nexport interface ydatepickeroptions {\n  /**\n   * 日期类型, 默认'date'\n   */\n  type?: calendartypeenum\n\n  /**\n   *  提示信息，非必填\n   */\n  placeholder?: string\n\n  /**\n   * 是否多选，默认：false\n   */\n  ismultiselect?: boolean\n\n  /**\n   * 日期格式化点位符，默认：yyyy-mm-dd\n   */\n  format?:string\n\n  /**\n   * 是否可清除, 必填项， 默认true\n   */\n  canclear?: boolean\n\n  /**\n   * 外部定点id\n   */\n  maskouterelid?: string\n\n  /**\n   * 结束日期\n   */\n  enddate?: string\n\n  /**\n   * 最小值\n   */\n  mindate?: string\n\n  /**\n   * 最大值\n   */\n  maxdate?: string\n\n  /**\n   * 日历快捷键配置\n   */\n  shortcuts?: calendarbasic.shortcutsitem[]\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "日期时间选择器 y-date-time-picker",
      "frontmatter": {},
      "regularPath": "/component/basic/dateTimePicker.html",
      "relativePath": "component/basic/dateTimePicker.md",
      "key": "v-7ada74b8",
      "path": "/component/basic/dateTimePicker.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 41
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 68
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 1237
        }
      ],
      "headersStr": "组件名称 基础用法 属性",
      "content": "# 日期时间选择器 y-date-time-picker\n选择日期和时分秒\n\n# 组件名称\ny-date-time-picker\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"date-time-picker-container\">\r\n    <view class=\"date-time-picker-box\">\r\n      <y-date-time-picker v-model=\"dateTimeStr\" :options=\"options\"></y-date-time-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent, Ref, ref } from 'vue'import './dateTimePicker.scss'\r\n\r\nclass DateTimePicker {\r\n\r\n  /***\r\n   * 值：年-月-日  时：分：秒\r\n   */\r\n dateTimeStr: Ref<string> = ref('2021-03-18 01:01')\r\n\r\n  /***\r\n   * 组件内信息\r\n   */\r\n  options = ref({\r\n    placeholder: '请选择日期',\r\n    isMultiSelect: false,\r\n    minDate: '2021-03-04',\r\n    maxDate: '2021-03-20',\r\n  })\r\n\r\n  constructor() {\r\n\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-date-time-picker': defineAsyncComponent(() => import('@/components/yui/dateTimePicker/dateTimePicker.vue'))\r\n    // 'y-date-time-picker': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/dateTimePicker/dateTimePicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new DateTimePicker()\r\n    return {\r\n      dateTimeStr: service.dateTimeStr,\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 属性\n  /**\n   * 属性\n   */\n  export interface YDateTimePickerProps extends Record<string, unknown> {\n    /***\n     * 模式：可编辑edit/可查看view, 默认edit\n     */\n    pattern?: string\n    /**\n     * 参数\n     */\n    options: timePickerOptions\n\n    /**\n     * 值，必填\n     */\n    modelValue: string\n  }\n\n/**\n * dateTimePicker参数\n */\nexport interface timePickerOptions {\n\n  /**\n   *  提示信息，非必填\n   */\n  placeholder?: string\n\n  /**\n   * 是否多选，默认：false\n   */\n  isMultiSelect: boolean\n\n  /**\n   * 日期格式化点位符，默认：YYYY-MM-DD\n   */\n  format:string\n\n  /**\n   * 是否可清除, 必填项不可清除， 默认true\n   */\n  canClear?: boolean\n\n  /**\n   * 最小值\n   */\n  minDate?: string\n\n  /**\n   * 最大值\n   */\n  maxDate?: string\n}",
      "normalizedContent": "# 日期时间选择器 y-date-time-picker\n选择日期和时分秒\n\n# 组件名称\ny-date-time-picker\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"date-time-picker-container\">\r\n    <view class=\"date-time-picker-box\">\r\n      <y-date-time-picker v-model=\"datetimestr\" :options=\"options\"></y-date-time-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent, ref, ref } from 'vue'import './datetimepicker.scss'\r\n\r\nclass datetimepicker {\r\n\r\n  /***\r\n   * 值：年-月-日  时：分：秒\r\n   */\r\n datetimestr: ref<string> = ref('2021-03-18 01:01')\r\n\r\n  /***\r\n   * 组件内信息\r\n   */\r\n  options = ref({\r\n    placeholder: '请选择日期',\r\n    ismultiselect: false,\r\n    mindate: '2021-03-04',\r\n    maxdate: '2021-03-20',\r\n  })\r\n\r\n  constructor() {\r\n\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-date-time-picker': defineasynccomponent(() => import('@/components/yui/datetimepicker/datetimepicker.vue'))\r\n    // 'y-date-time-picker': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/datetimepicker/datetimepicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new datetimepicker()\r\n    return {\r\n      datetimestr: service.datetimestr,\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 属性\n  /**\n   * 属性\n   */\n  export interface ydatetimepickerprops extends record<string, unknown> {\n    /***\n     * 模式：可编辑edit/可查看view, 默认edit\n     */\n    pattern?: string\n    /**\n     * 参数\n     */\n    options: timepickeroptions\n\n    /**\n     * 值，必填\n     */\n    modelvalue: string\n  }\n\n/**\n * datetimepicker参数\n */\nexport interface timepickeroptions {\n\n  /**\n   *  提示信息，非必填\n   */\n  placeholder?: string\n\n  /**\n   * 是否多选，默认：false\n   */\n  ismultiselect: boolean\n\n  /**\n   * 日期格式化点位符，默认：yyyy-mm-dd\n   */\n  format:string\n\n  /**\n   * 是否可清除, 必填项不可清除， 默认true\n   */\n  canclear?: boolean\n\n  /**\n   * 最小值\n   */\n  mindate?: string\n\n  /**\n   * 最大值\n   */\n  maxdate?: string\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "编辑器 y-editor",
      "frontmatter": {},
      "regularPath": "/component/basic/editor.html",
      "relativePath": "component/basic/editor.md",
      "key": "v-3d90bc20",
      "path": "/component/basic/editor.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 22
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 39
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 2307
        }
      ],
      "headersStr": "组件名称 基础用法 属性",
      "content": "# 编辑器 y-editor\n标签页\n\n# 组件名称\ny-editor\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-editor v-model=\"editorHtml\" :options=\"options\"></y-editor>\r\n\r\n    <view>\r\n      <view>内容:</view>\r\n      <rich-text :nodes=\"editorHtml\"></rich-text>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import { ref, defineComponent, defineAsyncComponent } from 'vue'import './editor.scss'import { YEditor, YEditorImgElType } from '@/components/yui/editor/types/editor.d'\r\n\r\n\r\nclass Editor {\r\n\r\n\r\n  /**\r\n   * 编辑器内容渲染\r\n   * */\r\n  editorHtml = ref('')\r\n\r\n  /**\r\n   * 组件配置\r\n   */\r\n  options: YEditor.EditorOptions = {\r\n    placeholder: '介绍一下你的详情吧，支持文字和图片...',\r\n    /**\r\n     * 编辑器功能配置\r\n     * */\r\n    toolList: [\r\n      YEditorImgElType.FONT_SIZE,\r\n      YEditorImgElType.COLOR,\r\n      YEditorImgElType.BOLD,\r\n      YEditorImgElType.ITALIC,\r\n      YEditorImgElType.DIRECTION,\r\n      YEditorImgElType.BACKGROUND_COLOR,\r\n      YEditorImgElType.ALIGN_LEFT,\r\n      YEditorImgElType.ALIGN_RIGHT,\r\n      YEditorImgElType.ALIGN_CENTER,\r\n      YEditorImgElType.ALIGN_JUSTIFY,\r\n      YEditorImgElType.HEADER_1,\r\n      YEditorImgElType.HEADER_2,\r\n      YEditorImgElType.HEADER_3,\r\n      YEditorImgElType.HEADER_4,\r\n      YEditorImgElType.INDENT,\r\n      YEditorImgElType.OUTDENT,\r\n      YEditorImgElType.LETTER_SPACING,\r\n      YEditorImgElType.LINE_HEIGHT,\r\n      YEditorImgElType.SCRIPT_SUB,\r\n      YEditorImgElType.SCRIPT_SUPER,\r\n      YEditorImgElType.STRIKE,\r\n      YEditorImgElType.UNDER_LINE,\r\n      YEditorImgElType.LIST_ORDERED,\r\n      YEditorImgElType.LIST_BULLET,\r\n      YEditorImgElType.LIST_CHECK,\r\n      YEditorImgElType.MARGIN_BOTTOM,\r\n      YEditorImgElType.MARGIN_TOP,\r\n      YEditorImgElType.DATE,\r\n      YEditorImgElType.INSERT_DIVIDER,\r\n      YEditorImgElType.INSERT_IMAGE,\r\n      YEditorImgElType.RE_DO,\r\n      YEditorImgElType.UN_DO,\r\n      YEditorImgElType.REMOVE_FORMAT,\r\n      YEditorImgElType.CLEAR,\r\n    ],\r\n\r\n    /**\r\n     * 是否仅读\r\n     * */\r\n    readOnly: false\r\n  }}\r\n\r\n\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-editor': defineAsyncComponent(() => import('@/components/yui/editor/editor.vue'))\r\n  },\r\n  setup() {\r\n    const service = new Editor()\r\n    return {\r\n      options: service.options,\r\n      editorHtml: service.editorHtml,\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 图标名称\n */\nexport enum YEditorImgElType {\n\n  /**\n   * 字体 - 大小\n   */\n  FONT_SIZE = 'fontSize',\n\n  /**\n   * 字体 - 加粗\n   */\n  BOLD = 'bold',\n\n  /**\n   * 字体 - 斜体\n   */\n  ITALIC = 'italic',\n\n  /**\n   * 字体 - 颜色\n   */\n  COLOR = 'color',\n\n  /**\n   * 字体 - 靠右\n   */\n  DIRECTION = 'direction',\n\n  /**\n   * 字体背景色\n   */\n  BACKGROUND_COLOR = 'backgroundColor',\n\n  /**\n   * 文字对齐 - 左对齐\n   */\n  ALIGN_LEFT = 'align-left',\n\n  /**\n   * 文字对齐 - 右对齐\n   */\n  ALIGN_RIGHT = 'align-right',\n\n  /**\n   * 文字对齐 - 居中对齐\n   */\n  ALIGN_CENTER = 'align-center',\n\n  /**\n   * 文字对齐 - 左右对齐\n   */\n  ALIGN_JUSTIFY = 'align-justify',\n\n  /**\n   * 字体 - h1\n   */\n  HEADER_1 = 'header-1',\n\n  /**\n   * 字体 - h2\n   */\n  HEADER_2 = 'header-2',\n\n  /**\n   * 字体 - h3\n   */\n  HEADER_3 = 'header-3',\n\n  /**\n   * 字体 - h4\n   */\n  HEADER_4 = 'header-4',\n\n  /**\n   * 缩进 - 右\n   */\n  INDENT = 'indent',\n\n  /**\n   * 缩进 - 左\n   */\n  OUTDENT = 'outdent',\n\n  /**\n   * 字体 - 间距\n   */\n  LETTER_SPACING = 'letterSpacing',\n\n  /**\n   * 字体 - 行距\n   */\n  LINE_HEIGHT = 'lineHeight',\n\n  /**\n   * 字体 - 下标\n   */\n  SCRIPT_SUB = 'script-sub',\n\n  /**\n   * 字体 - 上标\n   */\n  SCRIPT_SUPER = 'script-super',\n\n  /**\n   * 字体 - 删除线\n   */\n  STRIKE = 'strike',\n\n  /**\n   * 字体 - 下划线\n   */\n  UNDER_LINE = 'underline',\n\n  /**\n   * 列表 - 有序\n   */\n  LIST_ORDERED = 'list-ordered',\n\n  /**\n   * 列表 - 无序\n   */\n  LIST_BULLET = 'list-bullet',\n\n  /**\n   * 列表\n   */\n  LIST_CHECK = 'list-check',\n\n  /**\n   * 间距 - 下\n   */\n  MARGIN_BOTTOM = 'marginBottom',\n\n  /**\n   * 间距 - 上\n   */\n  MARGIN_TOP = 'marginTop',\n\n  /**\n   * 日期\n   */\n  DATE = 'date',\n\n  /**\n   * 分割线\n   */\n  INSERT_DIVIDER = 'insertDivider',\n\n  /**\n   * 图片\n   */\n  INSERT_IMAGE = 'insertImage',\n\n  /**\n   * 前进\n   */\n  RE_DO = 'redo',\n\n  /**\n   * 后退\n   */\n  UN_DO = 'undo',\n\n  /**\n   * 清除样式\n   */\n  REMOVE_FORMAT = 'removeFormat',\n\n  /**\n   * 清除内容\n   */\n  CLEAR = 'clear',\n\n  /**\n   * 全屏\n   */\n  FULL_SCREEN = 'fullScreen',\n}\n\n/**\n * 属性\n */\nexport interface YEditorProps extends Record<string, unknown> {\n  /**\n   * 值\n   */\n  modelValue: string\n\n  /**\n   * 组件信息\n   */\n  options: EditorOptions\n}\n\nexport interface EditorOptions extends Record<string, unknown> {\n  /**\n   * placeholder\n   */\n  placeholder: string\n\n  /**\n   * 编辑器功能配置\n   * */\n  toolList: string[]\n\n  /**\n   * 是否仅读， 默认false\n   */\n  readOnly: boolean\n}",
      "normalizedContent": "# 编辑器 y-editor\n标签页\n\n# 组件名称\ny-editor\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-editor v-model=\"editorhtml\" :options=\"options\"></y-editor>\r\n\r\n    <view>\r\n      <view>内容:</view>\r\n      <rich-text :nodes=\"editorhtml\"></rich-text>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import { ref, definecomponent, defineasynccomponent } from 'vue'import './editor.scss'import { yeditor, yeditorimgeltype } from '@/components/yui/editor/types/editor.d'\r\n\r\n\r\nclass editor {\r\n\r\n\r\n  /**\r\n   * 编辑器内容渲染\r\n   * */\r\n  editorhtml = ref('')\r\n\r\n  /**\r\n   * 组件配置\r\n   */\r\n  options: yeditor.editoroptions = {\r\n    placeholder: '介绍一下你的详情吧，支持文字和图片...',\r\n    /**\r\n     * 编辑器功能配置\r\n     * */\r\n    toollist: [\r\n      yeditorimgeltype.font_size,\r\n      yeditorimgeltype.color,\r\n      yeditorimgeltype.bold,\r\n      yeditorimgeltype.italic,\r\n      yeditorimgeltype.direction,\r\n      yeditorimgeltype.background_color,\r\n      yeditorimgeltype.align_left,\r\n      yeditorimgeltype.align_right,\r\n      yeditorimgeltype.align_center,\r\n      yeditorimgeltype.align_justify,\r\n      yeditorimgeltype.header_1,\r\n      yeditorimgeltype.header_2,\r\n      yeditorimgeltype.header_3,\r\n      yeditorimgeltype.header_4,\r\n      yeditorimgeltype.indent,\r\n      yeditorimgeltype.outdent,\r\n      yeditorimgeltype.letter_spacing,\r\n      yeditorimgeltype.line_height,\r\n      yeditorimgeltype.script_sub,\r\n      yeditorimgeltype.script_super,\r\n      yeditorimgeltype.strike,\r\n      yeditorimgeltype.under_line,\r\n      yeditorimgeltype.list_ordered,\r\n      yeditorimgeltype.list_bullet,\r\n      yeditorimgeltype.list_check,\r\n      yeditorimgeltype.margin_bottom,\r\n      yeditorimgeltype.margin_top,\r\n      yeditorimgeltype.date,\r\n      yeditorimgeltype.insert_divider,\r\n      yeditorimgeltype.insert_image,\r\n      yeditorimgeltype.re_do,\r\n      yeditorimgeltype.un_do,\r\n      yeditorimgeltype.remove_format,\r\n      yeditorimgeltype.clear,\r\n    ],\r\n\r\n    /**\r\n     * 是否仅读\r\n     * */\r\n    readonly: false\r\n  }}\r\n\r\n\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-editor': defineasynccomponent(() => import('@/components/yui/editor/editor.vue'))\r\n  },\r\n  setup() {\r\n    const service = new editor()\r\n    return {\r\n      options: service.options,\r\n      editorhtml: service.editorhtml,\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 图标名称\n */\nexport enum yeditorimgeltype {\n\n  /**\n   * 字体 - 大小\n   */\n  font_size = 'fontsize',\n\n  /**\n   * 字体 - 加粗\n   */\n  bold = 'bold',\n\n  /**\n   * 字体 - 斜体\n   */\n  italic = 'italic',\n\n  /**\n   * 字体 - 颜色\n   */\n  color = 'color',\n\n  /**\n   * 字体 - 靠右\n   */\n  direction = 'direction',\n\n  /**\n   * 字体背景色\n   */\n  background_color = 'backgroundcolor',\n\n  /**\n   * 文字对齐 - 左对齐\n   */\n  align_left = 'align-left',\n\n  /**\n   * 文字对齐 - 右对齐\n   */\n  align_right = 'align-right',\n\n  /**\n   * 文字对齐 - 居中对齐\n   */\n  align_center = 'align-center',\n\n  /**\n   * 文字对齐 - 左右对齐\n   */\n  align_justify = 'align-justify',\n\n  /**\n   * 字体 - h1\n   */\n  header_1 = 'header-1',\n\n  /**\n   * 字体 - h2\n   */\n  header_2 = 'header-2',\n\n  /**\n   * 字体 - h3\n   */\n  header_3 = 'header-3',\n\n  /**\n   * 字体 - h4\n   */\n  header_4 = 'header-4',\n\n  /**\n   * 缩进 - 右\n   */\n  indent = 'indent',\n\n  /**\n   * 缩进 - 左\n   */\n  outdent = 'outdent',\n\n  /**\n   * 字体 - 间距\n   */\n  letter_spacing = 'letterspacing',\n\n  /**\n   * 字体 - 行距\n   */\n  line_height = 'lineheight',\n\n  /**\n   * 字体 - 下标\n   */\n  script_sub = 'script-sub',\n\n  /**\n   * 字体 - 上标\n   */\n  script_super = 'script-super',\n\n  /**\n   * 字体 - 删除线\n   */\n  strike = 'strike',\n\n  /**\n   * 字体 - 下划线\n   */\n  under_line = 'underline',\n\n  /**\n   * 列表 - 有序\n   */\n  list_ordered = 'list-ordered',\n\n  /**\n   * 列表 - 无序\n   */\n  list_bullet = 'list-bullet',\n\n  /**\n   * 列表\n   */\n  list_check = 'list-check',\n\n  /**\n   * 间距 - 下\n   */\n  margin_bottom = 'marginbottom',\n\n  /**\n   * 间距 - 上\n   */\n  margin_top = 'margintop',\n\n  /**\n   * 日期\n   */\n  date = 'date',\n\n  /**\n   * 分割线\n   */\n  insert_divider = 'insertdivider',\n\n  /**\n   * 图片\n   */\n  insert_image = 'insertimage',\n\n  /**\n   * 前进\n   */\n  re_do = 'redo',\n\n  /**\n   * 后退\n   */\n  un_do = 'undo',\n\n  /**\n   * 清除样式\n   */\n  remove_format = 'removeformat',\n\n  /**\n   * 清除内容\n   */\n  clear = 'clear',\n\n  /**\n   * 全屏\n   */\n  full_screen = 'fullscreen',\n}\n\n/**\n * 属性\n */\nexport interface yeditorprops extends record<string, unknown> {\n  /**\n   * 值\n   */\n  modelvalue: string\n\n  /**\n   * 组件信息\n   */\n  options: editoroptions\n}\n\nexport interface editoroptions extends record<string, unknown> {\n  /**\n   * placeholder\n   */\n  placeholder: string\n\n  /**\n   * 编辑器功能配置\n   * */\n  toollist: string[]\n\n  /**\n   * 是否仅读， 默认false\n   */\n  readonly: boolean\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "无状态 y-empty",
      "frontmatter": {},
      "regularPath": "/component/basic/empty.html",
      "relativePath": "component/basic/empty.md",
      "key": "v-62b15778",
      "path": "/component/basic/empty.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 21
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 37
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 504
        }
      ],
      "headersStr": "组件名称 基础用法 属性",
      "content": "# 无状态 y-empty\n无状态\n\n# 组件名称\ny-empty\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-empty tip=\"自定义文字\">\r\n      <view class=\"box\">这是插槽</view>\r\n    </y-empty>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent } from 'vue'import './empty.scss'export default defineComponent({\r\n  components: {\r\n    'y-empty': defineAsyncComponent(() => import('@/components/yui/empty/empty.vue'))\r\n  },\r\n  setup() {\r\n    return {\r\n\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface YEmptyProps extends Record<string, unknown> {\n\n    /**\n     * 文字\n     */\n    tip: string\n}",
      "normalizedContent": "# 无状态 y-empty\n无状态\n\n# 组件名称\ny-empty\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-empty tip=\"自定义文字\">\r\n      <view class=\"box\">这是插槽</view>\r\n    </y-empty>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent } from 'vue'import './empty.scss'export default definecomponent({\r\n  components: {\r\n    'y-empty': defineasynccomponent(() => import('@/components/yui/empty/empty.vue'))\r\n  },\r\n  setup() {\r\n    return {\r\n\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface yemptyprops extends record<string, unknown> {\n\n    /**\n     * 文字\n     */\n    tip: string\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "底部固定按钮 y-fixed-button",
      "frontmatter": {},
      "regularPath": "/component/basic/fixedButton.html",
      "relativePath": "component/basic/fixedButton.md",
      "key": "v-84797a38",
      "path": "/component/basic/fixedButton.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 46
        },
        {
          "level": 3,
          "title": "水平",
          "slug": "水平",
          "normalizedTitle": "水平",
          "charIndex": 69
        },
        {
          "level": 3,
          "title": "水平定制",
          "slug": "水平定制",
          "normalizedTitle": "水平定制",
          "charIndex": 1465
        },
        {
          "level": 3,
          "title": "垂直",
          "slug": "垂直",
          "normalizedTitle": "垂直",
          "charIndex": 2824
        },
        {
          "level": 3,
          "title": "垂直定制",
          "slug": "垂直定制",
          "normalizedTitle": "垂直定制",
          "charIndex": 4062
        },
        {
          "level": 3,
          "title": "自定义图片",
          "slug": "自定义图片",
          "normalizedTitle": "自定义图片",
          "charIndex": 5449
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 6996
        },
        {
          "level": 3,
          "title": "事件",
          "slug": "事件",
          "normalizedTitle": "事件",
          "charIndex": 627
        }
      ],
      "headersStr": "组件名称 水平 水平定制 垂直 垂直定制 自定义图片 属性 事件",
      "content": "# 底部固定按钮 y-fixed-button\n底部固定按钮,支持插槽，支持定制按钮\n\n# 组件名称\ny-fixed-button\n\n# 水平\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-page-container>\r\n      <template #bottom>\r\n        <y-fixed-button :btnLabelList=\"btnLabelList\" @click=\"onClick\">\r\n      </y-fixed-button>\r\n      </template>\r\n    </y-page-container>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent } from \"vue\";import \"./fixedButton.scss\";import { FixedButton } from \"../../../../../taro-yui-vue/src/components/fixedButton/types/fixedButton.d\";\r\n\r\n/**\r\n * 底部固定button\r\n */class FixedButtonService {\r\n  /**\r\n   * 点击事件\r\n   */\r\n  onClick(result: FixedButton.ClickCallbackResult) {\r\n    alert(`${result.index === 0 ? \"取消\" : \"确定\"}事件`);\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-fixed-button': defineAsyncComponent(() => import('@/components/yui/fixedButton/fixedButton.vue'))\r\n    \"y-fixed-button\": defineAsyncComponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/fixedButton/fixedButton.vue\"\r\n        )\r\n    ),\r\n    \"y-page-container\": defineAsyncComponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/pageContainer/pageContainer.vue\"\r\n        )\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new FixedButtonService();\r\n    return {\r\n      btnLabelList: [\"取消\", \"确定\"],\r\n      onClick: service.onClick.bind(service),\r\n    };\r\n  },});</script>\n\n# 水平定制\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-fixed-button\r\n      :btnLabelList=\"btnLabelList\"\r\n      :btnTypeList=\"btnTypeList\"\r\n      @click=\"onClick\"\r\n    >\r\n    </y-fixed-button>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent } from \"vue\";import \"./fixedButton.scss\";import {FixedButton,DirectionType,BtnType} from '@/components/yui/fixedButton/types/fixedButton.d'// import {FixedButton,DirectionType,BtnType} from '../../../../../taro-yui-vue/src/components/fixedButton/types/fixedButton.d'\r\n\r\n\r\n/**\r\n * 底部固定button\r\n */class FixedButtonService {\r\n\r\n  /**\r\n   * 按钮类型\r\n   * */\r\n  // btnTypeList = [BtnType.CANCEL]\r\n  btnTypeList= []\r\n\r\n  /**\r\n   * 点击事件\r\n  */\r\n  onClick(result:FixedButton.ClickCallbackResult){\r\n    alert(`${result.index===0?'确定':'取消'}事件`)\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-fixed-button': defineAsyncComponent(() => import('@/components/yui/fixedButton/fixedButton.vue'))\r\n    'y-fixed-button': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/fixedButton/fixedButton.vue'))\r\n  },\r\n  setup() {\r\n    const service = new FixedButtonService()\r\n    return {\r\n      btnLabelList: [\"取消\", '确定'],\r\n      btnTypeList: service.btnTypeList,\r\n      onClick:service.onClick.bind(service)\r\n    };\r\n  },});</script>\n\n# 垂直\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-fixed-button\r\n      :btnLabelList=\"btnLabelList\"\r\n      :direction=\"DirectionType.VERTICAL\"\r\n      @click=\"onClick\"\r\n    ></y-fixed-button>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent } from \"vue\";import \"./fixedButton.scss\";import {FixedButton,DirectionType} from '@/components/yui/fixedButton/types/fixedButton.d'// import {FixedButton,DirectionType} from '../../../../../taro-yui-vue/src/components/fixedButton/types/fixedButton.d'\r\n\r\n/**\r\n * 底部固定button\r\n */class FixedButtonService {\r\n\r\n  /**\r\n   * 点击事件\r\n  */\r\n  onClick(result:FixedButton.ClickCallbackResult){\r\n    alert(`${result.index===0?'保存':'删除'}事件`)\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-fixed-button': defineAsyncComponent(() => import('@/components/yui/fixedButton/fixedButton.vue'))\r\n    'y-fixed-button': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/fixedButton/fixedButton.vue'))\r\n  },\r\n  setup() {\r\n    const service = new FixedButtonService()\r\n    return {\r\n      DirectionType,\r\n      btnLabelList: [\"确定\", \"删除\"],\r\n      onClick:service.onClick.bind(service)\r\n    };\r\n  },});</script>\n\n# 垂直定制\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-fixed-button\r\n      :btnLabelList=\"btnLabelList\"\r\n      :btnTypeList=\"btnTypeList\"\r\n      :direction=\"DirectionType.VERTICAL\"\r\n      @click=\"onClick\"\r\n    ></y-fixed-button>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent } from \"vue\";import \"./fixedButton.scss\";import {FixedButton,DirectionType, BtnType} from '@/components/yui/fixedButton/types/fixedButton.d'// import {FixedButton,DirectionType,BtnType} from '../../../../../taro-yui-vue/src/components/fixedButton/types/fixedButton.d'\r\n\r\n/**\r\n * 底部固定button\r\n */class FixedButtonService {\r\n  /**\r\n   * 按钮类型\r\n   * */\r\n  btnTypeList = [BtnType.DELETE]\r\n\r\n  /**\r\n   * 点击事件\r\n  */\r\n  onClick(result:FixedButton.ClickCallbackResult){\r\n    alert(`${result.index===0?'保存':'删除'}事件`)\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-fixed-button': defineAsyncComponent(() => import('@/components/yui/fixedButton/fixedButton.vue'))\r\n    'y-fixed-button': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/fixedButton/fixedButton.vue'))\r\n  },\r\n  setup() {\r\n    const service = new FixedButtonService()\r\n    return {\r\n      DirectionType,\r\n      btnTypeList: service.btnTypeList,\r\n      btnLabelList: [\"删除\"],\r\n      onClick:service.onClick.bind(service)\r\n    };\r\n  },});</script>\n\n# 自定义图片\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-fixed-button\r\n      :btnLabelList=\"btnLabelList\"\r\n      @click=\"onClick\"\r\n    >\r\n      <template v-slot=\"slotProps\">\r\n        <image v-if=\"slotProps.info.idx === 0\" class=\"img-button\" :src=\"IconCustomActionBuy\"></image>\r\n        <image v-if=\"slotProps.info.idx === 1\" class=\"img-button\" :src=\"IconCancel\"></image>\r\n      </template>\r\n\r\n    </y-fixed-button>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent } from \"vue\";import \"./fixedButton.scss\";import IconCustomActionBuy from '@/assets/img/custom_action_buy.svg'import IconCancel from '@/assets/img/icon_cancel.svg'// import {FixedButton} from '@/components/fixedButton/types/fixedButton.d'import {FixedButton} from '@/components/yui/fixedButton/types/fixedButton.d'\r\n\r\n/**\r\n * 底部固定button\r\n */class FixedButtonService {\r\n\r\n  /**\r\n   * 点击事件\r\n  */\r\n  onClick(result:FixedButton.ClickCallbackResult){\r\n    alert(`${result.index===0?'确定':'取消'}事件`)\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-fixed-button': defineAsyncComponent(() => import('@/components/yui/fixedButton/fixedButton.vue'))\r\n    'y-fixed-button': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/fixedButton/fixedButton.vue'))\r\n  },\r\n  setup() {\r\n    const service = new FixedButtonService()\r\n    return {\r\n      IconCustomActionBuy,\r\n      IconCancel,\r\n      btnLabelList: [\"确定\", \"取消\"],\r\n      onClick:service.onClick.bind(service)\r\n    };\r\n  },});</script>\n\n# 属性\n/**\n * 显示方向\n */\nexport enum DirectionType{\n\n    /**\n     * 垂直\n     */\n    VERTICAL = \"vertical\",\n\n    /**\n     * 水平\n     */\n    HORIZONTAL = \"horizontal\"\n}\n\n/**\n * 按钮类型\n */\nexport enum BtnType{\n\n  /**\n   * 确定按钮\n   */\n  PRIMARY= \"primary\",\n\n  /**\n   * 取消\n   */\n  CANCEL = \"cancel\",\n\n  /**\n   * 删除\n   */\n  DELETE = 'delete'\n}\n\n/**\n * 属性\n */\ninterface Props{\n\n    /**\n     * 按钮显示文字列表\n     */\n    btnLabelList:string[]\n\n    /**\n     * 显示方向\t\n     */\n    direction:DirectionType\n\n    /**\n     * 按钮类型\n     */\n    btnTypeList?:string[]\n}\n\n\n\n# 事件\ninterface Events{\n\n    /**\n     * 点击事件\n     */\n    click:ClickCallbackResult\n}\n\n/**\n * 点击事件回调参数\n */\nexport interface ClickCallbackResult{\n\n    /**\n     * 按钮下标\n     */\n    index:number\n}",
      "normalizedContent": "# 底部固定按钮 y-fixed-button\n底部固定按钮,支持插槽，支持定制按钮\n\n# 组件名称\ny-fixed-button\n\n# 水平\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-page-container>\r\n      <template #bottom>\r\n        <y-fixed-button :btnlabellist=\"btnlabellist\" @click=\"onclick\">\r\n      </y-fixed-button>\r\n      </template>\r\n    </y-page-container>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent } from \"vue\";import \"./fixedbutton.scss\";import { fixedbutton } from \"../../../../../taro-yui-vue/src/components/fixedbutton/types/fixedbutton.d\";\r\n\r\n/**\r\n * 底部固定button\r\n */class fixedbuttonservice {\r\n  /**\r\n   * 点击事件\r\n   */\r\n  onclick(result: fixedbutton.clickcallbackresult) {\r\n    alert(`${result.index === 0 ? \"取消\" : \"确定\"}事件`);\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-fixed-button': defineasynccomponent(() => import('@/components/yui/fixedbutton/fixedbutton.vue'))\r\n    \"y-fixed-button\": defineasynccomponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/fixedbutton/fixedbutton.vue\"\r\n        )\r\n    ),\r\n    \"y-page-container\": defineasynccomponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/pagecontainer/pagecontainer.vue\"\r\n        )\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new fixedbuttonservice();\r\n    return {\r\n      btnlabellist: [\"取消\", \"确定\"],\r\n      onclick: service.onclick.bind(service),\r\n    };\r\n  },});</script>\n\n# 水平定制\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-fixed-button\r\n      :btnlabellist=\"btnlabellist\"\r\n      :btntypelist=\"btntypelist\"\r\n      @click=\"onclick\"\r\n    >\r\n    </y-fixed-button>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent } from \"vue\";import \"./fixedbutton.scss\";import {fixedbutton,directiontype,btntype} from '@/components/yui/fixedbutton/types/fixedbutton.d'// import {fixedbutton,directiontype,btntype} from '../../../../../taro-yui-vue/src/components/fixedbutton/types/fixedbutton.d'\r\n\r\n\r\n/**\r\n * 底部固定button\r\n */class fixedbuttonservice {\r\n\r\n  /**\r\n   * 按钮类型\r\n   * */\r\n  // btntypelist = [btntype.cancel]\r\n  btntypelist= []\r\n\r\n  /**\r\n   * 点击事件\r\n  */\r\n  onclick(result:fixedbutton.clickcallbackresult){\r\n    alert(`${result.index===0?'确定':'取消'}事件`)\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-fixed-button': defineasynccomponent(() => import('@/components/yui/fixedbutton/fixedbutton.vue'))\r\n    'y-fixed-button': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/fixedbutton/fixedbutton.vue'))\r\n  },\r\n  setup() {\r\n    const service = new fixedbuttonservice()\r\n    return {\r\n      btnlabellist: [\"取消\", '确定'],\r\n      btntypelist: service.btntypelist,\r\n      onclick:service.onclick.bind(service)\r\n    };\r\n  },});</script>\n\n# 垂直\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-fixed-button\r\n      :btnlabellist=\"btnlabellist\"\r\n      :direction=\"directiontype.vertical\"\r\n      @click=\"onclick\"\r\n    ></y-fixed-button>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent } from \"vue\";import \"./fixedbutton.scss\";import {fixedbutton,directiontype} from '@/components/yui/fixedbutton/types/fixedbutton.d'// import {fixedbutton,directiontype} from '../../../../../taro-yui-vue/src/components/fixedbutton/types/fixedbutton.d'\r\n\r\n/**\r\n * 底部固定button\r\n */class fixedbuttonservice {\r\n\r\n  /**\r\n   * 点击事件\r\n  */\r\n  onclick(result:fixedbutton.clickcallbackresult){\r\n    alert(`${result.index===0?'保存':'删除'}事件`)\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-fixed-button': defineasynccomponent(() => import('@/components/yui/fixedbutton/fixedbutton.vue'))\r\n    'y-fixed-button': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/fixedbutton/fixedbutton.vue'))\r\n  },\r\n  setup() {\r\n    const service = new fixedbuttonservice()\r\n    return {\r\n      directiontype,\r\n      btnlabellist: [\"确定\", \"删除\"],\r\n      onclick:service.onclick.bind(service)\r\n    };\r\n  },});</script>\n\n# 垂直定制\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-fixed-button\r\n      :btnlabellist=\"btnlabellist\"\r\n      :btntypelist=\"btntypelist\"\r\n      :direction=\"directiontype.vertical\"\r\n      @click=\"onclick\"\r\n    ></y-fixed-button>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent } from \"vue\";import \"./fixedbutton.scss\";import {fixedbutton,directiontype, btntype} from '@/components/yui/fixedbutton/types/fixedbutton.d'// import {fixedbutton,directiontype,btntype} from '../../../../../taro-yui-vue/src/components/fixedbutton/types/fixedbutton.d'\r\n\r\n/**\r\n * 底部固定button\r\n */class fixedbuttonservice {\r\n  /**\r\n   * 按钮类型\r\n   * */\r\n  btntypelist = [btntype.delete]\r\n\r\n  /**\r\n   * 点击事件\r\n  */\r\n  onclick(result:fixedbutton.clickcallbackresult){\r\n    alert(`${result.index===0?'保存':'删除'}事件`)\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-fixed-button': defineasynccomponent(() => import('@/components/yui/fixedbutton/fixedbutton.vue'))\r\n    'y-fixed-button': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/fixedbutton/fixedbutton.vue'))\r\n  },\r\n  setup() {\r\n    const service = new fixedbuttonservice()\r\n    return {\r\n      directiontype,\r\n      btntypelist: service.btntypelist,\r\n      btnlabellist: [\"删除\"],\r\n      onclick:service.onclick.bind(service)\r\n    };\r\n  },});</script>\n\n# 自定义图片\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-fixed-button\r\n      :btnlabellist=\"btnlabellist\"\r\n      @click=\"onclick\"\r\n    >\r\n      <template v-slot=\"slotprops\">\r\n        <image v-if=\"slotprops.info.idx === 0\" class=\"img-button\" :src=\"iconcustomactionbuy\"></image>\r\n        <image v-if=\"slotprops.info.idx === 1\" class=\"img-button\" :src=\"iconcancel\"></image>\r\n      </template>\r\n\r\n    </y-fixed-button>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent } from \"vue\";import \"./fixedbutton.scss\";import iconcustomactionbuy from '@/assets/img/custom_action_buy.svg'import iconcancel from '@/assets/img/icon_cancel.svg'// import {fixedbutton} from '@/components/fixedbutton/types/fixedbutton.d'import {fixedbutton} from '@/components/yui/fixedbutton/types/fixedbutton.d'\r\n\r\n/**\r\n * 底部固定button\r\n */class fixedbuttonservice {\r\n\r\n  /**\r\n   * 点击事件\r\n  */\r\n  onclick(result:fixedbutton.clickcallbackresult){\r\n    alert(`${result.index===0?'确定':'取消'}事件`)\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-fixed-button': defineasynccomponent(() => import('@/components/yui/fixedbutton/fixedbutton.vue'))\r\n    'y-fixed-button': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/fixedbutton/fixedbutton.vue'))\r\n  },\r\n  setup() {\r\n    const service = new fixedbuttonservice()\r\n    return {\r\n      iconcustomactionbuy,\r\n      iconcancel,\r\n      btnlabellist: [\"确定\", \"取消\"],\r\n      onclick:service.onclick.bind(service)\r\n    };\r\n  },});</script>\n\n# 属性\n/**\n * 显示方向\n */\nexport enum directiontype{\n\n    /**\n     * 垂直\n     */\n    vertical = \"vertical\",\n\n    /**\n     * 水平\n     */\n    horizontal = \"horizontal\"\n}\n\n/**\n * 按钮类型\n */\nexport enum btntype{\n\n  /**\n   * 确定按钮\n   */\n  primary= \"primary\",\n\n  /**\n   * 取消\n   */\n  cancel = \"cancel\",\n\n  /**\n   * 删除\n   */\n  delete = 'delete'\n}\n\n/**\n * 属性\n */\ninterface props{\n\n    /**\n     * 按钮显示文字列表\n     */\n    btnlabellist:string[]\n\n    /**\n     * 显示方向\t\n     */\n    direction:directiontype\n\n    /**\n     * 按钮类型\n     */\n    btntypelist?:string[]\n}\n\n\n\n# 事件\ninterface events{\n\n    /**\n     * 点击事件\n     */\n    click:clickcallbackresult\n}\n\n/**\n * 点击事件回调参数\n */\nexport interface clickcallbackresult{\n\n    /**\n     * 按钮下标\n     */\n    index:number\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "选择器 y-form-item-picker",
      "frontmatter": {},
      "regularPath": "/component/basic/formItemPicker.html",
      "relativePath": "component/basic/formItemPicker.md",
      "key": "v-262f3400",
      "path": "/component/basic/formItemPicker.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 55
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 82
        },
        {
          "level": 3,
          "title": "多列选择",
          "slug": "多列选择",
          "normalizedTitle": "多列选择",
          "charIndex": 33
        },
        {
          "level": 3,
          "title": "时间选择",
          "slug": "时间选择",
          "normalizedTitle": "时间选择",
          "charIndex": 39
        },
        {
          "level": 3,
          "title": "省市区选择",
          "slug": "省市区选择",
          "normalizedTitle": "省市区选择",
          "charIndex": 45
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 4523
        }
      ],
      "headersStr": "组件名称 基础用法 多列选择 时间选择 省市区选择 属性",
      "content": "# 选择器 y-form-item-picker\n支持普通选择器/多列选择器/时间选择器/省市区选择器\n\n# 组件名称\ny-form-item-picker\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"form-item-picker-container\">\r\n    <view class=\"form-item-picker-box\">\r\n      <y-form-item-picker\r\n        v-model=\"selectedId\"\r\n        :options=\"options\"></y-form-item-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import { Ref, defineComponent, defineAsyncComponent, ref } from 'vue'import './formItemPicker.scss'import { YFormItemPicker } from '@/components/yui/formItemPicker/types/formItemPicker.d'\r\n\r\nclass FormItemPicker {\r\n  /**\r\n   * 组件信息\r\n   * */\r\n  options: Ref<YFormItemPicker.FormItemPickerInfo> = ref({\r\n    placeholder: '',\r\n    canAll: true,\r\n    optionList: [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}]\r\n  })\r\n\r\n  /***\r\n   * 选中的id\r\n   */\r\n  selectedId = ref(0)\r\n\r\n  constructor() {\r\n\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-form-item-picker': defineAsyncComponent(() => import('@/components/yui/formItemPicker/formItemPicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new FormItemPicker()\r\n\r\n    return {\r\n      options: service.options,\r\n      selectedId: service.selectedId,\r\n    };\r\n  }});</script>\n\n# 多列选择\n<template>\r\n  <view v-reSize id=\"container\" class=\"form-item-picker-container\">\r\n    <view class=\"form-item-picker-box\">\r\n      <y-form-item-picker v-model=\"selectedId\" :options=\"options\"></y-form-item-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import {defineComponent, defineAsyncComponent, ref, Ref} from 'vue'import './formItemPicker.scss'import { YFormItemPicker } from '@/components/yui/formItemPicker/types/formItemPicker.d'\r\n\r\nclass FormItemPicker {\r\n  /**\r\n   * 组件信息\r\n   * */\r\n  options: Ref<YFormItemPicker.FormItemPickerInfo> = ref({\r\n    type: 'multiSelector',\r\n    placeholder: '',\r\n    optionList: [\r\n      [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n      [{id: 11, label: 'ab1'}, {id: 13, label: 'ab2'}],\r\n    ]\r\n  })\r\n\r\n  /***\r\n   * 选中的id\r\n   */\r\n  selectedId = ref([3,13])\r\n\r\n  constructor() {\r\n\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-form-item-picker': defineAsyncComponent(() => import('@/components/yui/formItemPicker/formItemPicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new FormItemPicker()\r\n\r\n    return {\r\n      options: service.options,\r\n      selectedId: service.selectedId,\r\n    };\r\n  }});</script>\n\n# 时间选择\n<template>\r\n  <view v-reSize id=\"container\" class=\"form-item-picker-container\">\r\n    <view class=\"form-item-picker-box\">\r\n      <y-form-item-picker v-model=\"time\" :options=\"options\"></y-form-item-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import {defineComponent, defineAsyncComponent, ref, Ref} from 'vue'import './formItemPicker.scss'import { YFormItemPicker } from '@/components/yui/formItemPicker/types/formItemPicker.d'\r\n\r\n\r\nclass FormItemPicker {\r\n  /**\r\n   * 组件信息\r\n   * */\r\n  options: Ref<YFormItemPicker.FormItemPickerInfo> = ref({\r\n    type: 'time',\r\n    placeholder: '请选择',\r\n  })\r\n\r\n  /***\r\n   * 选中的时分\r\n   */\r\n  time = ref('02:22')\r\n\r\n  constructor() {\r\n\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-form-item-picker': defineAsyncComponent(() => import('@/components/yui/formItemPicker/formItemPicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new FormItemPicker()\r\n\r\n    return {\r\n      options: service.options,\r\n      time: service.time,\r\n    };\r\n  }});</script>\n\n# 省市区选择\n<template>\r\n  <view v-reSize id=\"container\" class=\"form-item-picker-container\">\r\n    <view class=\"form-item-picker-box\">\r\n      <y-form-item-picker v-model=\"region\"\r\n                          :options=\"options\"></y-form-item-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import {defineComponent, defineAsyncComponent, ref, Ref} from 'vue'import './formItemPicker.scss'import { YFormItemPicker } from '@/components/yui/formItemPicker/types/formItemPicker.d'\r\n\r\n\r\nclass FormItemPicker {\r\n  /**\r\n   * 组件信息\r\n   * */\r\n  options: Ref<YFormItemPicker.FormItemPickerInfo> = ref({\r\n    type: 'region',\r\n    customItem: '全部',\r\n    placeholder: '请选择',\r\n  })\r\n\r\n  /***\r\n   * 选中省市区\r\n   */\r\n  region = ref(['广东省', '广州市', '海珠区'])\r\n\r\n  constructor() {\r\n\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-form-item-picker': defineAsyncComponent(() => import('@/components/yui/formItemPicker/formItemPicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new FormItemPicker()\r\n\r\n    return {\r\n      options: service.options,\r\n      region: service.region,\r\n    };\r\n  }});</script>\n\n# 属性\n  /**\n   * 属性\n   */\n  export interface YFormItemPickerProps extends Record<string, unknown> {\n\n    /***\n     * 模式：可编辑edit/可查看view, 默认edit\n     */\n    pattern?: string\n\n    /**\n     * 组件信息\n     */\n    options: FormItemPickerInfo\n\n    /**\n     * picker选中的id，\n     * type===selector => id 默认为0\n     * type===multiSelector => id集合 默认为[]\n     * type===time => 时间字符串 默认为‘’\n     * */\n    modelValue: number | number[] | string | string[]\n  }\n\n  export interface FormItemPickerInfo extends Record<string, unknown> {\n    /**\n     * picker类型, 默认selector\n     */\n    type?: string\n\n    /**\n     * 提示信息\n     */\n    placeholder?: string\n\n    /**\n     * 自定义选项，type===region时配置, 默认空\n     */\n    customItem?: string\n\n    /***\n     * 展示的下拉\n     */\n    optionList?: FormItemPickerOption[] | FormItemPickerOption[][]\n\n    /**\n     * 是否可清除, 必填项不可清除， 默认true\n     */\n    canClear?: boolean\n\n    /**\n     * 是否有全部， type === 'selector'时配置, 默认false\n     */\n    canAll?: boolean\n  }\n\n/**\n * 选择器选项列表项\n */\nexport interface FormItemPickerOption extends Record<string, unknown> {\n  /**\n   * 显示标签\n   */\n  label: string;\n\n  /**\n   * 选项值\n   */\n  id: number | string;\n}",
      "normalizedContent": "# 选择器 y-form-item-picker\n支持普通选择器/多列选择器/时间选择器/省市区选择器\n\n# 组件名称\ny-form-item-picker\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"form-item-picker-container\">\r\n    <view class=\"form-item-picker-box\">\r\n      <y-form-item-picker\r\n        v-model=\"selectedid\"\r\n        :options=\"options\"></y-form-item-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import { ref, definecomponent, defineasynccomponent, ref } from 'vue'import './formitempicker.scss'import { yformitempicker } from '@/components/yui/formitempicker/types/formitempicker.d'\r\n\r\nclass formitempicker {\r\n  /**\r\n   * 组件信息\r\n   * */\r\n  options: ref<yformitempicker.formitempickerinfo> = ref({\r\n    placeholder: '',\r\n    canall: true,\r\n    optionlist: [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}]\r\n  })\r\n\r\n  /***\r\n   * 选中的id\r\n   */\r\n  selectedid = ref(0)\r\n\r\n  constructor() {\r\n\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-form-item-picker': defineasynccomponent(() => import('@/components/yui/formitempicker/formitempicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new formitempicker()\r\n\r\n    return {\r\n      options: service.options,\r\n      selectedid: service.selectedid,\r\n    };\r\n  }});</script>\n\n# 多列选择\n<template>\r\n  <view v-resize id=\"container\" class=\"form-item-picker-container\">\r\n    <view class=\"form-item-picker-box\">\r\n      <y-form-item-picker v-model=\"selectedid\" :options=\"options\"></y-form-item-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import {definecomponent, defineasynccomponent, ref, ref} from 'vue'import './formitempicker.scss'import { yformitempicker } from '@/components/yui/formitempicker/types/formitempicker.d'\r\n\r\nclass formitempicker {\r\n  /**\r\n   * 组件信息\r\n   * */\r\n  options: ref<yformitempicker.formitempickerinfo> = ref({\r\n    type: 'multiselector',\r\n    placeholder: '',\r\n    optionlist: [\r\n      [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n      [{id: 11, label: 'ab1'}, {id: 13, label: 'ab2'}],\r\n    ]\r\n  })\r\n\r\n  /***\r\n   * 选中的id\r\n   */\r\n  selectedid = ref([3,13])\r\n\r\n  constructor() {\r\n\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-form-item-picker': defineasynccomponent(() => import('@/components/yui/formitempicker/formitempicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new formitempicker()\r\n\r\n    return {\r\n      options: service.options,\r\n      selectedid: service.selectedid,\r\n    };\r\n  }});</script>\n\n# 时间选择\n<template>\r\n  <view v-resize id=\"container\" class=\"form-item-picker-container\">\r\n    <view class=\"form-item-picker-box\">\r\n      <y-form-item-picker v-model=\"time\" :options=\"options\"></y-form-item-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import {definecomponent, defineasynccomponent, ref, ref} from 'vue'import './formitempicker.scss'import { yformitempicker } from '@/components/yui/formitempicker/types/formitempicker.d'\r\n\r\n\r\nclass formitempicker {\r\n  /**\r\n   * 组件信息\r\n   * */\r\n  options: ref<yformitempicker.formitempickerinfo> = ref({\r\n    type: 'time',\r\n    placeholder: '请选择',\r\n  })\r\n\r\n  /***\r\n   * 选中的时分\r\n   */\r\n  time = ref('02:22')\r\n\r\n  constructor() {\r\n\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-form-item-picker': defineasynccomponent(() => import('@/components/yui/formitempicker/formitempicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new formitempicker()\r\n\r\n    return {\r\n      options: service.options,\r\n      time: service.time,\r\n    };\r\n  }});</script>\n\n# 省市区选择\n<template>\r\n  <view v-resize id=\"container\" class=\"form-item-picker-container\">\r\n    <view class=\"form-item-picker-box\">\r\n      <y-form-item-picker v-model=\"region\"\r\n                          :options=\"options\"></y-form-item-picker>\r\n    </view>\r\n  </view></template><script lang=\"ts\">import {definecomponent, defineasynccomponent, ref, ref} from 'vue'import './formitempicker.scss'import { yformitempicker } from '@/components/yui/formitempicker/types/formitempicker.d'\r\n\r\n\r\nclass formitempicker {\r\n  /**\r\n   * 组件信息\r\n   * */\r\n  options: ref<yformitempicker.formitempickerinfo> = ref({\r\n    type: 'region',\r\n    customitem: '全部',\r\n    placeholder: '请选择',\r\n  })\r\n\r\n  /***\r\n   * 选中省市区\r\n   */\r\n  region = ref(['广东省', '广州市', '海珠区'])\r\n\r\n  constructor() {\r\n\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-form-item-picker': defineasynccomponent(() => import('@/components/yui/formitempicker/formitempicker.vue'))\r\n  },\r\n  setup() {\r\n    const service = new formitempicker()\r\n\r\n    return {\r\n      options: service.options,\r\n      region: service.region,\r\n    };\r\n  }});</script>\n\n# 属性\n  /**\n   * 属性\n   */\n  export interface yformitempickerprops extends record<string, unknown> {\n\n    /***\n     * 模式：可编辑edit/可查看view, 默认edit\n     */\n    pattern?: string\n\n    /**\n     * 组件信息\n     */\n    options: formitempickerinfo\n\n    /**\n     * picker选中的id，\n     * type===selector => id 默认为0\n     * type===multiselector => id集合 默认为[]\n     * type===time => 时间字符串 默认为‘’\n     * */\n    modelvalue: number | number[] | string | string[]\n  }\n\n  export interface formitempickerinfo extends record<string, unknown> {\n    /**\n     * picker类型, 默认selector\n     */\n    type?: string\n\n    /**\n     * 提示信息\n     */\n    placeholder?: string\n\n    /**\n     * 自定义选项，type===region时配置, 默认空\n     */\n    customitem?: string\n\n    /***\n     * 展示的下拉\n     */\n    optionlist?: formitempickeroption[] | formitempickeroption[][]\n\n    /**\n     * 是否可清除, 必填项不可清除， 默认true\n     */\n    canclear?: boolean\n\n    /**\n     * 是否有全部， type === 'selector'时配置, 默认false\n     */\n    canall?: boolean\n  }\n\n/**\n * 选择器选项列表项\n */\nexport interface formitempickeroption extends record<string, unknown> {\n  /**\n   * 显示标签\n   */\n  label: string;\n\n  /**\n   * 选项值\n   */\n  id: number | string;\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "浮动弹层 y-float-layout",
      "frontmatter": {},
      "regularPath": "/component/basic/floatLayout.html",
      "relativePath": "component/basic/floatLayout.md",
      "key": "v-5361dee4",
      "path": "/component/basic/floatLayout.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 53
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 76
        },
        {
          "level": 3,
          "title": "跟随某个元素",
          "slug": "跟随某个元素",
          "normalizedTitle": "跟随某个元素",
          "charIndex": 33
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 4916
        },
        {
          "level": 3,
          "title": "事件",
          "slug": "事件",
          "normalizedTitle": "事件",
          "charIndex": 1965
        }
      ],
      "headersStr": "组件名称 基础用法 跟随某个元素 属性 事件",
      "content": "# 浮动弹层 y-float-layout\n三种模式：中间|底部|跟随某个元素，前两种支持有无标题\n\n# 组件名称\ny-float-layout\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-float-layout :isOpened=\"isOpened\"\r\n                    :type=\"type\"\r\n                    :width=\"modalWidth\"\r\n                    title=\"这是标题\"\r\n                    @onClose=\"onCatchCloseFloatLayout\">\r\n      这是内容区 随你怎么写这是内容区 随你怎么写这是内容区 随你怎么写这是内容区\r\n      随你怎么写这是内容区 随你怎么写这是内容区 随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区@\r\n      <template #footer>\r\n        <y-fixed-button\r\n      :btnLabelList=\"btnLabelList\"\r\n      @click=\"onClick\"\r\n    >\r\n    </y-fixed-button>\r\n      </template>\r\n    </y-float-layout>\r\n\r\n    <button @tap=\"onOpenFloatLayout('bottom')\">点击打开底部弹窗</button>\r\n    <button @tap=\"onOpenFloatLayout('middle')\">点击打开中间弹窗</button>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent, Ref, ref } from 'vue'import {FixedButton} from '../../../../../taro-yui-vue/src/components/fixedButton/types/fixedButton.d'import './floatLayout.scss'\r\n\r\nclass FloatLayoutService {\r\n  /***\r\n   * 是否显示弹窗\r\n   */\r\n  isOpened: Ref<boolean> = ref(false)\r\n\r\n  /**\r\n   * 中间型弹窗的宽度\r\n   * */\r\n  modalWidth: Ref<number> = ref(560)\r\n\r\n  /**\r\n   * 弹窗类型: middle或bottom, 默认bottom\r\n   */\r\n  type: Ref<String> = ref('bottom')\r\n\r\n  /***\r\n   * 点击按钮显示弹窗\r\n   */\r\n  onOpenFloatLayout(baseType:string) {\r\n    this.type.value = baseType\r\n    this.isOpened.value = true\r\n  }\r\n\r\n  /***\r\n   * 关闭弹窗组件\r\n   */\r\n  onCatchCloseFloatLayout() {\r\n    this.isOpened.value = false\r\n  }\r\n  /**\r\n   * 点击事件\r\n  */\r\n  onClick(result:FixedButton.ClickCallbackResult){\r\n    alert(`${result.index===0?'取消':'确定'}事件`)\r\n  }}\r\n\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-fixed-button': defineAsyncComponent(() => import('@/components/yui/fixedButton/fixedButton.vue')),\r\n    'y-float-layout': defineAsyncComponent(() => import('@/components/yui/floatLayout/floatLayout.vue'))\r\n    // 'y-float-layout': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/floatLayout/floatLayout.vue'))\r\n  },\r\n  setup() {\r\n    const service = new FloatLayoutService()\r\n    return {\r\n      isOpened: service.isOpened,\r\n      modalWidth: service.modalWidth,\r\n      type: service.type,\r\n      btnLabelList: [\"取消\", \"确定\"],\r\n      onOpenFloatLayout: service.onOpenFloatLayout.bind(service),\r\n      onCatchCloseFloatLayout: service.onCatchCloseFloatLayout.bind(service),\r\n      onClick:service.onClick.bind(service)\r\n    };\r\n  }});</script>\n\n# 跟随某个元素\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-float-layout :isOpened=\"isOpened\"\r\n                    type=\"follow\"\r\n                    :elementName=\"btnElId\"\r\n                    @onClose=\"onCatchCloseFloatLayout\">\r\n      这是内容区 随你怎么写这是内容区 随你怎么写这是内容区 随你怎么写这是内容区\r\n      随你怎么写这是内容区 随你怎么写这是内容区 随你怎么写\r\n    </y-float-layout>\r\n\r\n    <view class=\"box\" @tap=\"onOpenFloatLayout\">\r\n      点击打开弹窗\r\n      <view :id=\"btnElId\"></view>\r\n    </view>\r\n\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent, Ref, ref, onMounted } from 'vue'import Taro from \"@tarojs/taro\"import './floatLayout.scss'\r\n\r\nclass FloatLayout{\r\n  /***\r\n   * 是否显示弹窗\r\n   */\r\n  isOpened: Ref<boolean> = ref(false)\r\n\r\n  /**\r\n   * 按钮元素id\r\n   */\r\n  btnElId: string = this.randomStr(16)\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 生成随机字符串\r\n   * @param long 长度\r\n   */\r\n  private randomStr(long: number): string {\r\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r\n    const maxPos = chars.length;\r\n    var string = '';\r\n    for (var i = 0; i < long; i++) {\r\n      string += chars.charAt(Math.floor(Math.random() * maxPos));\r\n    }\r\n    return string;\r\n  }\r\n\r\n  /***\r\n   * 点击按钮显示弹窗\r\n   */\r\n  onOpenFloatLayout(e) {\r\n    this.isOpened.value = true\r\n  }\r\n\r\n  /***\r\n   * 关闭弹窗组件\r\n   */\r\n  onCatchCloseFloatLayout () {\r\n    this.isOpened.value = false\r\n  }}\r\n\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-float-layout': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/floatLayout/floatLayout.vue'))\r\n    // 'y-float-layout': defineAsyncComponent(() => import('@/components/yui/floatLayout/floatLayout.vue'))\r\n  },\r\n  setup() {\r\n    const service = new FloatLayout()\r\n    return {\r\n      isOpened: service.isOpened,\r\n      btnElId: service.btnElId,\r\n      onOpenFloatLayout: service.onOpenFloatLayout.bind(service),\r\n      onCatchCloseFloatLayout: service.onCatchCloseFloatLayout.bind(service),\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface FloatLayoutProps extends Record<string, unknown> {\n\n  /**\n   * 是否显示弹窗\n   */\n  isOpened: boolean\n\n  /**\n   * 弹窗类型: middle或bottom, 默认bottom\n   */\n  type: string\n\n  /***\n   * 弹窗宽度：只限类型为middle\n   */\n  width?: number|string\n\n  /**\n   * 弹窗标题\n   */\n  title: string\n\n  /**\n   * id选择器，如：#a\n   */\n  elementName: string\n\n  /**\n   * 外部定点id\n   */\n  maskOuterElId: string\n}\n\n# 事件\n/**\n * 事件\n */\ninterface Events {\n  /***\n   * 关闭弹窗触发\n   */\n  onClose: string\n}",
      "normalizedContent": "# 浮动弹层 y-float-layout\n三种模式：中间|底部|跟随某个元素，前两种支持有无标题\n\n# 组件名称\ny-float-layout\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-float-layout :isopened=\"isopened\"\r\n                    :type=\"type\"\r\n                    :width=\"modalwidth\"\r\n                    title=\"这是标题\"\r\n                    @onclose=\"oncatchclosefloatlayout\">\r\n      这是内容区 随你怎么写这是内容区 随你怎么写这是内容区 随你怎么写这是内容区\r\n      随你怎么写这是内容区 随你怎么写这是内容区 随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区\r\n      随你怎么写随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区随你怎么写这是内容区@\r\n      <template #footer>\r\n        <y-fixed-button\r\n      :btnlabellist=\"btnlabellist\"\r\n      @click=\"onclick\"\r\n    >\r\n    </y-fixed-button>\r\n      </template>\r\n    </y-float-layout>\r\n\r\n    <button @tap=\"onopenfloatlayout('bottom')\">点击打开底部弹窗</button>\r\n    <button @tap=\"onopenfloatlayout('middle')\">点击打开中间弹窗</button>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent, ref, ref } from 'vue'import {fixedbutton} from '../../../../../taro-yui-vue/src/components/fixedbutton/types/fixedbutton.d'import './floatlayout.scss'\r\n\r\nclass floatlayoutservice {\r\n  /***\r\n   * 是否显示弹窗\r\n   */\r\n  isopened: ref<boolean> = ref(false)\r\n\r\n  /**\r\n   * 中间型弹窗的宽度\r\n   * */\r\n  modalwidth: ref<number> = ref(560)\r\n\r\n  /**\r\n   * 弹窗类型: middle或bottom, 默认bottom\r\n   */\r\n  type: ref<string> = ref('bottom')\r\n\r\n  /***\r\n   * 点击按钮显示弹窗\r\n   */\r\n  onopenfloatlayout(basetype:string) {\r\n    this.type.value = basetype\r\n    this.isopened.value = true\r\n  }\r\n\r\n  /***\r\n   * 关闭弹窗组件\r\n   */\r\n  oncatchclosefloatlayout() {\r\n    this.isopened.value = false\r\n  }\r\n  /**\r\n   * 点击事件\r\n  */\r\n  onclick(result:fixedbutton.clickcallbackresult){\r\n    alert(`${result.index===0?'取消':'确定'}事件`)\r\n  }}\r\n\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-fixed-button': defineasynccomponent(() => import('@/components/yui/fixedbutton/fixedbutton.vue')),\r\n    'y-float-layout': defineasynccomponent(() => import('@/components/yui/floatlayout/floatlayout.vue'))\r\n    // 'y-float-layout': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/floatlayout/floatlayout.vue'))\r\n  },\r\n  setup() {\r\n    const service = new floatlayoutservice()\r\n    return {\r\n      isopened: service.isopened,\r\n      modalwidth: service.modalwidth,\r\n      type: service.type,\r\n      btnlabellist: [\"取消\", \"确定\"],\r\n      onopenfloatlayout: service.onopenfloatlayout.bind(service),\r\n      oncatchclosefloatlayout: service.oncatchclosefloatlayout.bind(service),\r\n      onclick:service.onclick.bind(service)\r\n    };\r\n  }});</script>\n\n# 跟随某个元素\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-float-layout :isopened=\"isopened\"\r\n                    type=\"follow\"\r\n                    :elementname=\"btnelid\"\r\n                    @onclose=\"oncatchclosefloatlayout\">\r\n      这是内容区 随你怎么写这是内容区 随你怎么写这是内容区 随你怎么写这是内容区\r\n      随你怎么写这是内容区 随你怎么写这是内容区 随你怎么写\r\n    </y-float-layout>\r\n\r\n    <view class=\"box\" @tap=\"onopenfloatlayout\">\r\n      点击打开弹窗\r\n      <view :id=\"btnelid\"></view>\r\n    </view>\r\n\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent, ref, ref, onmounted } from 'vue'import taro from \"@tarojs/taro\"import './floatlayout.scss'\r\n\r\nclass floatlayout{\r\n  /***\r\n   * 是否显示弹窗\r\n   */\r\n  isopened: ref<boolean> = ref(false)\r\n\r\n  /**\r\n   * 按钮元素id\r\n   */\r\n  btnelid: string = this.randomstr(16)\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 生成随机字符串\r\n   * @param long 长度\r\n   */\r\n  private randomstr(long: number): string {\r\n    const chars = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz';\r\n    const maxpos = chars.length;\r\n    var string = '';\r\n    for (var i = 0; i < long; i++) {\r\n      string += chars.charat(math.floor(math.random() * maxpos));\r\n    }\r\n    return string;\r\n  }\r\n\r\n  /***\r\n   * 点击按钮显示弹窗\r\n   */\r\n  onopenfloatlayout(e) {\r\n    this.isopened.value = true\r\n  }\r\n\r\n  /***\r\n   * 关闭弹窗组件\r\n   */\r\n  oncatchclosefloatlayout () {\r\n    this.isopened.value = false\r\n  }}\r\n\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-float-layout': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/floatlayout/floatlayout.vue'))\r\n    // 'y-float-layout': defineasynccomponent(() => import('@/components/yui/floatlayout/floatlayout.vue'))\r\n  },\r\n  setup() {\r\n    const service = new floatlayout()\r\n    return {\r\n      isopened: service.isopened,\r\n      btnelid: service.btnelid,\r\n      onopenfloatlayout: service.onopenfloatlayout.bind(service),\r\n      oncatchclosefloatlayout: service.oncatchclosefloatlayout.bind(service),\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface floatlayoutprops extends record<string, unknown> {\n\n  /**\n   * 是否显示弹窗\n   */\n  isopened: boolean\n\n  /**\n   * 弹窗类型: middle或bottom, 默认bottom\n   */\n  type: string\n\n  /***\n   * 弹窗宽度：只限类型为middle\n   */\n  width?: number|string\n\n  /**\n   * 弹窗标题\n   */\n  title: string\n\n  /**\n   * id选择器，如：#a\n   */\n  elementname: string\n\n  /**\n   * 外部定点id\n   */\n  maskouterelid: string\n}\n\n# 事件\n/**\n * 事件\n */\ninterface events {\n  /***\n   * 关闭弹窗触发\n   */\n  onclose: string\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "计数器 y-input-number",
      "frontmatter": {},
      "regularPath": "/component/basic/inputNumber.html",
      "relativePath": "component/basic/inputNumber.md",
      "key": "v-10d3fc84",
      "path": "/component/basic/inputNumber.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 38
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 61
        },
        {
          "level": 3,
          "title": "不可编辑",
          "slug": "不可编辑",
          "normalizedTitle": "不可编辑",
          "charIndex": 30
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 2432
        },
        {
          "level": 3,
          "title": "事件",
          "slug": "事件",
          "normalizedTitle": "事件",
          "charIndex": 2855
        }
      ],
      "headersStr": "组件名称 基础用法 不可编辑 属性 事件",
      "content": "# 计数器 y-input-number\n计数器，支持编辑/不可编辑\n\n# 组件名称\ny-input-number\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-input-number v-model=\"count\"\r\n                    :options=\"options\"\r\n                    @onChange=\"onCatchChangeNumber\"></y-input-number>\r\n\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent, ref, Ref } from 'vue'import './inputNumber.scss'\r\n\r\nclass InputNumberService {\r\n  /**\r\n   * 个数\r\n   * */\r\n  count: Ref<number> = ref(4)\r\n\r\n  /**\r\n   * 组件信息\r\n   * */\r\n  options = ref({\r\n    maxCount: 10,\r\n    minCount: 1,\r\n  })\r\n\r\n  /**\r\n   * 获取组件值\r\n   * */\r\n  onCatchChangeNumber(val: number) {\r\n    console.log('添加的数字',val)\r\n  }\r\n\r\n}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-input-number': defineAsyncComponent(() => import('@/components/yui/inputNumber/inputNumber.vue'))\r\n    // 'y-input-number': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/inputNumber/inputNumber.vue'))\r\n  },\r\n  setup() {\r\n    const service = new InputNumberService()\r\n\r\n    return {\r\n      count: service.count,\r\n      options: service.options,\r\n      onCatchChangeNumber: service.onCatchChangeNumber.bind(service),\r\n    };\r\n  }});</script>\n\n# 不可编辑\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-input-number v-model=\"count\"\r\n                    :options=\"options\"\r\n                    @onChange=\"onCatchChangeNumber\"></y-input-number>\r\n\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent, ref, Ref } from 'vue'import './inputNumber.scss'\r\n\r\nclass InputNumberService {\r\n  /**\r\n   * 个数\r\n   * */\r\n  count: Ref<number> = ref(4)\r\n\r\n  /**\r\n   * 组件信息\r\n   * */\r\n  options = ref({\r\n    disabled: true,\r\n    maxCount: 10,\r\n    minCount: 2,\r\n  })\r\n\r\n  /**\r\n   * 获取组件值\r\n   * */\r\n  onCatchChangeNumber(val: number) {\r\n    console.log('添加的数字',val)\r\n  }\r\n\r\n}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-input-number': defineAsyncComponent(() => import('@/components/yui/inputNumber/inputNumber.vue'))\r\n    'y-input-number': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/inputNumber/inputNumber.vue'))\r\n  },\r\n  setup() {\r\n    const service = new InputNumberService()\r\n\r\n    return {\r\n      count: service.count,\r\n      options: service.options,\r\n      onCatchChangeNumber: service.onCatchChangeNumber.bind(service),\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface YInputNumberProps extends Record<string, unknown> {\n  /**\n   * 数目，值\n   */\n  modelValue: number\n\n  /***\n   * 组件参数\n   */\n  options: InputNumberInfo\n}\n\nexport interface InputNumberInfo extends Record<string, unknown> {\n  /***\n   * 是否可编辑,false:可编辑， true: 不可编辑，默认false\n   */\n  disabled?: boolean\n\n  /**\n   * 最大: 默认9999\n   */\n  maxCount: number\n\n  /**\n   * 最小： 默认1\n   */\n  minCount: number\n}\n\n# 事件\nexport interface Events{\n\n  /**\n   * 点击+/-触发\n   */\n  onChange: number\n}",
      "normalizedContent": "# 计数器 y-input-number\n计数器，支持编辑/不可编辑\n\n# 组件名称\ny-input-number\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-input-number v-model=\"count\"\r\n                    :options=\"options\"\r\n                    @onchange=\"oncatchchangenumber\"></y-input-number>\r\n\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent, ref, ref } from 'vue'import './inputnumber.scss'\r\n\r\nclass inputnumberservice {\r\n  /**\r\n   * 个数\r\n   * */\r\n  count: ref<number> = ref(4)\r\n\r\n  /**\r\n   * 组件信息\r\n   * */\r\n  options = ref({\r\n    maxcount: 10,\r\n    mincount: 1,\r\n  })\r\n\r\n  /**\r\n   * 获取组件值\r\n   * */\r\n  oncatchchangenumber(val: number) {\r\n    console.log('添加的数字',val)\r\n  }\r\n\r\n}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-input-number': defineasynccomponent(() => import('@/components/yui/inputnumber/inputnumber.vue'))\r\n    // 'y-input-number': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/inputnumber/inputnumber.vue'))\r\n  },\r\n  setup() {\r\n    const service = new inputnumberservice()\r\n\r\n    return {\r\n      count: service.count,\r\n      options: service.options,\r\n      oncatchchangenumber: service.oncatchchangenumber.bind(service),\r\n    };\r\n  }});</script>\n\n# 不可编辑\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-input-number v-model=\"count\"\r\n                    :options=\"options\"\r\n                    @onchange=\"oncatchchangenumber\"></y-input-number>\r\n\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent, ref, ref } from 'vue'import './inputnumber.scss'\r\n\r\nclass inputnumberservice {\r\n  /**\r\n   * 个数\r\n   * */\r\n  count: ref<number> = ref(4)\r\n\r\n  /**\r\n   * 组件信息\r\n   * */\r\n  options = ref({\r\n    disabled: true,\r\n    maxcount: 10,\r\n    mincount: 2,\r\n  })\r\n\r\n  /**\r\n   * 获取组件值\r\n   * */\r\n  oncatchchangenumber(val: number) {\r\n    console.log('添加的数字',val)\r\n  }\r\n\r\n}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-input-number': defineasynccomponent(() => import('@/components/yui/inputnumber/inputnumber.vue'))\r\n    'y-input-number': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/inputnumber/inputnumber.vue'))\r\n  },\r\n  setup() {\r\n    const service = new inputnumberservice()\r\n\r\n    return {\r\n      count: service.count,\r\n      options: service.options,\r\n      oncatchchangenumber: service.oncatchchangenumber.bind(service),\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface yinputnumberprops extends record<string, unknown> {\n  /**\n   * 数目，值\n   */\n  modelvalue: number\n\n  /***\n   * 组件参数\n   */\n  options: inputnumberinfo\n}\n\nexport interface inputnumberinfo extends record<string, unknown> {\n  /***\n   * 是否可编辑,false:可编辑， true: 不可编辑，默认false\n   */\n  disabled?: boolean\n\n  /**\n   * 最大: 默认9999\n   */\n  maxcount: number\n\n  /**\n   * 最小： 默认1\n   */\n  mincount: number\n}\n\n# 事件\nexport interface events{\n\n  /**\n   * 点击+/-触发\n   */\n  onchange: number\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "页面容器 y-page-container",
      "frontmatter": {},
      "regularPath": "/component/basic/pageContainer.html",
      "relativePath": "component/basic/pageContainer.md",
      "key": "v-b25ddcb8",
      "path": "/component/basic/pageContainer.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 78
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 103
        },
        {
          "level": 3,
          "title": "顶部填充",
          "slug": "顶部填充",
          "normalizedTitle": "顶部填充",
          "charIndex": 1372
        },
        {
          "level": 3,
          "title": "底部填充",
          "slug": "底部填充",
          "normalizedTitle": "底部填充",
          "charIndex": 3952
        },
        {
          "level": 3,
          "title": "完整用法",
          "slug": "完整用法",
          "normalizedTitle": "完整用法",
          "charIndex": 6602
        },
        {
          "level": 3,
          "title": "事件",
          "slug": "事件",
          "normalizedTitle": "事件",
          "charIndex": 534
        },
        {
          "level": 3,
          "title": "Slots",
          "slug": "slots",
          "normalizedTitle": "slots",
          "charIndex": 10565
        }
      ],
      "headersStr": "组件名称 基础用法 顶部填充 底部填充 完整用法 事件 Slots",
      "content": "# 页面容器 y-page-container\n用于计算内容区高度，兼容pc端。内部支持填充：y-search-bar、y-fixed-button\n\n# 组件名称\ny-page-container\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-page-container>\r\n      内容区\r\n    </y-page-container>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent } from \"vue\";import \"./pageContainer.scss\";import { FixedButton } from \"../../../../../taro-yui-vue/src/components/fixedButton/types/fixedButton.d\";\r\n\r\n/**\r\n * 底部固定button\r\n */class FixedButtonService {\r\n  /**\r\n   * 点击事件\r\n   */\r\n  onClick(result: FixedButton.ClickCallbackResult) {\r\n    alert(`${result.index === 0 ? \"取消\" : \"确定\"}事件`);\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-fixed-button': defineAsyncComponent(() => import('@/components/yui/fixedButton/fixedButton.vue'))\r\n    \"y-fixed-button\": defineAsyncComponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/fixedButton/fixedButton.vue\"\r\n        )\r\n    ),\r\n    \"y-page-container\": defineAsyncComponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/pageContainer/pageContainer.vue\"\r\n        )\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new FixedButtonService();\r\n    return {\r\n      btnLabelList: [\"取消\", \"确定\"],\r\n      onClick: service.onClick.bind(service),\r\n    };\r\n  },});</script>\n\n# 顶部填充\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-page-container>\r\n      <template #header><y-search-bar :rowList=\"rowList\"\r\n                  v-model=\"searchRowValueInfo\"\r\n                  @onSearch=\"onCatchSearch\"></y-search-bar>\r\n      </template>\r\n      内容区\r\n    </y-page-container>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent,ref,Ref } from \"vue\";import \"./pageContainer.scss\";import { FixedButton } from \"../../../../../taro-yui-vue/src/components/fixedButton/types/fixedButton.d\";import { YInputBox } from '../../../../../taro-yui-vue/src/components/searchBar/components/inputBox/types/inputBox.d'import { YSearchBar, SearchBarElType } from '../../../../../taro-yui-vue/src/components/searchBar/types/searchBar.d'\r\n\r\n/**\r\n * 底部固定button\r\n */class FixedButtonService {\r\n  /**\r\n   * 点击事件\r\n   */\r\n  onClick(result: FixedButton.ClickCallbackResult) {\r\n    alert(`${result.index === 0 ? \"取消\" : \"确定\"}事件`);\r\n  }\r\n\r\n  /**\r\n   * 表单行集合\r\n   */\r\n   rowList: Ref<YSearchBar.SearchRowItem[]> = ref([\r\n      {\r\n        show: true,\r\n        label: '',\r\n        type: SearchBarElType.INPUT,\r\n        property: 'keyWord',\r\n        options: <YInputBox.InputInfo>{\r\n          placeholder: '输入文字'\r\n        }\r\n      }\r\n    ])\r\n\r\n    /**\r\n     * 表单所有值，key名和searchRowList中的property一致\r\n     * */\r\n    searchRowValueInfo: Ref<Object> = ref({\r\n      keyWord: '1111'\r\n    })\r\n\r\n    /**\r\n     * 重置\r\n     */\r\n    searchRowValueInfoEmpty: Object = {\r\n      keyWord: ''\r\n    }\r\n\r\n    /**\r\n     * 搜索\r\n     */\r\n    onCatchSearch(params: Object) {\r\n      this.searchRowValueInfo.value = params === null ? {\r\n        ...this.searchRowValueInfoEmpty\r\n      }  : this.searchRowValueInfo.value\r\n      console.log('搜索结果', params)\r\n      console.log('搜索结果===',this.searchRowValueInfo.value )\r\n    }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    \"y-page-container\": defineAsyncComponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/pageContainer/pageContainer.vue\"\r\n        )\r\n    ),\r\n    \"y-search-bar\": defineAsyncComponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/searchBar/searchBar.vue\"\r\n        )\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new FixedButtonService();\r\n    return {\r\n      btnLabelList: [\"取消\", \"确定\"],\r\n      onClick: service.onClick.bind(service),\r\n      rowList: service.rowList,\r\n      searchRowValueInfo: service.searchRowValueInfo,\r\n      onCatchSearch: service.onCatchSearch.bind(service)\r\n    };\r\n  },});</script>\n\n# 底部填充\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-page-container>\r\n      内容区\r\n      <template #footer>\r\n        <y-fixed-button :btnLabelList=\"btnLabelList\" @click=\"onClick\">\r\n      </y-fixed-button>\r\n      </template>\r\n    </y-page-container>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent,ref,Ref } from \"vue\";import \"./pageContainer.scss\";import { FixedButton } from \"../../../../../taro-yui-vue/src/components/fixedButton/types/fixedButton.d\";import { YInputBox } from '../../../../../taro-yui-vue/src/components/searchBar/components/inputBox/types/inputBox.d'import { YSearchBar, SearchBarElType } from '../../../../../taro-yui-vue/src/components/searchBar/types/searchBar.d'\r\n\r\n/**\r\n * 底部固定button\r\n */class FixedButtonService {\r\n  /**\r\n   * 点击事件\r\n   */\r\n  onClick(result: FixedButton.ClickCallbackResult) {\r\n    alert(`${result.index === 0 ? \"取消\" : \"确定\"}事件`);\r\n  }\r\n\r\n  /**\r\n   * 表单行集合\r\n   */\r\n   rowList: Ref<YSearchBar.SearchRowItem[]> = ref([\r\n      {\r\n        show: true,\r\n        label: '',\r\n        type: SearchBarElType.INPUT,\r\n        property: 'keyWord',\r\n        options: <YInputBox.InputInfo>{\r\n          placeholder: '输入文字'\r\n        }\r\n      }\r\n    ])\r\n\r\n    /**\r\n     * 表单所有值，key名和searchRowList中的property一致\r\n     * */\r\n    searchRowValueInfo: Ref<Object> = ref({\r\n      keyWord: '1111'\r\n    })\r\n\r\n    /**\r\n     * 重置\r\n     */\r\n    searchRowValueInfoEmpty: Object = {\r\n      keyWord: ''\r\n    }\r\n\r\n    /**\r\n     * 搜索\r\n     */\r\n    onCatchSearch(params: Object) {\r\n      this.searchRowValueInfo.value = params === null ? {\r\n        ...this.searchRowValueInfoEmpty\r\n      }  : this.searchRowValueInfo.value\r\n      console.log('搜索结果', params)\r\n      console.log('搜索结果===',this.searchRowValueInfo.value )\r\n    }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-fixed-button': defineAsyncComponent(() => import('@/components/yui/fixedButton/fixedButton.vue'))\r\n    \"y-fixed-button\": defineAsyncComponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/fixedButton/fixedButton.vue\"\r\n        )\r\n    ),\r\n    \"y-page-container\": defineAsyncComponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/pageContainer/pageContainer.vue\"\r\n        )\r\n    )\r\n  },\r\n  setup() {\r\n    const service = new FixedButtonService();\r\n    return {\r\n      btnLabelList: [\"取消\", \"确定\"],\r\n      onClick: service.onClick.bind(service),\r\n      rowList: service.rowList,\r\n      searchRowValueInfo: service.searchRowValueInfo,\r\n      onCatchSearch: service.onCatchSearch.bind(service)\r\n    };\r\n  },});</script>\n\n# 完整用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-page-container>\r\n      <template #header><y-search-bar :rowList=\"rowList\"\r\n                  v-model=\"searchRowValueInfo\"\r\n                  @onSearch=\"onCatchSearch\"></y-search-bar>\r\n      </template>\r\n      <view>内容区1</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <template #footer>\r\n        <y-fixed-button :btnLabelList=\"btnLabelList\" @click=\"onClick\">\r\n      </y-fixed-button>\r\n      </template>\r\n    </y-page-container>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent,ref,Ref } from \"vue\";import \"./pageContainer.scss\";import { FixedButton } from \"../../../../../taro-yui-vue/src/components/fixedButton/types/fixedButton.d\";import { YInputBox } from '../../../../../taro-yui-vue/src/components/searchBar/components/inputBox/types/inputBox.d'import { YSearchBar, SearchBarElType } from '../../../../../taro-yui-vue/src/components/searchBar/types/searchBar.d'\r\n\r\n/**\r\n * 底部固定button\r\n */class FixedButtonService {\r\n  /**\r\n   * 点击事件\r\n   */\r\n  onClick(result: FixedButton.ClickCallbackResult) {\r\n    alert(`${result.index === 0 ? \"取消\" : \"确定\"}事件`);\r\n  }\r\n\r\n  /**\r\n   * 表单行集合\r\n   */\r\n   rowList: Ref<YSearchBar.SearchRowItem[]> = ref([\r\n      {\r\n        show: true,\r\n        label: '',\r\n        type: SearchBarElType.INPUT,\r\n        property: 'keyWord',\r\n        options: <YInputBox.InputInfo>{\r\n          placeholder: '输入文字'\r\n        }\r\n      }\r\n    ])\r\n\r\n    /**\r\n     * 表单所有值，key名和searchRowList中的property一致\r\n     * */\r\n    searchRowValueInfo: Ref<Object> = ref({\r\n      keyWord: '1111'\r\n    })\r\n\r\n    /**\r\n     * 重置\r\n     */\r\n    searchRowValueInfoEmpty: Object = {\r\n      keyWord: ''\r\n    }\r\n\r\n    /**\r\n     * 搜索\r\n     */\r\n    onCatchSearch(params: Object) {\r\n      this.searchRowValueInfo.value = params === null ? {\r\n        ...this.searchRowValueInfoEmpty\r\n      }  : this.searchRowValueInfo.value\r\n      console.log('搜索结果', params)\r\n      console.log('搜索结果===',this.searchRowValueInfo.value )\r\n    }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-fixed-button': defineAsyncComponent(() => import('@/components/yui/fixedButton/fixedButton.vue'))\r\n    \"y-fixed-button\": defineAsyncComponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/fixedButton/fixedButton.vue\"\r\n        )\r\n    ),\r\n    \"y-page-container\": defineAsyncComponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/pageContainer/pageContainer.vue\"\r\n        )\r\n    ),\r\n    \"y-search-bar\": defineAsyncComponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/searchBar/searchBar.vue\"\r\n        )\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new FixedButtonService();\r\n    return {\r\n      btnLabelList: [\"取消\", \"确定\"],\r\n      onClick: service.onClick.bind(service),\r\n      rowList: service.rowList,\r\n      searchRowValueInfo: service.searchRowValueInfo,\r\n      onCatchSearch: service.onCatchSearch.bind(service)\r\n    };\r\n  },});</script>\n\n# 事件\n/**\n * 事件\n */\ntype Events = {\n    /**\n     * 上拉触底事件\n     */\n    onScrollToLower: () => void\n}\n\n# Slots\nname     说明   \nheader   头部   \nfooter   尾部",
      "normalizedContent": "# 页面容器 y-page-container\n用于计算内容区高度，兼容pc端。内部支持填充：y-search-bar、y-fixed-button\n\n# 组件名称\ny-page-container\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-page-container>\r\n      内容区\r\n    </y-page-container>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent } from \"vue\";import \"./pagecontainer.scss\";import { fixedbutton } from \"../../../../../taro-yui-vue/src/components/fixedbutton/types/fixedbutton.d\";\r\n\r\n/**\r\n * 底部固定button\r\n */class fixedbuttonservice {\r\n  /**\r\n   * 点击事件\r\n   */\r\n  onclick(result: fixedbutton.clickcallbackresult) {\r\n    alert(`${result.index === 0 ? \"取消\" : \"确定\"}事件`);\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-fixed-button': defineasynccomponent(() => import('@/components/yui/fixedbutton/fixedbutton.vue'))\r\n    \"y-fixed-button\": defineasynccomponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/fixedbutton/fixedbutton.vue\"\r\n        )\r\n    ),\r\n    \"y-page-container\": defineasynccomponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/pagecontainer/pagecontainer.vue\"\r\n        )\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new fixedbuttonservice();\r\n    return {\r\n      btnlabellist: [\"取消\", \"确定\"],\r\n      onclick: service.onclick.bind(service),\r\n    };\r\n  },});</script>\n\n# 顶部填充\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-page-container>\r\n      <template #header><y-search-bar :rowlist=\"rowlist\"\r\n                  v-model=\"searchrowvalueinfo\"\r\n                  @onsearch=\"oncatchsearch\"></y-search-bar>\r\n      </template>\r\n      内容区\r\n    </y-page-container>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent,ref,ref } from \"vue\";import \"./pagecontainer.scss\";import { fixedbutton } from \"../../../../../taro-yui-vue/src/components/fixedbutton/types/fixedbutton.d\";import { yinputbox } from '../../../../../taro-yui-vue/src/components/searchbar/components/inputbox/types/inputbox.d'import { ysearchbar, searchbareltype } from '../../../../../taro-yui-vue/src/components/searchbar/types/searchbar.d'\r\n\r\n/**\r\n * 底部固定button\r\n */class fixedbuttonservice {\r\n  /**\r\n   * 点击事件\r\n   */\r\n  onclick(result: fixedbutton.clickcallbackresult) {\r\n    alert(`${result.index === 0 ? \"取消\" : \"确定\"}事件`);\r\n  }\r\n\r\n  /**\r\n   * 表单行集合\r\n   */\r\n   rowlist: ref<ysearchbar.searchrowitem[]> = ref([\r\n      {\r\n        show: true,\r\n        label: '',\r\n        type: searchbareltype.input,\r\n        property: 'keyword',\r\n        options: <yinputbox.inputinfo>{\r\n          placeholder: '输入文字'\r\n        }\r\n      }\r\n    ])\r\n\r\n    /**\r\n     * 表单所有值，key名和searchrowlist中的property一致\r\n     * */\r\n    searchrowvalueinfo: ref<object> = ref({\r\n      keyword: '1111'\r\n    })\r\n\r\n    /**\r\n     * 重置\r\n     */\r\n    searchrowvalueinfoempty: object = {\r\n      keyword: ''\r\n    }\r\n\r\n    /**\r\n     * 搜索\r\n     */\r\n    oncatchsearch(params: object) {\r\n      this.searchrowvalueinfo.value = params === null ? {\r\n        ...this.searchrowvalueinfoempty\r\n      }  : this.searchrowvalueinfo.value\r\n      console.log('搜索结果', params)\r\n      console.log('搜索结果===',this.searchrowvalueinfo.value )\r\n    }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    \"y-page-container\": defineasynccomponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/pagecontainer/pagecontainer.vue\"\r\n        )\r\n    ),\r\n    \"y-search-bar\": defineasynccomponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/searchbar/searchbar.vue\"\r\n        )\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new fixedbuttonservice();\r\n    return {\r\n      btnlabellist: [\"取消\", \"确定\"],\r\n      onclick: service.onclick.bind(service),\r\n      rowlist: service.rowlist,\r\n      searchrowvalueinfo: service.searchrowvalueinfo,\r\n      oncatchsearch: service.oncatchsearch.bind(service)\r\n    };\r\n  },});</script>\n\n# 底部填充\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-page-container>\r\n      内容区\r\n      <template #footer>\r\n        <y-fixed-button :btnlabellist=\"btnlabellist\" @click=\"onclick\">\r\n      </y-fixed-button>\r\n      </template>\r\n    </y-page-container>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent,ref,ref } from \"vue\";import \"./pagecontainer.scss\";import { fixedbutton } from \"../../../../../taro-yui-vue/src/components/fixedbutton/types/fixedbutton.d\";import { yinputbox } from '../../../../../taro-yui-vue/src/components/searchbar/components/inputbox/types/inputbox.d'import { ysearchbar, searchbareltype } from '../../../../../taro-yui-vue/src/components/searchbar/types/searchbar.d'\r\n\r\n/**\r\n * 底部固定button\r\n */class fixedbuttonservice {\r\n  /**\r\n   * 点击事件\r\n   */\r\n  onclick(result: fixedbutton.clickcallbackresult) {\r\n    alert(`${result.index === 0 ? \"取消\" : \"确定\"}事件`);\r\n  }\r\n\r\n  /**\r\n   * 表单行集合\r\n   */\r\n   rowlist: ref<ysearchbar.searchrowitem[]> = ref([\r\n      {\r\n        show: true,\r\n        label: '',\r\n        type: searchbareltype.input,\r\n        property: 'keyword',\r\n        options: <yinputbox.inputinfo>{\r\n          placeholder: '输入文字'\r\n        }\r\n      }\r\n    ])\r\n\r\n    /**\r\n     * 表单所有值，key名和searchrowlist中的property一致\r\n     * */\r\n    searchrowvalueinfo: ref<object> = ref({\r\n      keyword: '1111'\r\n    })\r\n\r\n    /**\r\n     * 重置\r\n     */\r\n    searchrowvalueinfoempty: object = {\r\n      keyword: ''\r\n    }\r\n\r\n    /**\r\n     * 搜索\r\n     */\r\n    oncatchsearch(params: object) {\r\n      this.searchrowvalueinfo.value = params === null ? {\r\n        ...this.searchrowvalueinfoempty\r\n      }  : this.searchrowvalueinfo.value\r\n      console.log('搜索结果', params)\r\n      console.log('搜索结果===',this.searchrowvalueinfo.value )\r\n    }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-fixed-button': defineasynccomponent(() => import('@/components/yui/fixedbutton/fixedbutton.vue'))\r\n    \"y-fixed-button\": defineasynccomponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/fixedbutton/fixedbutton.vue\"\r\n        )\r\n    ),\r\n    \"y-page-container\": defineasynccomponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/pagecontainer/pagecontainer.vue\"\r\n        )\r\n    )\r\n  },\r\n  setup() {\r\n    const service = new fixedbuttonservice();\r\n    return {\r\n      btnlabellist: [\"取消\", \"确定\"],\r\n      onclick: service.onclick.bind(service),\r\n      rowlist: service.rowlist,\r\n      searchrowvalueinfo: service.searchrowvalueinfo,\r\n      oncatchsearch: service.oncatchsearch.bind(service)\r\n    };\r\n  },});</script>\n\n# 完整用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-page-container>\r\n      <template #header><y-search-bar :rowlist=\"rowlist\"\r\n                  v-model=\"searchrowvalueinfo\"\r\n                  @onsearch=\"oncatchsearch\"></y-search-bar>\r\n      </template>\r\n      <view>内容区1</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <view>内容区</view>\r\n      <template #footer>\r\n        <y-fixed-button :btnlabellist=\"btnlabellist\" @click=\"onclick\">\r\n      </y-fixed-button>\r\n      </template>\r\n    </y-page-container>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent,ref,ref } from \"vue\";import \"./pagecontainer.scss\";import { fixedbutton } from \"../../../../../taro-yui-vue/src/components/fixedbutton/types/fixedbutton.d\";import { yinputbox } from '../../../../../taro-yui-vue/src/components/searchbar/components/inputbox/types/inputbox.d'import { ysearchbar, searchbareltype } from '../../../../../taro-yui-vue/src/components/searchbar/types/searchbar.d'\r\n\r\n/**\r\n * 底部固定button\r\n */class fixedbuttonservice {\r\n  /**\r\n   * 点击事件\r\n   */\r\n  onclick(result: fixedbutton.clickcallbackresult) {\r\n    alert(`${result.index === 0 ? \"取消\" : \"确定\"}事件`);\r\n  }\r\n\r\n  /**\r\n   * 表单行集合\r\n   */\r\n   rowlist: ref<ysearchbar.searchrowitem[]> = ref([\r\n      {\r\n        show: true,\r\n        label: '',\r\n        type: searchbareltype.input,\r\n        property: 'keyword',\r\n        options: <yinputbox.inputinfo>{\r\n          placeholder: '输入文字'\r\n        }\r\n      }\r\n    ])\r\n\r\n    /**\r\n     * 表单所有值，key名和searchrowlist中的property一致\r\n     * */\r\n    searchrowvalueinfo: ref<object> = ref({\r\n      keyword: '1111'\r\n    })\r\n\r\n    /**\r\n     * 重置\r\n     */\r\n    searchrowvalueinfoempty: object = {\r\n      keyword: ''\r\n    }\r\n\r\n    /**\r\n     * 搜索\r\n     */\r\n    oncatchsearch(params: object) {\r\n      this.searchrowvalueinfo.value = params === null ? {\r\n        ...this.searchrowvalueinfoempty\r\n      }  : this.searchrowvalueinfo.value\r\n      console.log('搜索结果', params)\r\n      console.log('搜索结果===',this.searchrowvalueinfo.value )\r\n    }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-fixed-button': defineasynccomponent(() => import('@/components/yui/fixedbutton/fixedbutton.vue'))\r\n    \"y-fixed-button\": defineasynccomponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/fixedbutton/fixedbutton.vue\"\r\n        )\r\n    ),\r\n    \"y-page-container\": defineasynccomponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/pagecontainer/pagecontainer.vue\"\r\n        )\r\n    ),\r\n    \"y-search-bar\": defineasynccomponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/searchbar/searchbar.vue\"\r\n        )\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new fixedbuttonservice();\r\n    return {\r\n      btnlabellist: [\"取消\", \"确定\"],\r\n      onclick: service.onclick.bind(service),\r\n      rowlist: service.rowlist,\r\n      searchrowvalueinfo: service.searchrowvalueinfo,\r\n      oncatchsearch: service.oncatchsearch.bind(service)\r\n    };\r\n  },});</script>\n\n# 事件\n/**\n * 事件\n */\ntype events = {\n    /**\n     * 上拉触底事件\n     */\n    onscrolltolower: () => void\n}\n\n# slots\nname     说明   \nheader   头部   \nfooter   尾部",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "搜索栏 y-search-bar",
      "frontmatter": {},
      "regularPath": "/component/basic/searchBar.html",
      "relativePath": "component/basic/searchBar.md",
      "key": "v-1e2f9084",
      "path": "/component/basic/searchBar.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 176
        },
        {
          "level": 3,
          "title": "依赖组件",
          "slug": "依赖组件",
          "normalizedTitle": "依赖组件",
          "charIndex": 197
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 307
        },
        {
          "level": 3,
          "title": "有表单搜索",
          "slug": "有表单搜索",
          "normalizedTitle": "有表单搜索",
          "charIndex": 2316
        },
        {
          "level": 3,
          "title": "白色底",
          "slug": "白色底",
          "normalizedTitle": "白色底",
          "charIndex": 11541
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 10638
        },
        {
          "level": 3,
          "title": "事件",
          "slug": "事件",
          "normalizedTitle": "事件",
          "charIndex": 21333
        }
      ],
      "headersStr": "组件名称 依赖组件 基础用法 有表单搜索 白色底 属性 事件",
      "content": "# 搜索栏 y-search-bar\n输入关键字，并筛选条件进行搜索,支持插槽，有蓝色和白色款， 默认蓝色 [YFormElType.DATE_PICKER, YFormElType.DATE_TIME_PICKER, YFormElType.CUSTOM_SELECTOR, YFormElType.SELECTOR]支持清除配置，默认可清除\n\n# 组件名称\ny-search-bar\n\n# 依赖组件\n 1. y-input-box\n 2. y-date-picker\n 3. y-date-time-picker\n 4. y-custom-selector\n 5. y-form-item-picker\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"search-bar-container\">\r\n    <y-search-bar :rowList=\"rowList\"\r\n                  v-model=\"searchRowValueInfo\"\r\n                  @onSearch=\"onCatchSearch\"></y-search-bar>\r\n  </view></template>\r\n\r\n<script lang=\"ts\">import { defineComponent, defineAsyncComponent, ref, Ref } from \"vue\";import \"./searchBar.scss\";import { YInputBox } from '../../../../../taro-yui-vue/src/components/searchBar/components/inputBox/types/inputBox.d'import { YSearchBar, SearchBarElType } from '../../../../../taro-yui-vue/src/components/searchBar/types/searchBar.d'\r\n\r\nclass SearchBarService {\r\n  /**\r\n   * 表单行集合\r\n   */\r\n   rowList: Ref<YSearchBar.SearchRowItem[]> = ref([\r\n      {\r\n        show: true,\r\n        label: '',\r\n        type: SearchBarElType.INPUT,\r\n        property: 'keyWord',\r\n        options: <YInputBox.InputInfo>{\r\n          placeholder: '输入文字'\r\n        }\r\n      }\r\n    ])\r\n\r\n    /**\r\n     * 表单所有值，key名和searchRowList中的property一致\r\n     * */\r\n    searchRowValueInfo: Ref<Object> = ref({\r\n      keyWord: '1111'\r\n    })\r\n\r\n    /**\r\n     * 重置\r\n     */\r\n    searchRowValueInfoEmpty: Object = {\r\n      keyWord: ''\r\n    }\r\n\r\n    /**\r\n     * 搜索\r\n     */\r\n    onCatchSearch(params: Object) {\r\n      this.searchRowValueInfo.value = params === null ? {\r\n        ...this.searchRowValueInfoEmpty\r\n      }  : this.searchRowValueInfo.value\r\n      console.log('搜索结果', params)\r\n      console.log('搜索结果===',this.searchRowValueInfo.value )\r\n    }}export default defineComponent({\r\n  components: {\r\n    \"y-search-bar\": defineAsyncComponent(() => import(\"@/components/yui/searchBar/searchBar.vue\"))\r\n    // \"y-search-bar\": defineAsyncComponent(() => import(\"../../../../../taro-yui-vue/src/components/searchBar/searchBar.vue\"))\r\n  },\r\n  setup() {\r\n    const service = new SearchBarService()\r\n    return {\r\n      rowList: service.rowList,\r\n      searchRowValueInfo: service.searchRowValueInfo,\r\n      onCatchSearch: service.onCatchSearch.bind(service)\r\n    };\r\n  },});</script>\n\n# 有表单搜索\n<template>\r\n  <view v-reSize id=\"container\" class=\"multiple-search-bar\">\r\n    <y-search-bar :rowList=\"rowList\"\r\n                  v-model=\"modelValue\"\r\n                  @onSearch=\"onSearch\"\r\n                  @onClickBar=\"onCatchClickBar\"\r\n                  @onClear=\"onCatchClear\"\r\n                  @onClick=\"onClickRow\">\r\n    </y-search-bar>\r\n  </view></template>\r\n\r\n<script lang=\"ts\">\r\n\r\nimport { defineComponent, defineAsyncComponent, ref, Ref } from \"vue\";import \"./searchBar.scss\";import { YInputBox } from '../../../../../taro-yui-vue/src/components/searchBar/components/inputBox/types/inputBox.d'import { YCustomSelector } from '../../../../../taro-yui-vue/src/components/searchBar/components/customSelector/types/customSelector.d'import { YFormItemPicker } from '../../../../../taro-yui-vue/src/components/formItemPicker/types/formItemPicker.d'import { CalendarBasic, CalendarTypeEnum } from '../../../../../taro-yui-vue/src/components/calendar/calendarBasic/types/calendarBasic.d'import { YDateTimePicker } from '../../../../../taro-yui-vue/src/components/dateTimePicker/types/dateTimePicker.d'import { YSearchBar, SearchBarElType } from '../../../../../taro-yui-vue/src/components/searchBar/types/searchBar.d'import { YForm } from \"@/components/yui/form/types/form.d\";\r\n\r\nclass SearchBarService {\r\n  /**\r\n   * 表单行集合\r\n   * 集合第一个是搜索栏，其余是搜索表单\r\n   */\r\n  rowList: Ref<YSearchBar.SearchRowItem[]> = ref([\r\n    {\r\n      show: true,\r\n      label: \"日期时间选择器\",\r\n      property: \"dateKeyWord\",\r\n      type: SearchBarElType.DATE_TIME_PICKER,\r\n      options: <YDateTimePicker.timePickerOptions>{\r\n        placeholder: '日期时间选择器',\r\n        isMultiSelect: false,\r\n        canClear: true\r\n      }\r\n    },{\r\n      show: true,\r\n      label: '普通选择器',\r\n      type: SearchBarElType.SELECTOR,\r\n      property: 'selectorId',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        placeholder: '普通选择器',\r\n        optionList: [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n        canClear: true\r\n      }\r\n    },\r\n\r\n\r\n    {\r\n      show: true,\r\n      label: '输入文字',\r\n      type: SearchBarElType.INPUT,\r\n      property: 'keyWord',\r\n      options: <YInputBox.InputInfo>{\r\n        placeholder: '输入文字'\r\n      }\r\n    },\r\n\r\n    {\r\n      show: true,\r\n      label: \"日期范围选择器\",\r\n      property: \"multiTime\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '日期范围选择器',\r\n        isMultiSelect: true,\r\n        showToolBar: true,\r\n        canClear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"日期时间选择器\",\r\n      property: \"dateTime\",\r\n      type: SearchBarElType.DATE_TIME_PICKER,\r\n      options: <YDateTimePicker.timePickerOptions>{\r\n        placeholder: '日期时间选择器',\r\n        isMultiSelect: false,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年度选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"year\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '年度选择器',\r\n        type: CalendarTypeEnum.YEAR,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年度范围选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"multiYear\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '年度范围选择器',\r\n        type: CalendarTypeEnum.YEAR,\r\n        isMultiSelect: true\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年月选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"yearMonth\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '年月选择器',\r\n        type: CalendarTypeEnum.MONTH,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年月范围选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"multiYearMonth\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '年月范围选择器',\r\n        type: CalendarTypeEnum.MONTH,\r\n        isMultiSelect: true\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"季度选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"yearQuarter\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '季度选择器',\r\n        type: CalendarTypeEnum.QUARTER,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"季度范围选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"multiYearQuarter\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '季度范围选择器',\r\n        type: CalendarTypeEnum.QUARTER,\r\n        isMultiSelect: true\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"自定义选择器\",\r\n      type: SearchBarElType.CUSTOM_SELECTOR,\r\n      property: \"customSelectorStr\",\r\n      options: <YCustomSelector.CustomSelectorInfo>{\r\n        placeholder: \"自定义选择器\",\r\n        canClear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: '普通选择器',\r\n      type: SearchBarElType.SELECTOR,\r\n      property: 'selectorId',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        placeholder: '普通选择器',\r\n        optionList: [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n        canClear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: '多列选择器',\r\n      type: SearchBarElType.SELECTOR,\r\n      property: 'multiSelectorId',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        type: 'multiSelector',\r\n        placeholder: '多列选择器',\r\n        optionList: [\r\n          [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n          [{id: 11, label: 'ab1'}, {id: 13, label: 'ab2'}],\r\n        ],\r\n        // canClear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: '时分选择器',\r\n      type: SearchBarElType.SELECTOR,\r\n      property: 'time',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        type: 'time',\r\n        placeholder: '时分选择器',\r\n        canClear: false\r\n      },\r\n    },\r\n    {\r\n      show: true,\r\n      label: '地区选择器',\r\n      type: SearchBarElType.SELECTOR,\r\n      property: 'region',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        type: 'region',\r\n        placeholder: '地区选择器'\r\n        // canClear: false\r\n      },\r\n\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"单选\",\r\n      type: SearchBarElType.RADIO_GROUP,\r\n      property: \"radioValue\",\r\n      options: <YForm.FormItemRadioGroupOptions[]>[\r\n        {\r\n          label: \"强\",\r\n          value: 1\r\n        },\r\n        {\r\n          label: \"中\",\r\n          value: 2\r\n        },\r\n        {\r\n          label: \"弱\",\r\n          value: 3\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"多选\",\r\n      type: SearchBarElType.CHECKBOX_GROUP,\r\n      property: \"checkboxValueList\",\r\n      options: <YForm.FormItemCheckboxGroupOptions[]>[\r\n        {\r\n          label: \"添加\",\r\n          value: 1,\r\n        },\r\n        {\r\n          label: \"修改\",\r\n          value: 2,\r\n        },\r\n        {\r\n          label: \"删除\",\r\n          value: 3,\r\n        }\r\n      ]\r\n    }\r\n  ])\r\n\r\n  /**\r\n   * 表单所有值，key名和searchRowList中的property一致\r\n   * */\r\n  modelValue: Ref<Object> = ref({\r\n    dateKeyWord: '',\r\n    keyWord: '', // 搜索内容，默认空\r\n    date: '2021-01-22', // 日期选择器， 默认空\r\n    multiTime: ['2021-01-01', '2021-01-02'], // 日期范围选择器， 默认[]\r\n    dateTime: '2021-01-01 00:00:00', // 日期时间选择器， 默认空\r\n    year: '2015', // 年度范围选择器\r\n    multiYear: ['2011', '2018'], // 年度范围选择器\r\n    yearMonth: '2020-01', // 年月选择器，默认空\r\n    multiYearMonth: ['2020-05', '2020-07'], // 年月范围选择器，默认[]\r\n    yearQuarter: '2025-02', // 季度选择器，默认空\r\n    multiYearQuarter: ['2021-01', '2025-02'], // 季度范围选择器，默认[]\r\n    customSelectorStr: '22', // 自定义选择器， 默认空\r\n    selectorId: 0, // 普通选择器（id）, 默认0\r\n    multiSelectorId: [3,13], // 多列选择器（id[]）, 默认[]\r\n    time: '02:05', // 时间选择器（时:分）， 默认空\r\n    region: [], // 省市区选择器（['省', '市', '区']）, 默认[]\r\n    radioValue: 0, // 单选的value值，默认0\r\n    checkboxValueList: [1, 2], // 多选的value[],默认[]\r\n  })\r\n\r\n  /**\r\n   * 重置\r\n   * */\r\n  modelValueEmpty: Object = {\r\n    keyWord: '',\r\n    date: '',\r\n    multiTime: [],\r\n    dateTime: '',\r\n    customSelectorStr: '',\r\n    selectorId: 0,\r\n    multiSelectorId: [],\r\n    time: '',\r\n    region: []\r\n  }\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 搜索\r\n   */\r\n  onSearch(params: Object) {\r\n    this.modelValue.value = params === null ? {\r\n      ...this.modelValueEmpty\r\n    }  : this.modelValue.value\r\n    console.log('搜索结果===',this.modelValue.value )\r\n  }\r\n\r\n  /**\r\n   * 点击搜索bar 只有CUSTOM_SELECTOR组件才执行\r\n   * */\r\n  onCatchClickBar() {\r\n    // do sth.\r\n  }\r\n\r\n  /**\r\n   * 清除自定义下拉选择器\r\n   * @param property 组件值属性名\r\n   * */\r\n  onCatchClear(property: string) {\r\n    console.log('property', property)\r\n    // do sth.\r\n  }\r\n\r\n  /**\r\n   * 点击行\r\n   * @param index 第几行\r\n   */\r\n  onClickRow(index: number) {\r\n    alert(`点击的是第${index}行`)\r\n  }}export default defineComponent({\r\n  components: {\r\n    // \"y-search-bar\": defineAsyncComponent(() => import(\"../../../../../taro-yui-vue/src/components/searchBar/searchBar.vue\"))\r\n    \"y-search-bar\": defineAsyncComponent(() => import(\"@/components/yui/searchBar/searchBar.vue\"))\r\n  },\r\n  setup() {\r\n    const service = new SearchBarService()\r\n\r\n    return {\r\n      rowList: service.rowList,\r\n      modelValue: service.modelValue,\r\n      onSearch: service.onSearch.bind(service),\r\n      onCatchClickBar: service.onCatchClickBar.bind(service),\r\n      onCatchClear: service.onCatchClear.bind(service),\r\n      onClickRow: service.onClickRow.bind(service)\r\n    };\r\n  },});</script>\n\n# 白色底\n<template>\r\n  <view v-reSize id=\"container\" class=\"multiple-search-bar\">\r\n    <y-search-bar type=\"white\"\r\n                  :rowList=\"rowList\"\r\n                  v-model=\"modelValue\"\r\n                  @onSearch=\"onSearch\"\r\n                  @onClick=\"onClickRow\">\r\n      <view class=\"other-btn\">其他</view>\r\n    </y-search-bar>\r\n  </view></template>\r\n\r\n    <script lang=\"ts\">\r\n\r\n  import { defineComponent, defineAsyncComponent, ref, Ref } from \"vue\";import \"./searchBar.scss\";import { YInputBox } from '../../../../../taro-yui-vue/src/components/searchBar/components/inputBox/types/inputBox.d'import { YCustomSelector } from '../../../../../taro-yui-vue/src/components/searchBar/components/customSelector/types/customSelector.d'import { YFormItemPicker } from '../../../../../taro-yui-vue/src/components/formItemPicker/types/formItemPicker.d'\r\n  import {\r\n    CalendarBasic,\r\n    CalendarTypeEnum\r\n  } from '../../../../../taro-yui-vue/src/components/calendar/calendarBasic/types/calendarBasic.d'import { YDateTimePicker } from '../../../../../taro-yui-vue/src/components/dateTimePicker/types/dateTimePicker.d'import { YSearchBar, SearchBarElType } from '../../../../../taro-yui-vue/src/components/searchBar/types/searchBar.d'import { YForm } from \"@/components/yui/form/types/form.d\";\r\n\r\nclass SearchBarService {\r\n  /**\r\n   * 表单行集合\r\n   * 集合第一个是搜索栏，其余是搜索表单\r\n   */\r\n  rowList: Ref<YSearchBar.SearchRowItem[]> = ref([\r\n    {\r\n      show: true,\r\n      label: \"年月选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"yearMonth\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '年月选择器',\r\n        type: CalendarTypeEnum.MONTH,\r\n      }\r\n    },\r\n    {\r\n      show: false,\r\n      label: \"日期时间选择器\",\r\n      property: \"dateKeyWord\",\r\n      type: SearchBarElType.DATE_TIME_PICKER,\r\n      options: <YDateTimePicker.timePickerOptions>{\r\n        placeholder: '日期时间选择器',\r\n        isMultiSelect: false,\r\n      }\r\n    },\r\n    \r\n    {\r\n      show: true,\r\n      label: '输入文字',\r\n      type: SearchBarElType.INPUT,\r\n      property: 'keyWord',\r\n      options: <YInputBox.InputInfo>{\r\n        placeholder: '输入文字'\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"日期选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"date\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '日期选择器',\r\n        isMultiSelect: false,\r\n        showToolBar: true,\r\n        canClear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"日期范围选择器\",\r\n      property: \"multiTime\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '日期范围选择器',\r\n        isMultiSelect: true,\r\n        showToolBar: true,\r\n        canClear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"日期时间选择器\",\r\n      property: \"dateTime\",\r\n      type: SearchBarElType.DATE_TIME_PICKER,\r\n      options: <YDateTimePicker.timePickerOptions>{\r\n        placeholder: '日期时间选择器',\r\n        isMultiSelect: false,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年度选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"year\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '年度选择器',\r\n        type: CalendarTypeEnum.YEAR,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年度范围选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"multiYear\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '年度范围选择器',\r\n        type: CalendarTypeEnum.YEAR,\r\n        isMultiSelect: true\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年月选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"yearMonth\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '年月选择器',\r\n        type: CalendarTypeEnum.MONTH,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年月范围选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"multiYearMonth\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '年月范围选择器',\r\n        type: CalendarTypeEnum.MONTH,\r\n        isMultiSelect: true\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"季度选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"yearQuarter\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '季度选择器',\r\n        type: CalendarTypeEnum.QUARTER,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"季度范围选择器\",\r\n      type: SearchBarElType.DATE_PICKER,\r\n      property: \"multiYearQuarter\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        placeholder: '季度范围选择器',\r\n        type: CalendarTypeEnum.QUARTER,\r\n        isMultiSelect: true\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"自定义选择器\",\r\n      type: SearchBarElType.CUSTOM_SELECTOR,\r\n      property: \"customSelectorStr\",\r\n      options: <YCustomSelector.CustomSelectorInfo>{\r\n        placeholder: \"自定义选择器\",\r\n        canClear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: '普通选择器',\r\n      type: SearchBarElType.SELECTOR,\r\n      property: 'selectorId',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        placeholder: '普通选择器',\r\n        optionList: [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n        canClear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: '多列选择器',\r\n      type: SearchBarElType.SELECTOR,\r\n      property: 'multiSelectorId',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        type: 'multiSelector',\r\n        placeholder: '多列选择器',\r\n        optionList: [\r\n          [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n          [{id: 11, label: 'ab1'}, {id: 13, label: 'ab2'}],\r\n        ],\r\n        // canClear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: '时分选择器',\r\n      type: SearchBarElType.SELECTOR,\r\n      property: 'time',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        type: 'time',\r\n        placeholder: '时分选择器',\r\n        canClear: false\r\n      },\r\n    },\r\n    {\r\n      show: true,\r\n      label: '地区选择器',\r\n      type: SearchBarElType.SELECTOR,\r\n      property: 'region',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        type: 'region',\r\n        placeholder: '地区选择器'\r\n        // canClear: false\r\n      },\r\n    \r\n    },\r\n    {\r\n      show: true,\r\n      label: \"单选\",\r\n      type: SearchBarElType.RADIO_GROUP,\r\n      property: \"radioValue\",\r\n      options: <YForm.FormItemRadioGroupOptions[]>[\r\n        {\r\n          label: \"强\",\r\n          value: 1\r\n        },\r\n        {\r\n          label: \"中\",\r\n          value: 2\r\n        },\r\n        {\r\n          label: \"弱\",\r\n          value: 3\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"多选\",\r\n      type: SearchBarElType.CHECKBOX_GROUP,\r\n      property: \"checkboxValueList\",\r\n      options: <YForm.FormItemCheckboxGroupOptions[]>[\r\n        {\r\n          label: \"添加\",\r\n          value: 1,\r\n        },\r\n        {\r\n          label: \"修改\",\r\n          value: 2,\r\n        },\r\n        {\r\n          label: \"删除\",\r\n          value: 3,\r\n        }\r\n      ]\r\n    }\r\n  ])\r\n\r\n  /**\r\n   * 表单所有值，key名和searchRowList中的property一致\r\n   * */\r\n  modelValue: Ref<Object> = ref({\r\n    dateKeyWord: '',\r\n    keyWord: '', // 搜索内容，默认空\r\n    date: '2021-01-22', // 日期选择器， 默认空\r\n    multiTime: ['2021-01-01', '2021-01-02'], // 日期范围选择器， 默认[]\r\n    dateTime: '2021-01-01 00:00:00', // 日期时间选择器， 默认空\r\n    year: '2015', // 年度范围选择器\r\n    multiYear: ['2011', '2018'], // 年度范围选择器\r\n    yearMonth: '2020-01', // 年月选择器，默认空\r\n    multiYearMonth: ['2020-05', '2020-07'], // 年月范围选择器，默认[]\r\n    yearQuarter: '2025-02', // 季度选择器，默认空\r\n    multiYearQuarter: ['2021-01', '2025-02'], // 季度范围选择器，默认[]\r\n    customSelectorStr: '22', // 自定义选择器， 默认空\r\n    selectorId: 0, // 普通选择器（id）, 默认0\r\n    multiSelectorId: [3,13], // 多列选择器（id[]）, 默认[]\r\n    time: '02:05', // 时间选择器（时:分）， 默认空\r\n    region: [], // 省市区选择器（['省', '市', '区']）, 默认[]\r\n    radioValue: 0, // 单选的value值，默认0\r\n    checkboxValueList: [1, 2], // 多选的value[],默认[]\r\n  })\r\n\r\n  /**\r\n   * 重置\r\n   * */\r\n  modelValueEmpty = {\r\n    keyWord: '',\r\n    date: '',\r\n    multiTime: [],\r\n    dateTime: '',\r\n    customSelectorStr: '',\r\n    selectorId: 0,\r\n    multiSelectorId: [],\r\n    time: '',\r\n    region: []\r\n  }\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 搜索\r\n   */\r\n  onSearch(params) {\r\n    this.modelValue.value = params === null ? {\r\n      ...this.modelValueEmpty\r\n    }  : this.modelValue.value\r\n    console.log('搜索结果===',this.modelValue.value )\r\n  }\r\n\r\n  /**\r\n   * 点击行\r\n   * @param index 第几行\r\n   */\r\n  onClickRow(index: number) {\r\n    alert(`点击的是第${index}行`)\r\n  }}export default defineComponent({\r\n  components: {\r\n    \"y-search-bar\": defineAsyncComponent(() => import(\"../../../../../taro-yui-vue/src/components/searchBar/searchBar.vue\"))\r\n    // \"y-search-bar\": defineAsyncComponent(() => import(\"@/components/yui/searchBar/searchBar.vue\"))\r\n  },\r\n  setup() {\r\n    const service = new SearchBarService()\r\n\r\n    return {\r\n      rowList: service.rowList,\r\n      modelValue: service.modelValue,\r\n      onSearch: service.onSearch.bind(service),\r\n      onClickRow: service.onClickRow.bind(service)\r\n    };\r\n  },});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface Props extends Record<string, unknown> {\n  /**\n   * 类型：white，默认蓝色\n   */\n  type?: string\n\n\n  /**\n   * 表单行列表\n   */\n  rowList: SearchRowItem[]\n\n  /**\n   * 绑定数据\n   */\n  modelValue: Object\n}\n\n/**\n * 搜索项\n */\nexport interface SearchRowItem {\n\n  /**\n   * 是否显示\n   */\n  show: boolean\n\n  /**\n   * 行左侧名称\n   */\n  label: string\n\n  /**\n   * 行右侧组件类型\n   */\n  type: SearchBarElType\n\n  /**\n   * 绑定的字段, 与modelValue关联\n   */\n  property: string\n\n  /**\n   * 参数\n   */\n  options?: YInputBox.InputInfo | YCustomSelector.CustomSelectorInfo | YFormItemPicker.FormItemPickerInfo \n  | CalendarBasic.CalendarOptions | YDateTimePicker.timePickerOptions | YForm.FormItemCheckboxGroupOptions | YForm.FormItemRadioGroupOptions[]\n}\n\n# 事件\ninterface Events{\n\n  /**\n   * 点击自定义下拉框触发\n   */\n  onClick: number\n}",
      "normalizedContent": "# 搜索栏 y-search-bar\n输入关键字，并筛选条件进行搜索,支持插槽，有蓝色和白色款， 默认蓝色 [yformeltype.date_picker, yformeltype.date_time_picker, yformeltype.custom_selector, yformeltype.selector]支持清除配置，默认可清除\n\n# 组件名称\ny-search-bar\n\n# 依赖组件\n 1. y-input-box\n 2. y-date-picker\n 3. y-date-time-picker\n 4. y-custom-selector\n 5. y-form-item-picker\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"search-bar-container\">\r\n    <y-search-bar :rowlist=\"rowlist\"\r\n                  v-model=\"searchrowvalueinfo\"\r\n                  @onsearch=\"oncatchsearch\"></y-search-bar>\r\n  </view></template>\r\n\r\n<script lang=\"ts\">import { definecomponent, defineasynccomponent, ref, ref } from \"vue\";import \"./searchbar.scss\";import { yinputbox } from '../../../../../taro-yui-vue/src/components/searchbar/components/inputbox/types/inputbox.d'import { ysearchbar, searchbareltype } from '../../../../../taro-yui-vue/src/components/searchbar/types/searchbar.d'\r\n\r\nclass searchbarservice {\r\n  /**\r\n   * 表单行集合\r\n   */\r\n   rowlist: ref<ysearchbar.searchrowitem[]> = ref([\r\n      {\r\n        show: true,\r\n        label: '',\r\n        type: searchbareltype.input,\r\n        property: 'keyword',\r\n        options: <yinputbox.inputinfo>{\r\n          placeholder: '输入文字'\r\n        }\r\n      }\r\n    ])\r\n\r\n    /**\r\n     * 表单所有值，key名和searchrowlist中的property一致\r\n     * */\r\n    searchrowvalueinfo: ref<object> = ref({\r\n      keyword: '1111'\r\n    })\r\n\r\n    /**\r\n     * 重置\r\n     */\r\n    searchrowvalueinfoempty: object = {\r\n      keyword: ''\r\n    }\r\n\r\n    /**\r\n     * 搜索\r\n     */\r\n    oncatchsearch(params: object) {\r\n      this.searchrowvalueinfo.value = params === null ? {\r\n        ...this.searchrowvalueinfoempty\r\n      }  : this.searchrowvalueinfo.value\r\n      console.log('搜索结果', params)\r\n      console.log('搜索结果===',this.searchrowvalueinfo.value )\r\n    }}export default definecomponent({\r\n  components: {\r\n    \"y-search-bar\": defineasynccomponent(() => import(\"@/components/yui/searchbar/searchbar.vue\"))\r\n    // \"y-search-bar\": defineasynccomponent(() => import(\"../../../../../taro-yui-vue/src/components/searchbar/searchbar.vue\"))\r\n  },\r\n  setup() {\r\n    const service = new searchbarservice()\r\n    return {\r\n      rowlist: service.rowlist,\r\n      searchrowvalueinfo: service.searchrowvalueinfo,\r\n      oncatchsearch: service.oncatchsearch.bind(service)\r\n    };\r\n  },});</script>\n\n# 有表单搜索\n<template>\r\n  <view v-resize id=\"container\" class=\"multiple-search-bar\">\r\n    <y-search-bar :rowlist=\"rowlist\"\r\n                  v-model=\"modelvalue\"\r\n                  @onsearch=\"onsearch\"\r\n                  @onclickbar=\"oncatchclickbar\"\r\n                  @onclear=\"oncatchclear\"\r\n                  @onclick=\"onclickrow\">\r\n    </y-search-bar>\r\n  </view></template>\r\n\r\n<script lang=\"ts\">\r\n\r\nimport { definecomponent, defineasynccomponent, ref, ref } from \"vue\";import \"./searchbar.scss\";import { yinputbox } from '../../../../../taro-yui-vue/src/components/searchbar/components/inputbox/types/inputbox.d'import { ycustomselector } from '../../../../../taro-yui-vue/src/components/searchbar/components/customselector/types/customselector.d'import { yformitempicker } from '../../../../../taro-yui-vue/src/components/formitempicker/types/formitempicker.d'import { calendarbasic, calendartypeenum } from '../../../../../taro-yui-vue/src/components/calendar/calendarbasic/types/calendarbasic.d'import { ydatetimepicker } from '../../../../../taro-yui-vue/src/components/datetimepicker/types/datetimepicker.d'import { ysearchbar, searchbareltype } from '../../../../../taro-yui-vue/src/components/searchbar/types/searchbar.d'import { yform } from \"@/components/yui/form/types/form.d\";\r\n\r\nclass searchbarservice {\r\n  /**\r\n   * 表单行集合\r\n   * 集合第一个是搜索栏，其余是搜索表单\r\n   */\r\n  rowlist: ref<ysearchbar.searchrowitem[]> = ref([\r\n    {\r\n      show: true,\r\n      label: \"日期时间选择器\",\r\n      property: \"datekeyword\",\r\n      type: searchbareltype.date_time_picker,\r\n      options: <ydatetimepicker.timepickeroptions>{\r\n        placeholder: '日期时间选择器',\r\n        ismultiselect: false,\r\n        canclear: true\r\n      }\r\n    },{\r\n      show: true,\r\n      label: '普通选择器',\r\n      type: searchbareltype.selector,\r\n      property: 'selectorid',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        placeholder: '普通选择器',\r\n        optionlist: [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n        canclear: true\r\n      }\r\n    },\r\n\r\n\r\n    {\r\n      show: true,\r\n      label: '输入文字',\r\n      type: searchbareltype.input,\r\n      property: 'keyword',\r\n      options: <yinputbox.inputinfo>{\r\n        placeholder: '输入文字'\r\n      }\r\n    },\r\n\r\n    {\r\n      show: true,\r\n      label: \"日期范围选择器\",\r\n      property: \"multitime\",\r\n      type: searchbareltype.date_picker,\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '日期范围选择器',\r\n        ismultiselect: true,\r\n        showtoolbar: true,\r\n        canclear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"日期时间选择器\",\r\n      property: \"datetime\",\r\n      type: searchbareltype.date_time_picker,\r\n      options: <ydatetimepicker.timepickeroptions>{\r\n        placeholder: '日期时间选择器',\r\n        ismultiselect: false,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年度选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"year\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '年度选择器',\r\n        type: calendartypeenum.year,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年度范围选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"multiyear\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '年度范围选择器',\r\n        type: calendartypeenum.year,\r\n        ismultiselect: true\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年月选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"yearmonth\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '年月选择器',\r\n        type: calendartypeenum.month,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年月范围选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"multiyearmonth\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '年月范围选择器',\r\n        type: calendartypeenum.month,\r\n        ismultiselect: true\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"季度选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"yearquarter\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '季度选择器',\r\n        type: calendartypeenum.quarter,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"季度范围选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"multiyearquarter\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '季度范围选择器',\r\n        type: calendartypeenum.quarter,\r\n        ismultiselect: true\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"自定义选择器\",\r\n      type: searchbareltype.custom_selector,\r\n      property: \"customselectorstr\",\r\n      options: <ycustomselector.customselectorinfo>{\r\n        placeholder: \"自定义选择器\",\r\n        canclear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: '普通选择器',\r\n      type: searchbareltype.selector,\r\n      property: 'selectorid',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        placeholder: '普通选择器',\r\n        optionlist: [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n        canclear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: '多列选择器',\r\n      type: searchbareltype.selector,\r\n      property: 'multiselectorid',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        type: 'multiselector',\r\n        placeholder: '多列选择器',\r\n        optionlist: [\r\n          [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n          [{id: 11, label: 'ab1'}, {id: 13, label: 'ab2'}],\r\n        ],\r\n        // canclear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: '时分选择器',\r\n      type: searchbareltype.selector,\r\n      property: 'time',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        type: 'time',\r\n        placeholder: '时分选择器',\r\n        canclear: false\r\n      },\r\n    },\r\n    {\r\n      show: true,\r\n      label: '地区选择器',\r\n      type: searchbareltype.selector,\r\n      property: 'region',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        type: 'region',\r\n        placeholder: '地区选择器'\r\n        // canclear: false\r\n      },\r\n\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"单选\",\r\n      type: searchbareltype.radio_group,\r\n      property: \"radiovalue\",\r\n      options: <yform.formitemradiogroupoptions[]>[\r\n        {\r\n          label: \"强\",\r\n          value: 1\r\n        },\r\n        {\r\n          label: \"中\",\r\n          value: 2\r\n        },\r\n        {\r\n          label: \"弱\",\r\n          value: 3\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"多选\",\r\n      type: searchbareltype.checkbox_group,\r\n      property: \"checkboxvaluelist\",\r\n      options: <yform.formitemcheckboxgroupoptions[]>[\r\n        {\r\n          label: \"添加\",\r\n          value: 1,\r\n        },\r\n        {\r\n          label: \"修改\",\r\n          value: 2,\r\n        },\r\n        {\r\n          label: \"删除\",\r\n          value: 3,\r\n        }\r\n      ]\r\n    }\r\n  ])\r\n\r\n  /**\r\n   * 表单所有值，key名和searchrowlist中的property一致\r\n   * */\r\n  modelvalue: ref<object> = ref({\r\n    datekeyword: '',\r\n    keyword: '', // 搜索内容，默认空\r\n    date: '2021-01-22', // 日期选择器， 默认空\r\n    multitime: ['2021-01-01', '2021-01-02'], // 日期范围选择器， 默认[]\r\n    datetime: '2021-01-01 00:00:00', // 日期时间选择器， 默认空\r\n    year: '2015', // 年度范围选择器\r\n    multiyear: ['2011', '2018'], // 年度范围选择器\r\n    yearmonth: '2020-01', // 年月选择器，默认空\r\n    multiyearmonth: ['2020-05', '2020-07'], // 年月范围选择器，默认[]\r\n    yearquarter: '2025-02', // 季度选择器，默认空\r\n    multiyearquarter: ['2021-01', '2025-02'], // 季度范围选择器，默认[]\r\n    customselectorstr: '22', // 自定义选择器， 默认空\r\n    selectorid: 0, // 普通选择器（id）, 默认0\r\n    multiselectorid: [3,13], // 多列选择器（id[]）, 默认[]\r\n    time: '02:05', // 时间选择器（时:分）， 默认空\r\n    region: [], // 省市区选择器（['省', '市', '区']）, 默认[]\r\n    radiovalue: 0, // 单选的value值，默认0\r\n    checkboxvaluelist: [1, 2], // 多选的value[],默认[]\r\n  })\r\n\r\n  /**\r\n   * 重置\r\n   * */\r\n  modelvalueempty: object = {\r\n    keyword: '',\r\n    date: '',\r\n    multitime: [],\r\n    datetime: '',\r\n    customselectorstr: '',\r\n    selectorid: 0,\r\n    multiselectorid: [],\r\n    time: '',\r\n    region: []\r\n  }\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 搜索\r\n   */\r\n  onsearch(params: object) {\r\n    this.modelvalue.value = params === null ? {\r\n      ...this.modelvalueempty\r\n    }  : this.modelvalue.value\r\n    console.log('搜索结果===',this.modelvalue.value )\r\n  }\r\n\r\n  /**\r\n   * 点击搜索bar 只有custom_selector组件才执行\r\n   * */\r\n  oncatchclickbar() {\r\n    // do sth.\r\n  }\r\n\r\n  /**\r\n   * 清除自定义下拉选择器\r\n   * @param property 组件值属性名\r\n   * */\r\n  oncatchclear(property: string) {\r\n    console.log('property', property)\r\n    // do sth.\r\n  }\r\n\r\n  /**\r\n   * 点击行\r\n   * @param index 第几行\r\n   */\r\n  onclickrow(index: number) {\r\n    alert(`点击的是第${index}行`)\r\n  }}export default definecomponent({\r\n  components: {\r\n    // \"y-search-bar\": defineasynccomponent(() => import(\"../../../../../taro-yui-vue/src/components/searchbar/searchbar.vue\"))\r\n    \"y-search-bar\": defineasynccomponent(() => import(\"@/components/yui/searchbar/searchbar.vue\"))\r\n  },\r\n  setup() {\r\n    const service = new searchbarservice()\r\n\r\n    return {\r\n      rowlist: service.rowlist,\r\n      modelvalue: service.modelvalue,\r\n      onsearch: service.onsearch.bind(service),\r\n      oncatchclickbar: service.oncatchclickbar.bind(service),\r\n      oncatchclear: service.oncatchclear.bind(service),\r\n      onclickrow: service.onclickrow.bind(service)\r\n    };\r\n  },});</script>\n\n# 白色底\n<template>\r\n  <view v-resize id=\"container\" class=\"multiple-search-bar\">\r\n    <y-search-bar type=\"white\"\r\n                  :rowlist=\"rowlist\"\r\n                  v-model=\"modelvalue\"\r\n                  @onsearch=\"onsearch\"\r\n                  @onclick=\"onclickrow\">\r\n      <view class=\"other-btn\">其他</view>\r\n    </y-search-bar>\r\n  </view></template>\r\n\r\n    <script lang=\"ts\">\r\n\r\n  import { definecomponent, defineasynccomponent, ref, ref } from \"vue\";import \"./searchbar.scss\";import { yinputbox } from '../../../../../taro-yui-vue/src/components/searchbar/components/inputbox/types/inputbox.d'import { ycustomselector } from '../../../../../taro-yui-vue/src/components/searchbar/components/customselector/types/customselector.d'import { yformitempicker } from '../../../../../taro-yui-vue/src/components/formitempicker/types/formitempicker.d'\r\n  import {\r\n    calendarbasic,\r\n    calendartypeenum\r\n  } from '../../../../../taro-yui-vue/src/components/calendar/calendarbasic/types/calendarbasic.d'import { ydatetimepicker } from '../../../../../taro-yui-vue/src/components/datetimepicker/types/datetimepicker.d'import { ysearchbar, searchbareltype } from '../../../../../taro-yui-vue/src/components/searchbar/types/searchbar.d'import { yform } from \"@/components/yui/form/types/form.d\";\r\n\r\nclass searchbarservice {\r\n  /**\r\n   * 表单行集合\r\n   * 集合第一个是搜索栏，其余是搜索表单\r\n   */\r\n  rowlist: ref<ysearchbar.searchrowitem[]> = ref([\r\n    {\r\n      show: true,\r\n      label: \"年月选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"yearmonth\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '年月选择器',\r\n        type: calendartypeenum.month,\r\n      }\r\n    },\r\n    {\r\n      show: false,\r\n      label: \"日期时间选择器\",\r\n      property: \"datekeyword\",\r\n      type: searchbareltype.date_time_picker,\r\n      options: <ydatetimepicker.timepickeroptions>{\r\n        placeholder: '日期时间选择器',\r\n        ismultiselect: false,\r\n      }\r\n    },\r\n    \r\n    {\r\n      show: true,\r\n      label: '输入文字',\r\n      type: searchbareltype.input,\r\n      property: 'keyword',\r\n      options: <yinputbox.inputinfo>{\r\n        placeholder: '输入文字'\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"日期选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"date\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '日期选择器',\r\n        ismultiselect: false,\r\n        showtoolbar: true,\r\n        canclear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"日期范围选择器\",\r\n      property: \"multitime\",\r\n      type: searchbareltype.date_picker,\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '日期范围选择器',\r\n        ismultiselect: true,\r\n        showtoolbar: true,\r\n        canclear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"日期时间选择器\",\r\n      property: \"datetime\",\r\n      type: searchbareltype.date_time_picker,\r\n      options: <ydatetimepicker.timepickeroptions>{\r\n        placeholder: '日期时间选择器',\r\n        ismultiselect: false,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年度选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"year\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '年度选择器',\r\n        type: calendartypeenum.year,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年度范围选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"multiyear\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '年度范围选择器',\r\n        type: calendartypeenum.year,\r\n        ismultiselect: true\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年月选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"yearmonth\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '年月选择器',\r\n        type: calendartypeenum.month,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"年月范围选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"multiyearmonth\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '年月范围选择器',\r\n        type: calendartypeenum.month,\r\n        ismultiselect: true\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"季度选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"yearquarter\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '季度选择器',\r\n        type: calendartypeenum.quarter,\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"季度范围选择器\",\r\n      type: searchbareltype.date_picker,\r\n      property: \"multiyearquarter\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        placeholder: '季度范围选择器',\r\n        type: calendartypeenum.quarter,\r\n        ismultiselect: true\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"自定义选择器\",\r\n      type: searchbareltype.custom_selector,\r\n      property: \"customselectorstr\",\r\n      options: <ycustomselector.customselectorinfo>{\r\n        placeholder: \"自定义选择器\",\r\n        canclear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: '普通选择器',\r\n      type: searchbareltype.selector,\r\n      property: 'selectorid',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        placeholder: '普通选择器',\r\n        optionlist: [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n        canclear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: '多列选择器',\r\n      type: searchbareltype.selector,\r\n      property: 'multiselectorid',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        type: 'multiselector',\r\n        placeholder: '多列选择器',\r\n        optionlist: [\r\n          [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n          [{id: 11, label: 'ab1'}, {id: 13, label: 'ab2'}],\r\n        ],\r\n        // canclear: false\r\n      }\r\n    },\r\n    {\r\n      show: true,\r\n      label: '时分选择器',\r\n      type: searchbareltype.selector,\r\n      property: 'time',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        type: 'time',\r\n        placeholder: '时分选择器',\r\n        canclear: false\r\n      },\r\n    },\r\n    {\r\n      show: true,\r\n      label: '地区选择器',\r\n      type: searchbareltype.selector,\r\n      property: 'region',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        type: 'region',\r\n        placeholder: '地区选择器'\r\n        // canclear: false\r\n      },\r\n    \r\n    },\r\n    {\r\n      show: true,\r\n      label: \"单选\",\r\n      type: searchbareltype.radio_group,\r\n      property: \"radiovalue\",\r\n      options: <yform.formitemradiogroupoptions[]>[\r\n        {\r\n          label: \"强\",\r\n          value: 1\r\n        },\r\n        {\r\n          label: \"中\",\r\n          value: 2\r\n        },\r\n        {\r\n          label: \"弱\",\r\n          value: 3\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      show: true,\r\n      label: \"多选\",\r\n      type: searchbareltype.checkbox_group,\r\n      property: \"checkboxvaluelist\",\r\n      options: <yform.formitemcheckboxgroupoptions[]>[\r\n        {\r\n          label: \"添加\",\r\n          value: 1,\r\n        },\r\n        {\r\n          label: \"修改\",\r\n          value: 2,\r\n        },\r\n        {\r\n          label: \"删除\",\r\n          value: 3,\r\n        }\r\n      ]\r\n    }\r\n  ])\r\n\r\n  /**\r\n   * 表单所有值，key名和searchrowlist中的property一致\r\n   * */\r\n  modelvalue: ref<object> = ref({\r\n    datekeyword: '',\r\n    keyword: '', // 搜索内容，默认空\r\n    date: '2021-01-22', // 日期选择器， 默认空\r\n    multitime: ['2021-01-01', '2021-01-02'], // 日期范围选择器， 默认[]\r\n    datetime: '2021-01-01 00:00:00', // 日期时间选择器， 默认空\r\n    year: '2015', // 年度范围选择器\r\n    multiyear: ['2011', '2018'], // 年度范围选择器\r\n    yearmonth: '2020-01', // 年月选择器，默认空\r\n    multiyearmonth: ['2020-05', '2020-07'], // 年月范围选择器，默认[]\r\n    yearquarter: '2025-02', // 季度选择器，默认空\r\n    multiyearquarter: ['2021-01', '2025-02'], // 季度范围选择器，默认[]\r\n    customselectorstr: '22', // 自定义选择器， 默认空\r\n    selectorid: 0, // 普通选择器（id）, 默认0\r\n    multiselectorid: [3,13], // 多列选择器（id[]）, 默认[]\r\n    time: '02:05', // 时间选择器（时:分）， 默认空\r\n    region: [], // 省市区选择器（['省', '市', '区']）, 默认[]\r\n    radiovalue: 0, // 单选的value值，默认0\r\n    checkboxvaluelist: [1, 2], // 多选的value[],默认[]\r\n  })\r\n\r\n  /**\r\n   * 重置\r\n   * */\r\n  modelvalueempty = {\r\n    keyword: '',\r\n    date: '',\r\n    multitime: [],\r\n    datetime: '',\r\n    customselectorstr: '',\r\n    selectorid: 0,\r\n    multiselectorid: [],\r\n    time: '',\r\n    region: []\r\n  }\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 搜索\r\n   */\r\n  onsearch(params) {\r\n    this.modelvalue.value = params === null ? {\r\n      ...this.modelvalueempty\r\n    }  : this.modelvalue.value\r\n    console.log('搜索结果===',this.modelvalue.value )\r\n  }\r\n\r\n  /**\r\n   * 点击行\r\n   * @param index 第几行\r\n   */\r\n  onclickrow(index: number) {\r\n    alert(`点击的是第${index}行`)\r\n  }}export default definecomponent({\r\n  components: {\r\n    \"y-search-bar\": defineasynccomponent(() => import(\"../../../../../taro-yui-vue/src/components/searchbar/searchbar.vue\"))\r\n    // \"y-search-bar\": defineasynccomponent(() => import(\"@/components/yui/searchbar/searchbar.vue\"))\r\n  },\r\n  setup() {\r\n    const service = new searchbarservice()\r\n\r\n    return {\r\n      rowlist: service.rowlist,\r\n      modelvalue: service.modelvalue,\r\n      onsearch: service.onsearch.bind(service),\r\n      onclickrow: service.onclickrow.bind(service)\r\n    };\r\n  },});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface props extends record<string, unknown> {\n  /**\n   * 类型：white，默认蓝色\n   */\n  type?: string\n\n\n  /**\n   * 表单行列表\n   */\n  rowlist: searchrowitem[]\n\n  /**\n   * 绑定数据\n   */\n  modelvalue: object\n}\n\n/**\n * 搜索项\n */\nexport interface searchrowitem {\n\n  /**\n   * 是否显示\n   */\n  show: boolean\n\n  /**\n   * 行左侧名称\n   */\n  label: string\n\n  /**\n   * 行右侧组件类型\n   */\n  type: searchbareltype\n\n  /**\n   * 绑定的字段, 与modelvalue关联\n   */\n  property: string\n\n  /**\n   * 参数\n   */\n  options?: yinputbox.inputinfo | ycustomselector.customselectorinfo | yformitempicker.formitempickerinfo \n  | calendarbasic.calendaroptions | ydatetimepicker.timepickeroptions | yform.formitemcheckboxgroupoptions | yform.formitemradiogroupoptions[]\n}\n\n# 事件\ninterface events{\n\n  /**\n   * 点击自定义下拉框触发\n   */\n  onclick: number\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "段落 y-section",
      "frontmatter": {},
      "regularPath": "/component/basic/section.html",
      "relativePath": "component/basic/section.md",
      "key": "v-f3654c78",
      "path": "/component/basic/section.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 21
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 39
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 672
        }
      ],
      "headersStr": "组件名称 基础用法 属性",
      "content": "# 段落 y-section\n段落\n\n# 组件名称\ny-section\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-section title=\"付款信息\" tip=\"最多9张\">\r\n      内容区\r\n    </y-section>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent } from \"vue\";import \"./section.scss\";export default defineComponent({\r\n  components: {\r\n    // 'y-section': defineAsyncComponent(() => import('@/components/yui/section/section.vue'))\r\n    \"y-section\": defineAsyncComponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/section/section.vue\"\r\n        )\r\n    )\r\n  },\r\n  setup() {\r\n    return {\r\n    };\r\n  },});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface Props {\n    /**\n     * 标题\n     */\n    title: string\n\n    /**\n     * 提示信息\n     */\n    tip: string\n}",
      "normalizedContent": "# 段落 y-section\n段落\n\n# 组件名称\ny-section\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-section title=\"付款信息\" tip=\"最多9张\">\r\n      内容区\r\n    </y-section>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent } from \"vue\";import \"./section.scss\";export default definecomponent({\r\n  components: {\r\n    // 'y-section': defineasynccomponent(() => import('@/components/yui/section/section.vue'))\r\n    \"y-section\": defineasynccomponent(\r\n      () =>\r\n        import(\r\n          \"../../../../../taro-yui-vue/src/components/section/section.vue\"\r\n        )\r\n    )\r\n  },\r\n  setup() {\r\n    return {\r\n    };\r\n  },});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface props {\n    /**\n     * 标题\n     */\n    title: string\n\n    /**\n     * 提示信息\n     */\n    tip: string\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "步骤条 y-steps",
      "frontmatter": {},
      "regularPath": "/component/basic/steps.html",
      "relativePath": "component/basic/steps.md",
      "key": "v-2945b304",
      "path": "/component/basic/steps.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 21
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 37
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 1039
        }
      ],
      "headersStr": "组件名称 基础用法 属性",
      "content": "# 步骤条 y-steps\n步骤条\n\n# 组件名称\ny-steps\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-steps :options=\"options\"></y-steps>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent } from 'vue'import './steps.scss'\r\n\r\nclass StepsService {\r\n  /**\r\n   * 步骤item\r\n   */\r\n  options = [\r\n    {\r\n      className: 'order_success', // 成功\r\n      label: '步骤1',\r\n      isActive: false\r\n    },\r\n    {\r\n      className: 'order_error', // 错误\r\n      label: '步骤2',\r\n      isActive: false\r\n    },\r\n    {\r\n      className: 'order_process', // 当前步骤\r\n      label: '步骤3',\r\n      isActive: true\r\n    },\r\n    {\r\n      className: 'order_default', // 默认\r\n      label: '步骤4',\r\n      isActive: false\r\n    }\r\n  ]\r\n  constructor() {\r\n\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-steps': defineAsyncComponent(() => import('@/components/yui/steps/steps.vue'))\r\n  },\r\n  setup() {\r\n    const service = new StepsService()\r\n    return {\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface YStepsProps extends Record<string, unknown> {\n\n  /**\n   * 步骤条集合\n   */\n  options: StepItem[]\n\n  /***\n   * 当前index\n   */\n  current: number\n}\n\n/***\n * 步骤条item\n */\nexport interface StepItem extends Record<string, unknown> {\n  /**\n   * 类名，在页面中定义图标背景图,线和文字颜色\n   */\n  className: string\n  /**\n   * 标题\n   */\n  label: string\n\n  /***\n   * 是否当前步骤\n   */\n  isActive: boolean\n}",
      "normalizedContent": "# 步骤条 y-steps\n步骤条\n\n# 组件名称\ny-steps\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-steps :options=\"options\"></y-steps>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent } from 'vue'import './steps.scss'\r\n\r\nclass stepsservice {\r\n  /**\r\n   * 步骤item\r\n   */\r\n  options = [\r\n    {\r\n      classname: 'order_success', // 成功\r\n      label: '步骤1',\r\n      isactive: false\r\n    },\r\n    {\r\n      classname: 'order_error', // 错误\r\n      label: '步骤2',\r\n      isactive: false\r\n    },\r\n    {\r\n      classname: 'order_process', // 当前步骤\r\n      label: '步骤3',\r\n      isactive: true\r\n    },\r\n    {\r\n      classname: 'order_default', // 默认\r\n      label: '步骤4',\r\n      isactive: false\r\n    }\r\n  ]\r\n  constructor() {\r\n\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-steps': defineasynccomponent(() => import('@/components/yui/steps/steps.vue'))\r\n  },\r\n  setup() {\r\n    const service = new stepsservice()\r\n    return {\r\n      options: service.options,\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface ystepsprops extends record<string, unknown> {\n\n  /**\n   * 步骤条集合\n   */\n  options: stepitem[]\n\n  /***\n   * 当前index\n   */\n  current: number\n}\n\n/***\n * 步骤条item\n */\nexport interface stepitem extends record<string, unknown> {\n  /**\n   * 类名，在页面中定义图标背景图,线和文字颜色\n   */\n  classname: string\n  /**\n   * 标题\n   */\n  label: string\n\n  /***\n   * 是否当前步骤\n   */\n  isactive: boolean\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "表格 y-table",
      "frontmatter": {},
      "regularPath": "/component/basic/table.html",
      "relativePath": "component/basic/table.md",
      "key": "v-17d4a524",
      "path": "/component/basic/table.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 26
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 42
        },
        {
          "level": 3,
          "title": "固定列, 宽度一定要是px",
          "slug": "固定列-宽度一定要是px",
          "normalizedTitle": "固定列, 宽度一定要是px",
          "charIndex": 2072
        },
        {
          "level": 3,
          "title": "总计, 第一列不可为数字",
          "slug": "总计-第一列不可为数字",
          "normalizedTitle": "总计, 第一列不可为数字",
          "charIndex": 7702
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 10254
        },
        {
          "level": 3,
          "title": "事件",
          "slug": "事件",
          "normalizedTitle": "事件",
          "charIndex": 11189
        }
      ],
      "headersStr": "组件名称 基础用法 固定列, 宽度一定要是px 总计, 第一列不可为数字 属性 事件",
      "content": "# 表格 y-table\n表格,支持slot\n\n# 组件名称\ny-table\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-table :options=\"options\"\r\n             :data=\"data\"\r\n             @onSort=\"onCatchSort\"\r\n             @onRowClick=\"onCatchRowClick\">\r\n      <template #name=\"scope\">\r\n        插槽-{{scope.info}}\r\n      </template>\r\n    </y-table>\r\n\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent } from 'vue'import './table.scss'import { YTable, SortType } from '@/components/yui/table/types/table.d'\r\n\r\nclass TableService {\r\n  /**\r\n   * 表头\r\n   * */\r\n  options: YTable.TableHeadItem[] = [\r\n    {\r\n      width: '25%',\r\n      label: '列名1',\r\n      columnKey: 'name',\r\n      sort: SortType.NONE,\r\n    },\r\n    {\r\n      width: '25%',\r\n      label: '列名2',\r\n      columnKey: 'age',\r\n      sort: SortType.DESC\r\n    },\r\n    {\r\n      width: '50%',\r\n      label: '列名3',\r\n      columnKey: 'desc',\r\n      sort: SortType.ASC\r\n    },\r\n  ]\r\n\r\n  /**\r\n   * 表数据\r\n   * */\r\n  data: YTable.DataType = [\r\n    {\r\n      name: 'aa',\r\n      age: 1,\r\n      desc: '描述1'\r\n    },{\r\n      name: 'bb',\r\n      age: 2,\r\n      desc: '描述2'\r\n    },{\r\n      name: 'cc',\r\n      age: 3,\r\n      desc: '描述3'\r\n    }\r\n  ]\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /***\r\n   *获取组件排序：''(不排序) desc(降序)，asc(升序)\r\n   */\r\n  onCatchSort(param: YTable.SortCallBackResult) {\r\n    console.log(`点击的列名是${param.columnKey}，顺序是：${param.sort}`)\r\n  }\r\n\r\n  /***\r\n   * 点击行\r\n   * @param index 行索引\r\n   */\r\n  onCatchRowClick(index: number) {\r\n    console.log(`点击的是第${index}行`)\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-table': defineAsyncComponent(() => import('@/components/yui/table/table.vue'))\r\n    // 'y-table': defineAsyncComponent(() => import('../../../../taro-yui-vue/src/components/table/table.vue'))\r\n  },\r\n  setup() {\r\n    const service = new TableService()\r\n    return {\r\n      options: service.options,\r\n      data: service.data,\r\n      onCatchSort: service.onCatchSort.bind(service),\r\n      onCatchRowClick: service.onCatchRowClick.bind(service)\r\n    };\r\n  }});</script>\n\n# 固定列, 宽度一定要是px\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-table :options=\"options\"\r\n             :data=\"data\"\r\n             @onSort=\"onCatchSort\"\r\n             @onRowClick=\"onCatchRowClick\" @onScrollToLower=\"onCatchScrollToLower\">\r\n\r\n        <template #name=\"scope\">\r\n          插槽-{{scope.info}}\r\n        </template>\r\n\r\n    </y-table>\r\n\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent,ref,Ref } from 'vue'import './table.scss'import { YTable, SortType, FixedDirectionEnum } from '@/components/yui/table/types/table.d'\r\n\r\nclass TableService {\r\n\r\n  /**\r\n   * 表头\r\n   * */\r\n  options: Ref<YTable.TableHeadItem[]> = ref([\r\n    {\r\n      width: '100px',\r\n      label: '客户名称',\r\n      columnKey: 'infoName',\r\n      fixed: FixedDirectionEnum.LEFT\r\n    },\r\n    {\r\n      width: '80px',\r\n      label: '订单数',\r\n      columnKey: 'count',\r\n      sort: SortType.NONE\r\n    },\r\n    {\r\n      width: '80px',\r\n      label: '销售额',\r\n      columnKey: 'amount',\r\n      sort: SortType.DESC\r\n    },\r\n    {\r\n      width: '80px',\r\n      label: '已回款额',\r\n      columnKey: 'amountReceived',\r\n      sort: SortType.NONE\r\n    },\r\n    {\r\n      width: '80px',\r\n      label: '待回款额',\r\n      columnKey: 'waitAmountReceive',\r\n      sort: SortType.NONE\r\n    },\r\n    {\r\n      width: '130px',\r\n      label: '未发货商品销售额',\r\n      columnKey: 'waitStockOutMoney',\r\n      sort: SortType.NONE\r\n    },\r\n    {\r\n      width: '130px',\r\n      label: '已发货商品销售额',\r\n      columnKey: 'stockOutMoney',\r\n      sort: SortType.NONE\r\n    },\r\n    {\r\n      width: '120px',\r\n      label: '已发货商品成本',\r\n      columnKey: 'stockOutCost',\r\n      sort: SortType.NONE\r\n    },\r\n    {\r\n      width: '120px',\r\n      label: '已发货商品利润',\r\n      columnKey: 'stockOutProfit',\r\n      sort: SortType.NONE\r\n    },\r\n  ])\r\n\r\n  /**\r\n   * 表数据\r\n   * */\r\n  data: YTable.DataType = JSON.parse('[{\"infoId\":2,\"stockOutCost\":0.13,\"stockOutProfit\":119.87,\"infoName\":\"大仙2号公司\",\"count\":3,\"amount\":600,\"amountReceived\":141,\"waitAmountReceive\":459,\"waitStockOutMoney\":480,\"stockOutMoney\":120},{\"infoId\":40,\"stockOutCost\":0,\"stockOutProfit\":0,\"infoName\":\"测试客户zxt-3\",\"count\":1,\"amount\":120,\"amountReceived\":108,\"waitAmountReceive\":12,\"waitStockOutMoney\":120,\"stockOutMoney\":0},{\"infoId\":25,\"stockOutCost\":0,\"stockOutProfit\":0,\"infoName\":\"大仙3号公司\",\"count\":1,\"amount\":120,\"amountReceived\":0,\"waitAmountReceive\":120,\"waitStockOutMoney\":120,\"stockOutMoney\":0},{\"infoId\":2,\"stockOutCost\":0.13,\"stockOutProfit\":119.87,\"infoName\":\"大仙2号公司\",\"count\":3,\"amount\":600,\"amountReceived\":141,\"waitAmountReceive\":459,\"waitStockOutMoney\":480,\"stockOutMoney\":120},{\"infoId\":40,\"stockOutCost\":0,\"stockOutProfit\":0,\"infoName\":\"测试客户zxt-3\",\"count\":1,\"amount\":120,\"amountReceived\":108,\"waitAmountReceive\":12,\"waitStockOutMoney\":120,\"stockOutMoney\":0},{\"infoId\":25,\"stockOutCost\":0,\"stockOutProfit\":0,\"infoName\":\"大仙3号公司\",\"count\":1,\"amount\":120,\"amountReceived\":0,\"waitAmountReceive\":120,\"waitStockOutMoney\":120,\"stockOutMoney\":0},{\"infoId\":2,\"stockOutCost\":0.13,\"stockOutProfit\":119.87,\"infoName\":\"大仙2号公司\",\"count\":3,\"amount\":600,\"amountReceived\":141,\"waitAmountReceive\":459,\"waitStockOutMoney\":480,\"stockOutMoney\":120},{\"infoId\":40,\"stockOutCost\":0,\"stockOutProfit\":0,\"infoName\":\"测试客户zxt-3\",\"count\":1,\"amount\":120,\"amountReceived\":108,\"waitAmountReceive\":12,\"waitStockOutMoney\":120,\"stockOutMoney\":0},{\"infoId\":25,\"stockOutCost\":0,\"stockOutProfit\":0,\"infoName\":\"大仙3号公司\",\"count\":1,\"amount\":120,\"amountReceived\":0,\"waitAmountReceive\":120,\"waitStockOutMoney\":120,\"stockOutMoney\":0},{\"infoId\":2,\"stockOutCost\":0.13,\"stockOutProfit\":119.87,\"infoName\":\"大仙2号公司\",\"count\":3,\"amount\":600,\"amountReceived\":141,\"waitAmountReceive\":459,\"waitStockOutMoney\":480,\"stockOutMoney\":120},{\"infoId\":40,\"stockOutCost\":0,\"stockOutProfit\":0,\"infoName\":\"测试客户zxt-3\",\"count\":1,\"amount\":120,\"amountReceived\":108,\"waitAmountReceive\":12,\"waitStockOutMoney\":120,\"stockOutMoney\":0},{\"infoId\":25,\"stockOutCost\":0,\"stockOutProfit\":0,\"infoName\":\"大仙3号公司\",\"count\":1,\"amount\":120,\"amountReceived\":0,\"waitAmountReceive\":120,\"waitStockOutMoney\":120,\"stockOutMoney\":0},{\"infoId\":2,\"stockOutCost\":0.13,\"stockOutProfit\":119.87,\"infoName\":\"大仙2号公司\",\"count\":3,\"amount\":600,\"amountReceived\":141,\"waitAmountReceive\":459,\"waitStockOutMoney\":480,\"stockOutMoney\":120},{\"infoId\":40,\"stockOutCost\":0,\"stockOutProfit\":0,\"infoName\":\"测试客户zxt-3\",\"count\":1,\"amount\":120,\"amountReceived\":108,\"waitAmountReceive\":12,\"waitStockOutMoney\":120,\"stockOutMoney\":0},{\"infoId\":25,\"stockOutCost\":0,\"stockOutProfit\":0,\"infoName\":\"大仙3号公司\",\"count\":1,\"amount\":120,\"amountReceived\":0,\"waitAmountReceive\":120,\"waitStockOutMoney\":120,\"stockOutMoney\":0}]')\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /***\r\n   *获取组件排序：''(不排序) desc(降序)，asc(升序)\r\n   */\r\n  onCatchSort(param: YTable.SortCallBackResult) {\r\n    console.log(`点击的列名是${param.columnKey}，顺序是：${param.sort}`)\r\n  }\r\n\r\n  /***\r\n   * 点击行\r\n   * @param index 行索引\r\n   */\r\n  onCatchRowClick(index: number) {\r\n    console.log(`点击的是第${index}行`)\r\n  }\r\n\r\n  /**\r\n   * 滚动到底部\r\n   */\r\n  onCatchScrollToLower() {\r\n    console.log('到底啦')\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-table': defineAsyncComponent(() => import('@/components/yui/table/table.vue'))\r\n    'y-table': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/table/table.vue'))\r\n  },\r\n  setup() {\r\n    const service = new TableService()\r\n    return {\r\n      options: service.options,\r\n      data: service.data,\r\n      onCatchSort: service.onCatchSort.bind(service),\r\n      onCatchRowClick: service.onCatchRowClick.bind(service),\r\n      onCatchScrollToLower: service.onCatchScrollToLower.bind(service)\r\n    };\r\n  }});</script>\n\n# 总计, 第一列不可为数字\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-table :options=\"options\"\r\n             :data=\"data\"\r\n             :summary=\"SummaryType.TOP\"\r\n             @onSort=\"onCatchSort\"\r\n             @onRowClick=\"onCatchRowClick\">\r\n      <template #name=\"scope\">\r\n        插槽-{{scope.info}}\r\n      </template>\r\n    </y-table>\r\n\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent } from 'vue'import './table.scss'import { YTable, SortType, SummaryType } from '@/components/yui/table/types/table.d'\r\n\r\nclass TableService {\r\n  /**\r\n   * 表头\r\n   * */\r\n  options: YTable.TableHeadItem[] = [\r\n    {\r\n      width: '200px',\r\n      label: '姓名',\r\n      columnKey: 'name'\r\n    },\r\n    {\r\n      width: '200px',\r\n      label: '年龄',\r\n      columnKey: 'age',\r\n      sort: SortType.DESC\r\n    },\r\n    {\r\n      width: '200px',\r\n      label: '金额',\r\n      columnKey: 'money',\r\n      sort: SortType.NONE\r\n    }\r\n  ]\r\n\r\n  /**\r\n   * 表数据\r\n   * */\r\n  data: YTable.DataType = [\r\n    {\r\n      name: '合计',\r\n      age: 6,\r\n      desc: '描述1',\r\n      money: 58\r\n    },{\r\n      name: 'aa',\r\n      age: 1,\r\n      desc: '描述1描述',\r\n      money: 10\r\n    },{\r\n      name: 'bb',\r\n      age: 2,\r\n      desc: '描述2',\r\n      money: 34\r\n    },{\r\n      name: 'cc',\r\n      age: 3,\r\n      desc: '描述3',\r\n      money: 14\r\n    },{\r\n      name: 'aa',\r\n      age: 1,\r\n      desc: '描述1',\r\n      money: 10\r\n    },{\r\n      name: 'bb',\r\n      age: 2,\r\n      desc: '描述2',\r\n      money: 34\r\n    },{\r\n      name: 'cc',\r\n      age: 3,\r\n      desc: '描述3',\r\n      money: 14\r\n    }\r\n  ]\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /***\r\n   *获取组件排序：''(不排序) desc(降序)，asc(升序)\r\n   */\r\n  onCatchSort(param: YTable.SortCallBackResult) {\r\n    console.log(`点击的列名是${param.columnKey}，顺序是：${param.sort}`)\r\n  }\r\n\r\n  /***\r\n   * 点击行\r\n   * @param index 行索引\r\n   */\r\n  onCatchRowClick(index: number) {\r\n    console.log(`点击的是第${index}行`)\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-table': defineAsyncComponent(() => import('@/components/yui/table/table.vue'))\r\n    // 'y-table': defineAsyncComponent(() => import('@/components/table/table.vue'))\r\n    'y-table': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/table/table.vue'))\r\n  },\r\n  setup() {\r\n    const service = new TableService()\r\n    return {\r\n      SummaryType,\r\n      options: service.options,\r\n      data: service.data,\r\n      onCatchSort: service.onCatchSort.bind(service),\r\n      onCatchRowClick: service.onCatchRowClick.bind(service)\r\n    };\r\n  }});</script>\n\n# 属性\n\nexport type DataType = { [key: string]: string | number | object | Array<string | number | object> }[]\n\n/**\n * 属性\n */\nexport interface YTableProps extends Record<string, unknown> {\n  \n  /***\n   * 表头\n   */\n  options: TableHeadItem[]\n\n  /**\n   * 表内容\n   */\n  data: DataType[]\n\n  /**\n   * 总计显示位置\n   */\n  summary?: SummaryType\n}\n\n/**\n * 表头item\n */\nexport interface TableHeadItem extends Record<string, unknown> {\n  /**\n   * 列宽度，百分数，默认等距\n   * 如果设置，每列都要设置，\n   */\n  width?: string\n  /**\n   * 列名称\n   */\n  label: string\n\n  /***\n   * 列key\n   */\n  columnKey: string\n\n  /**\n   * 排序, sort(不排序) desc(降序)，asc(升序)\n   */\n  sort?: SortType\n\n  /**\n   * 固定位置\n   */\n  fixed?: FixedDirectionEnum\n}\n\n/**\n * 列固定位置\n */\nexport enum FixedDirectionEnum {\n  /**\n   * 左\n   */\n  LEFT = 'left',\n\n  /**\n   * 右\n   */\n  RIGHT = 'right',\n}\n\n/**\n * 统计所在行\n */\nexport enum SummaryType {\n  /**\n   * 第一行\n   */\n  TOP = 'top',\n\n  /**\n   * 最后一行\n   */\n  BOTTOM = 'bottom'\n}\n\n# 事件\n/**\n * 点击排序回调结果\n */\nexport interface SortCallBackResult extends Record<string, unknown> {\n  /**\n   * 所在列名\n   */\n  columnKey: string\n\n  /**\n   * 顺序： ''(不排序) desc(降序)，asc(升序)\n   */\n  sort: string\n}\n\n/**\n * 行点击回调结果\n */\nexport interface RowClickCallBackResult extends Record<string, unknown> {\n\n  /**\n   * 行下标，从0开始\n   */\n   index: number\n}\n\n/**\n * 事件\n */\ninterface Event {\n\n  /**\n   * 排序事件\n   */\n  onSort: SortCallBackResult\n\n  /**\n   * 行点击事件\n   */\n  onRowClick:RowClickCallBackResult\n}",
      "normalizedContent": "# 表格 y-table\n表格,支持slot\n\n# 组件名称\ny-table\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-table :options=\"options\"\r\n             :data=\"data\"\r\n             @onsort=\"oncatchsort\"\r\n             @onrowclick=\"oncatchrowclick\">\r\n      <template #name=\"scope\">\r\n        插槽-{{scope.info}}\r\n      </template>\r\n    </y-table>\r\n\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent } from 'vue'import './table.scss'import { ytable, sorttype } from '@/components/yui/table/types/table.d'\r\n\r\nclass tableservice {\r\n  /**\r\n   * 表头\r\n   * */\r\n  options: ytable.tableheaditem[] = [\r\n    {\r\n      width: '25%',\r\n      label: '列名1',\r\n      columnkey: 'name',\r\n      sort: sorttype.none,\r\n    },\r\n    {\r\n      width: '25%',\r\n      label: '列名2',\r\n      columnkey: 'age',\r\n      sort: sorttype.desc\r\n    },\r\n    {\r\n      width: '50%',\r\n      label: '列名3',\r\n      columnkey: 'desc',\r\n      sort: sorttype.asc\r\n    },\r\n  ]\r\n\r\n  /**\r\n   * 表数据\r\n   * */\r\n  data: ytable.datatype = [\r\n    {\r\n      name: 'aa',\r\n      age: 1,\r\n      desc: '描述1'\r\n    },{\r\n      name: 'bb',\r\n      age: 2,\r\n      desc: '描述2'\r\n    },{\r\n      name: 'cc',\r\n      age: 3,\r\n      desc: '描述3'\r\n    }\r\n  ]\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /***\r\n   *获取组件排序：''(不排序) desc(降序)，asc(升序)\r\n   */\r\n  oncatchsort(param: ytable.sortcallbackresult) {\r\n    console.log(`点击的列名是${param.columnkey}，顺序是：${param.sort}`)\r\n  }\r\n\r\n  /***\r\n   * 点击行\r\n   * @param index 行索引\r\n   */\r\n  oncatchrowclick(index: number) {\r\n    console.log(`点击的是第${index}行`)\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-table': defineasynccomponent(() => import('@/components/yui/table/table.vue'))\r\n    // 'y-table': defineasynccomponent(() => import('../../../../taro-yui-vue/src/components/table/table.vue'))\r\n  },\r\n  setup() {\r\n    const service = new tableservice()\r\n    return {\r\n      options: service.options,\r\n      data: service.data,\r\n      oncatchsort: service.oncatchsort.bind(service),\r\n      oncatchrowclick: service.oncatchrowclick.bind(service)\r\n    };\r\n  }});</script>\n\n# 固定列, 宽度一定要是px\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-table :options=\"options\"\r\n             :data=\"data\"\r\n             @onsort=\"oncatchsort\"\r\n             @onrowclick=\"oncatchrowclick\" @onscrolltolower=\"oncatchscrolltolower\">\r\n\r\n        <template #name=\"scope\">\r\n          插槽-{{scope.info}}\r\n        </template>\r\n\r\n    </y-table>\r\n\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent,ref,ref } from 'vue'import './table.scss'import { ytable, sorttype, fixeddirectionenum } from '@/components/yui/table/types/table.d'\r\n\r\nclass tableservice {\r\n\r\n  /**\r\n   * 表头\r\n   * */\r\n  options: ref<ytable.tableheaditem[]> = ref([\r\n    {\r\n      width: '100px',\r\n      label: '客户名称',\r\n      columnkey: 'infoname',\r\n      fixed: fixeddirectionenum.left\r\n    },\r\n    {\r\n      width: '80px',\r\n      label: '订单数',\r\n      columnkey: 'count',\r\n      sort: sorttype.none\r\n    },\r\n    {\r\n      width: '80px',\r\n      label: '销售额',\r\n      columnkey: 'amount',\r\n      sort: sorttype.desc\r\n    },\r\n    {\r\n      width: '80px',\r\n      label: '已回款额',\r\n      columnkey: 'amountreceived',\r\n      sort: sorttype.none\r\n    },\r\n    {\r\n      width: '80px',\r\n      label: '待回款额',\r\n      columnkey: 'waitamountreceive',\r\n      sort: sorttype.none\r\n    },\r\n    {\r\n      width: '130px',\r\n      label: '未发货商品销售额',\r\n      columnkey: 'waitstockoutmoney',\r\n      sort: sorttype.none\r\n    },\r\n    {\r\n      width: '130px',\r\n      label: '已发货商品销售额',\r\n      columnkey: 'stockoutmoney',\r\n      sort: sorttype.none\r\n    },\r\n    {\r\n      width: '120px',\r\n      label: '已发货商品成本',\r\n      columnkey: 'stockoutcost',\r\n      sort: sorttype.none\r\n    },\r\n    {\r\n      width: '120px',\r\n      label: '已发货商品利润',\r\n      columnkey: 'stockoutprofit',\r\n      sort: sorttype.none\r\n    },\r\n  ])\r\n\r\n  /**\r\n   * 表数据\r\n   * */\r\n  data: ytable.datatype = json.parse('[{\"infoid\":2,\"stockoutcost\":0.13,\"stockoutprofit\":119.87,\"infoname\":\"大仙2号公司\",\"count\":3,\"amount\":600,\"amountreceived\":141,\"waitamountreceive\":459,\"waitstockoutmoney\":480,\"stockoutmoney\":120},{\"infoid\":40,\"stockoutcost\":0,\"stockoutprofit\":0,\"infoname\":\"测试客户zxt-3\",\"count\":1,\"amount\":120,\"amountreceived\":108,\"waitamountreceive\":12,\"waitstockoutmoney\":120,\"stockoutmoney\":0},{\"infoid\":25,\"stockoutcost\":0,\"stockoutprofit\":0,\"infoname\":\"大仙3号公司\",\"count\":1,\"amount\":120,\"amountreceived\":0,\"waitamountreceive\":120,\"waitstockoutmoney\":120,\"stockoutmoney\":0},{\"infoid\":2,\"stockoutcost\":0.13,\"stockoutprofit\":119.87,\"infoname\":\"大仙2号公司\",\"count\":3,\"amount\":600,\"amountreceived\":141,\"waitamountreceive\":459,\"waitstockoutmoney\":480,\"stockoutmoney\":120},{\"infoid\":40,\"stockoutcost\":0,\"stockoutprofit\":0,\"infoname\":\"测试客户zxt-3\",\"count\":1,\"amount\":120,\"amountreceived\":108,\"waitamountreceive\":12,\"waitstockoutmoney\":120,\"stockoutmoney\":0},{\"infoid\":25,\"stockoutcost\":0,\"stockoutprofit\":0,\"infoname\":\"大仙3号公司\",\"count\":1,\"amount\":120,\"amountreceived\":0,\"waitamountreceive\":120,\"waitstockoutmoney\":120,\"stockoutmoney\":0},{\"infoid\":2,\"stockoutcost\":0.13,\"stockoutprofit\":119.87,\"infoname\":\"大仙2号公司\",\"count\":3,\"amount\":600,\"amountreceived\":141,\"waitamountreceive\":459,\"waitstockoutmoney\":480,\"stockoutmoney\":120},{\"infoid\":40,\"stockoutcost\":0,\"stockoutprofit\":0,\"infoname\":\"测试客户zxt-3\",\"count\":1,\"amount\":120,\"amountreceived\":108,\"waitamountreceive\":12,\"waitstockoutmoney\":120,\"stockoutmoney\":0},{\"infoid\":25,\"stockoutcost\":0,\"stockoutprofit\":0,\"infoname\":\"大仙3号公司\",\"count\":1,\"amount\":120,\"amountreceived\":0,\"waitamountreceive\":120,\"waitstockoutmoney\":120,\"stockoutmoney\":0},{\"infoid\":2,\"stockoutcost\":0.13,\"stockoutprofit\":119.87,\"infoname\":\"大仙2号公司\",\"count\":3,\"amount\":600,\"amountreceived\":141,\"waitamountreceive\":459,\"waitstockoutmoney\":480,\"stockoutmoney\":120},{\"infoid\":40,\"stockoutcost\":0,\"stockoutprofit\":0,\"infoname\":\"测试客户zxt-3\",\"count\":1,\"amount\":120,\"amountreceived\":108,\"waitamountreceive\":12,\"waitstockoutmoney\":120,\"stockoutmoney\":0},{\"infoid\":25,\"stockoutcost\":0,\"stockoutprofit\":0,\"infoname\":\"大仙3号公司\",\"count\":1,\"amount\":120,\"amountreceived\":0,\"waitamountreceive\":120,\"waitstockoutmoney\":120,\"stockoutmoney\":0},{\"infoid\":2,\"stockoutcost\":0.13,\"stockoutprofit\":119.87,\"infoname\":\"大仙2号公司\",\"count\":3,\"amount\":600,\"amountreceived\":141,\"waitamountreceive\":459,\"waitstockoutmoney\":480,\"stockoutmoney\":120},{\"infoid\":40,\"stockoutcost\":0,\"stockoutprofit\":0,\"infoname\":\"测试客户zxt-3\",\"count\":1,\"amount\":120,\"amountreceived\":108,\"waitamountreceive\":12,\"waitstockoutmoney\":120,\"stockoutmoney\":0},{\"infoid\":25,\"stockoutcost\":0,\"stockoutprofit\":0,\"infoname\":\"大仙3号公司\",\"count\":1,\"amount\":120,\"amountreceived\":0,\"waitamountreceive\":120,\"waitstockoutmoney\":120,\"stockoutmoney\":0}]')\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /***\r\n   *获取组件排序：''(不排序) desc(降序)，asc(升序)\r\n   */\r\n  oncatchsort(param: ytable.sortcallbackresult) {\r\n    console.log(`点击的列名是${param.columnkey}，顺序是：${param.sort}`)\r\n  }\r\n\r\n  /***\r\n   * 点击行\r\n   * @param index 行索引\r\n   */\r\n  oncatchrowclick(index: number) {\r\n    console.log(`点击的是第${index}行`)\r\n  }\r\n\r\n  /**\r\n   * 滚动到底部\r\n   */\r\n  oncatchscrolltolower() {\r\n    console.log('到底啦')\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-table': defineasynccomponent(() => import('@/components/yui/table/table.vue'))\r\n    'y-table': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/table/table.vue'))\r\n  },\r\n  setup() {\r\n    const service = new tableservice()\r\n    return {\r\n      options: service.options,\r\n      data: service.data,\r\n      oncatchsort: service.oncatchsort.bind(service),\r\n      oncatchrowclick: service.oncatchrowclick.bind(service),\r\n      oncatchscrolltolower: service.oncatchscrolltolower.bind(service)\r\n    };\r\n  }});</script>\n\n# 总计, 第一列不可为数字\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-table :options=\"options\"\r\n             :data=\"data\"\r\n             :summary=\"summarytype.top\"\r\n             @onsort=\"oncatchsort\"\r\n             @onrowclick=\"oncatchrowclick\">\r\n      <template #name=\"scope\">\r\n        插槽-{{scope.info}}\r\n      </template>\r\n    </y-table>\r\n\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent } from 'vue'import './table.scss'import { ytable, sorttype, summarytype } from '@/components/yui/table/types/table.d'\r\n\r\nclass tableservice {\r\n  /**\r\n   * 表头\r\n   * */\r\n  options: ytable.tableheaditem[] = [\r\n    {\r\n      width: '200px',\r\n      label: '姓名',\r\n      columnkey: 'name'\r\n    },\r\n    {\r\n      width: '200px',\r\n      label: '年龄',\r\n      columnkey: 'age',\r\n      sort: sorttype.desc\r\n    },\r\n    {\r\n      width: '200px',\r\n      label: '金额',\r\n      columnkey: 'money',\r\n      sort: sorttype.none\r\n    }\r\n  ]\r\n\r\n  /**\r\n   * 表数据\r\n   * */\r\n  data: ytable.datatype = [\r\n    {\r\n      name: '合计',\r\n      age: 6,\r\n      desc: '描述1',\r\n      money: 58\r\n    },{\r\n      name: 'aa',\r\n      age: 1,\r\n      desc: '描述1描述',\r\n      money: 10\r\n    },{\r\n      name: 'bb',\r\n      age: 2,\r\n      desc: '描述2',\r\n      money: 34\r\n    },{\r\n      name: 'cc',\r\n      age: 3,\r\n      desc: '描述3',\r\n      money: 14\r\n    },{\r\n      name: 'aa',\r\n      age: 1,\r\n      desc: '描述1',\r\n      money: 10\r\n    },{\r\n      name: 'bb',\r\n      age: 2,\r\n      desc: '描述2',\r\n      money: 34\r\n    },{\r\n      name: 'cc',\r\n      age: 3,\r\n      desc: '描述3',\r\n      money: 14\r\n    }\r\n  ]\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /***\r\n   *获取组件排序：''(不排序) desc(降序)，asc(升序)\r\n   */\r\n  oncatchsort(param: ytable.sortcallbackresult) {\r\n    console.log(`点击的列名是${param.columnkey}，顺序是：${param.sort}`)\r\n  }\r\n\r\n  /***\r\n   * 点击行\r\n   * @param index 行索引\r\n   */\r\n  oncatchrowclick(index: number) {\r\n    console.log(`点击的是第${index}行`)\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-table': defineasynccomponent(() => import('@/components/yui/table/table.vue'))\r\n    // 'y-table': defineasynccomponent(() => import('@/components/table/table.vue'))\r\n    'y-table': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/table/table.vue'))\r\n  },\r\n  setup() {\r\n    const service = new tableservice()\r\n    return {\r\n      summarytype,\r\n      options: service.options,\r\n      data: service.data,\r\n      oncatchsort: service.oncatchsort.bind(service),\r\n      oncatchrowclick: service.oncatchrowclick.bind(service)\r\n    };\r\n  }});</script>\n\n# 属性\n\nexport type datatype = { [key: string]: string | number | object | array<string | number | object> }[]\n\n/**\n * 属性\n */\nexport interface ytableprops extends record<string, unknown> {\n  \n  /***\n   * 表头\n   */\n  options: tableheaditem[]\n\n  /**\n   * 表内容\n   */\n  data: datatype[]\n\n  /**\n   * 总计显示位置\n   */\n  summary?: summarytype\n}\n\n/**\n * 表头item\n */\nexport interface tableheaditem extends record<string, unknown> {\n  /**\n   * 列宽度，百分数，默认等距\n   * 如果设置，每列都要设置，\n   */\n  width?: string\n  /**\n   * 列名称\n   */\n  label: string\n\n  /***\n   * 列key\n   */\n  columnkey: string\n\n  /**\n   * 排序, sort(不排序) desc(降序)，asc(升序)\n   */\n  sort?: sorttype\n\n  /**\n   * 固定位置\n   */\n  fixed?: fixeddirectionenum\n}\n\n/**\n * 列固定位置\n */\nexport enum fixeddirectionenum {\n  /**\n   * 左\n   */\n  left = 'left',\n\n  /**\n   * 右\n   */\n  right = 'right',\n}\n\n/**\n * 统计所在行\n */\nexport enum summarytype {\n  /**\n   * 第一行\n   */\n  top = 'top',\n\n  /**\n   * 最后一行\n   */\n  bottom = 'bottom'\n}\n\n# 事件\n/**\n * 点击排序回调结果\n */\nexport interface sortcallbackresult extends record<string, unknown> {\n  /**\n   * 所在列名\n   */\n  columnkey: string\n\n  /**\n   * 顺序： ''(不排序) desc(降序)，asc(升序)\n   */\n  sort: string\n}\n\n/**\n * 行点击回调结果\n */\nexport interface rowclickcallbackresult extends record<string, unknown> {\n\n  /**\n   * 行下标，从0开始\n   */\n   index: number\n}\n\n/**\n * 事件\n */\ninterface event {\n\n  /**\n   * 排序事件\n   */\n  onsort: sortcallbackresult\n\n  /**\n   * 行点击事件\n   */\n  onrowclick:rowclickcallbackresult\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "标签页 y-tabs",
      "frontmatter": {},
      "regularPath": "/component/basic/tabs.html",
      "relativePath": "component/basic/tabs.md",
      "key": "v-14e43ae4",
      "path": "/component/basic/tabs.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 20
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 35
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 1240
        },
        {
          "level": 3,
          "title": "事件",
          "slug": "事件",
          "normalizedTitle": "事件",
          "charIndex": 1628
        }
      ],
      "headersStr": "组件名称 基础用法 属性 事件",
      "content": "# 标签页 y-tabs\n标签页\n\n# 组件名称\ny-tabs\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-tabs :options=\"tabList\" @onClick=\"onCatchIndex\"></y-tabs>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent, ref, Ref } from 'vue'import './tabs.scss'import { YTabs } from '@/components/yui/tabs/types/tabs'\r\n\r\nclass TimePickerService {\r\n  /**\r\n   * 标题\r\n   * */\r\n  tabList: Ref<YTabs.TabItem[]> = ref([\r\n    {\r\n      id: 1,\r\n      label: '标题1',\r\n      badge: {\r\n        value: 22,\r\n        max: 99\r\n      }\r\n    },\r\n    {\r\n      id: 2,\r\n      label: '标题2'\r\n    }\r\n  ])\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /***\r\n   * 获取组件传值\r\n   * @param val 当前index\r\n   */\r\n  onCatchIndex(index: number, id: number) {\r\n    console.log('当前的栏目index及tab id', index, id)\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-tabs': defineAsyncComponent(() => import('@/components/yui/tabs/tabs.vue'))\r\n    // 'y-tabs': defineAsyncComponent(() => import('../../../../taro-yui-vue/src/components/tabs/tabs.vue'))\r\n  },\r\n  setup() {\r\n    const service = new TimePickerService()\r\n    return {\r\n      tabList: service.tabList,\r\n      onCatchIndex: service.onCatchIndex.bind(service)\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface YTabsProps extends Record<string, unknown> {\n  /**\n   * 组件信息\n   */\n  options: TabItem[]\n}\n\nexport interface TabItem extends Record<string, unknown> {\n  /***\n   * id\n   */\n  id: number\n  /**\n   * 文字\n   */\n  label: string,\n\n  /**\n   * 数量参数\n   */\n  badge?: {\n    /**\n     * 显示值\n     */\n    value: number\n\n    /**\n     * 最大值\n     */\n    max: number\n  }\n}\n\n# 事件\ninterface Events {\n  /**\n   * 点击tab时触发\n   */\n  onClick: number\n}",
      "normalizedContent": "# 标签页 y-tabs\n标签页\n\n# 组件名称\ny-tabs\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-tabs :options=\"tablist\" @onclick=\"oncatchindex\"></y-tabs>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent, ref, ref } from 'vue'import './tabs.scss'import { ytabs } from '@/components/yui/tabs/types/tabs'\r\n\r\nclass timepickerservice {\r\n  /**\r\n   * 标题\r\n   * */\r\n  tablist: ref<ytabs.tabitem[]> = ref([\r\n    {\r\n      id: 1,\r\n      label: '标题1',\r\n      badge: {\r\n        value: 22,\r\n        max: 99\r\n      }\r\n    },\r\n    {\r\n      id: 2,\r\n      label: '标题2'\r\n    }\r\n  ])\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /***\r\n   * 获取组件传值\r\n   * @param val 当前index\r\n   */\r\n  oncatchindex(index: number, id: number) {\r\n    console.log('当前的栏目index及tab id', index, id)\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-tabs': defineasynccomponent(() => import('@/components/yui/tabs/tabs.vue'))\r\n    // 'y-tabs': defineasynccomponent(() => import('../../../../taro-yui-vue/src/components/tabs/tabs.vue'))\r\n  },\r\n  setup() {\r\n    const service = new timepickerservice()\r\n    return {\r\n      tablist: service.tablist,\r\n      oncatchindex: service.oncatchindex.bind(service)\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface ytabsprops extends record<string, unknown> {\n  /**\n   * 组件信息\n   */\n  options: tabitem[]\n}\n\nexport interface tabitem extends record<string, unknown> {\n  /***\n   * id\n   */\n  id: number\n  /**\n   * 文字\n   */\n  label: string,\n\n  /**\n   * 数量参数\n   */\n  badge?: {\n    /**\n     * 显示值\n     */\n    value: number\n\n    /**\n     * 最大值\n     */\n    max: number\n  }\n}\n\n# 事件\ninterface events {\n  /**\n   * 点击tab时触发\n   */\n  onclick: number\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "多行文本框 y-textarea",
      "frontmatter": {},
      "regularPath": "/component/basic/textarea.html",
      "relativePath": "component/basic/textarea.md",
      "key": "v-037c7f96",
      "path": "/component/basic/textarea.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 50
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 69
        },
        {
          "level": 3,
          "title": "textarea属性",
          "slug": "textarea属性",
          "normalizedTitle": "textarea属性",
          "charIndex": 1213
        }
      ],
      "headersStr": "组件名称 基础用法 textarea属性",
      "content": "# 多行文本框 y-textarea\n多行文本输入框，可控制是否显示当前字数，可自定义高度。\n\n# 组件名称\ny-textarea\n\n# 基础用法\n<template>\r\n  <view v-reSize class=\"container\">\r\n    <y-textarea\r\n      :options=\"options\"\r\n      v-model=\"modelValue\"\r\n    ></y-textarea>\r\n  </view></template><script lang=\"ts\">import { Ref, ref, defineComponent, defineAsyncComponent } from \"vue\";import { YTextarea } from \"@/components/yui/textarea/types/textarea.d\";import \"./textarea.scss\";\r\n\r\nclass YTextareaService {\r\n  /**\r\n   * textarea组件参数\r\n   * */\r\n  options: Ref<YTextarea.TextAreaOptions> = ref({\r\n    height: 100,\r\n    maxLength: 400,\r\n    showCount: true,\r\n    autoHeight: true,\r\n    placeholder: \"多行文本框textarea\"\r\n  })\r\n\r\n  /**\r\n   * textarea值\r\n   */\r\n  modelValue: Ref<string> = ref(\"\");}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    \"y-textarea\": defineAsyncComponent(\r\n      () => import(\"@/components/yui/textarea/textarea.vue\")\r\n    ),\r\n    // \"y-textarea\": defineAsyncComponent(\r\n    //   () => import(\"../../../../taro-yui-vue/src/components/textarea/textarea.vue\")\r\n    // ),\r\n  },\r\n  setup() {\r\n    const service = new YTextareaService();\r\n    return {\r\n      options: service.options,\r\n      modelValue: service.modelValue\r\n    };\r\n  },});</script>\n\n# textarea属性\n/**\n * 属性\n */\nexport interface Props extends Record<string, unknown> {\n  /***\n   * 模式：可编辑edit/可查看view, 默认edit\n   */\n  pattern?: string\n\n  /**\n   * 参数\n   */\n  options:TextAreaOptions\n\n  /**\n   * 值，必填\n   */\n  modelValue: string\n}\n\n/**\n * textarea参数\n */\nexport interface TextAreaOptions {\n\n  /**\n   *  最大输入字数，默认值：200\n   */\n  maxLength?: number\n\n  /**\n   *  提示信息，非必填\n   */\n  placeholder?: string\n\n  /**\n   *  高度，默认值：200\n   */\n  height?: number\n\n  /**\n   * 是否禁用，默认值：false\n   */\n  disabled?: boolean\n\n  /**\n   * 是否自动聚焦，默认值：false\n   */\n  autoFocus?: boolean\n\n  /**\n   * 是否显示字数，默认值true\n   */\n  showCount?: boolean\n\n  /**\n   * 是否自动增高\n   */\n  autoHeight?: boolean\n}",
      "normalizedContent": "# 多行文本框 y-textarea\n多行文本输入框，可控制是否显示当前字数，可自定义高度。\n\n# 组件名称\ny-textarea\n\n# 基础用法\n<template>\r\n  <view v-resize class=\"container\">\r\n    <y-textarea\r\n      :options=\"options\"\r\n      v-model=\"modelvalue\"\r\n    ></y-textarea>\r\n  </view></template><script lang=\"ts\">import { ref, ref, definecomponent, defineasynccomponent } from \"vue\";import { ytextarea } from \"@/components/yui/textarea/types/textarea.d\";import \"./textarea.scss\";\r\n\r\nclass ytextareaservice {\r\n  /**\r\n   * textarea组件参数\r\n   * */\r\n  options: ref<ytextarea.textareaoptions> = ref({\r\n    height: 100,\r\n    maxlength: 400,\r\n    showcount: true,\r\n    autoheight: true,\r\n    placeholder: \"多行文本框textarea\"\r\n  })\r\n\r\n  /**\r\n   * textarea值\r\n   */\r\n  modelvalue: ref<string> = ref(\"\");}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    \"y-textarea\": defineasynccomponent(\r\n      () => import(\"@/components/yui/textarea/textarea.vue\")\r\n    ),\r\n    // \"y-textarea\": defineasynccomponent(\r\n    //   () => import(\"../../../../taro-yui-vue/src/components/textarea/textarea.vue\")\r\n    // ),\r\n  },\r\n  setup() {\r\n    const service = new ytextareaservice();\r\n    return {\r\n      options: service.options,\r\n      modelvalue: service.modelvalue\r\n    };\r\n  },});</script>\n\n# textarea属性\n/**\n * 属性\n */\nexport interface props extends record<string, unknown> {\n  /***\n   * 模式：可编辑edit/可查看view, 默认edit\n   */\n  pattern?: string\n\n  /**\n   * 参数\n   */\n  options:textareaoptions\n\n  /**\n   * 值，必填\n   */\n  modelvalue: string\n}\n\n/**\n * textarea参数\n */\nexport interface textareaoptions {\n\n  /**\n   *  最大输入字数，默认值：200\n   */\n  maxlength?: number\n\n  /**\n   *  提示信息，非必填\n   */\n  placeholder?: string\n\n  /**\n   *  高度，默认值：200\n   */\n  height?: number\n\n  /**\n   * 是否禁用，默认值：false\n   */\n  disabled?: boolean\n\n  /**\n   * 是否自动聚焦，默认值：false\n   */\n  autofocus?: boolean\n\n  /**\n   * 是否显示字数，默认值true\n   */\n  showcount?: boolean\n\n  /**\n   * 是否自动增高\n   */\n  autoheight?: boolean\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "时间轴 y-timeline",
      "frontmatter": {},
      "regularPath": "/component/basic/timeline.html",
      "relativePath": "component/basic/timeline.md",
      "key": "v-60c44ec8",
      "path": "/component/basic/timeline.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 25
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 44
        },
        {
          "level": 3,
          "title": "插槽用法",
          "slug": "插槽用法",
          "normalizedTitle": "插槽用法",
          "charIndex": 1486
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 2780
        }
      ],
      "headersStr": "组件名称 基础用法 插槽用法 属性",
      "content": "# 时间轴 y-timeline\n支持按钮\n\n# 组件名称\ny-timeline\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-timeline v-model=\"list\"\r\n                titleProperty=\"title\"\r\n                dateTimeProperty=\"date\"\r\n                contentProperty=\"content\"\r\n                :actionList=\"actionList\"\r\n                @action=\"onCatchAction\">\r\n    </y-timeline>\r\n  </view></template>\r\n\r\n<script lang=\"ts\">import { Ref, ref, defineComponent, defineAsyncComponent } from 'vue'import './timeline.scss'import { YTimeline, ActionTypeEnum } from '@/components/yui/timeline/types/timeline.d'\r\n\r\nclass TimelineService {\r\n  /**\r\n   * 列表\r\n   */\r\n  list: Ref<object[]> = ref([\r\n    {\r\n      title: '这是标题1',\r\n      date: '2021-01-01',\r\n      content: '这是内容这是内容这是内容这是内容这是内容这是内容1'\r\n    },\r\n    {\r\n      title: '这是标题2',\r\n      date: '2021-01-02',\r\n      content: '这是内容这是内容这是内容这是内容这是内容这是内容2'\r\n    }\r\n  ])\r\n\r\n  /**\r\n   * 点击按钮\r\n   * @param e\r\n   */\r\n  onCatchAction(e: YTimeline.ActionCallbackResult) {\r\n    console.log('点击的按钮是：', e.type)\r\n    // do sth.\r\n  }}\r\n\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-timeline': defineAsyncComponent(() => import('@/components/yui/timeline/timeline.vue'))\r\n  },\r\n  setup() {\r\n    const service = new TimelineService()\r\n\r\n    return {\r\n      list: service.list,\r\n      actionList: [\r\n        ActionTypeEnum.EDIT,\r\n        ActionTypeEnum.DELETE,\r\n      ],\r\n      onCatchAction: service.onCatchAction.bind(service)\r\n    };\r\n  }});</script>\n\n# 插槽用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-timeline v-model=\"list\">\r\n      <template #header>这是头部插槽</template>\r\n      <template #btn=\"{btn}\">\r\n        <!--以下为按钮插槽：-->\r\n        <view style=\"margin-right: 15px\">{{ btn.name }}-按钮1</view>\r\n        <view>{{ btn.sex }}-按钮2</view>\r\n      </template>\r\n\r\n      <template #body=\"{body}\">\r\n        以下为body插槽：\r\n        <view>姓名：{{ body.name }}</view>\r\n        <view>性别：{{ body.sex }}</view>\r\n      </template>\r\n    </y-timeline>\r\n  </view></template>\r\n\r\n<script lang=\"ts\">import { Ref, ref, defineComponent, defineAsyncComponent } from 'vue'import './timeline.scss'import { YTimeline, ActionTypeEnum } from '@/components/yui/timeline/types/timeline.d'\r\n\r\nclass TimelineService {\r\n  /**\r\n   * 列表\r\n   */\r\n  list: Ref<object[]> = ref([\r\n    {\r\n      title: '这是标题1',\r\n      date: '2021-01-01',\r\n      name: '张三',\r\n      sex: '男'\r\n    },\r\n    {\r\n      title: '这是标题2',\r\n      date: '2021-01-02',\r\n      name: '李四',\r\n      sex: '女'\r\n    }\r\n  ])}\r\n\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-timeline': defineAsyncComponent(() => import('@/components/yui/timeline/timeline.vue'))\r\n  },\r\n  setup() {\r\n    const service = new TimelineService()\r\n\r\n    return {\r\n      list: service.list\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface YTimelineProps extends Record<string, unknown> {\n  /**\n   * 值\n   */\n  modelValue: object[]\n\n  /**\n   * 标题属性名\n   */\n  titleProperty?: string\n\n  /**\n   * 时间属性名\n   */\n  dateTimeProperty?: string\n\n  /**\n   * 内容属性名\n   */\n  contentProperty?: string\n\n  /**\n   * 操作按钮\n   */\n  actionList?: ActionTypeEnum[]\n}\n\n/**\n * 操作按钮信息\n */\nexport interface ActionInfo {\n\n  /**\n   * class属性\n   */\n  className: string\n\n  /**\n   * 显示的名称\n   */\n  label: string\n}\n\nexport interface Events {\n\n  /**\n   * 操作按钮点击事件回调参数\n   */\n  action: ActionCallbackResult\n}\n\n/**\n * 操作按钮点击事件返回值\n */\ninterface ActionCallbackResult {\n\n  /**\n   * 绑定数据\n   */\n  value: Object\n\n  /**\n   * 操作类型\n   */\n  type: ActionTypeEnum | string\n}",
      "normalizedContent": "# 时间轴 y-timeline\n支持按钮\n\n# 组件名称\ny-timeline\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-timeline v-model=\"list\"\r\n                titleproperty=\"title\"\r\n                datetimeproperty=\"date\"\r\n                contentproperty=\"content\"\r\n                :actionlist=\"actionlist\"\r\n                @action=\"oncatchaction\">\r\n    </y-timeline>\r\n  </view></template>\r\n\r\n<script lang=\"ts\">import { ref, ref, definecomponent, defineasynccomponent } from 'vue'import './timeline.scss'import { ytimeline, actiontypeenum } from '@/components/yui/timeline/types/timeline.d'\r\n\r\nclass timelineservice {\r\n  /**\r\n   * 列表\r\n   */\r\n  list: ref<object[]> = ref([\r\n    {\r\n      title: '这是标题1',\r\n      date: '2021-01-01',\r\n      content: '这是内容这是内容这是内容这是内容这是内容这是内容1'\r\n    },\r\n    {\r\n      title: '这是标题2',\r\n      date: '2021-01-02',\r\n      content: '这是内容这是内容这是内容这是内容这是内容这是内容2'\r\n    }\r\n  ])\r\n\r\n  /**\r\n   * 点击按钮\r\n   * @param e\r\n   */\r\n  oncatchaction(e: ytimeline.actioncallbackresult) {\r\n    console.log('点击的按钮是：', e.type)\r\n    // do sth.\r\n  }}\r\n\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-timeline': defineasynccomponent(() => import('@/components/yui/timeline/timeline.vue'))\r\n  },\r\n  setup() {\r\n    const service = new timelineservice()\r\n\r\n    return {\r\n      list: service.list,\r\n      actionlist: [\r\n        actiontypeenum.edit,\r\n        actiontypeenum.delete,\r\n      ],\r\n      oncatchaction: service.oncatchaction.bind(service)\r\n    };\r\n  }});</script>\n\n# 插槽用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-timeline v-model=\"list\">\r\n      <template #header>这是头部插槽</template>\r\n      <template #btn=\"{btn}\">\r\n        <!--以下为按钮插槽：-->\r\n        <view style=\"margin-right: 15px\">{{ btn.name }}-按钮1</view>\r\n        <view>{{ btn.sex }}-按钮2</view>\r\n      </template>\r\n\r\n      <template #body=\"{body}\">\r\n        以下为body插槽：\r\n        <view>姓名：{{ body.name }}</view>\r\n        <view>性别：{{ body.sex }}</view>\r\n      </template>\r\n    </y-timeline>\r\n  </view></template>\r\n\r\n<script lang=\"ts\">import { ref, ref, definecomponent, defineasynccomponent } from 'vue'import './timeline.scss'import { ytimeline, actiontypeenum } from '@/components/yui/timeline/types/timeline.d'\r\n\r\nclass timelineservice {\r\n  /**\r\n   * 列表\r\n   */\r\n  list: ref<object[]> = ref([\r\n    {\r\n      title: '这是标题1',\r\n      date: '2021-01-01',\r\n      name: '张三',\r\n      sex: '男'\r\n    },\r\n    {\r\n      title: '这是标题2',\r\n      date: '2021-01-02',\r\n      name: '李四',\r\n      sex: '女'\r\n    }\r\n  ])}\r\n\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-timeline': defineasynccomponent(() => import('@/components/yui/timeline/timeline.vue'))\r\n  },\r\n  setup() {\r\n    const service = new timelineservice()\r\n\r\n    return {\r\n      list: service.list\r\n    };\r\n  }});</script>\n\n# 属性\n/**\n * 属性\n */\nexport interface ytimelineprops extends record<string, unknown> {\n  /**\n   * 值\n   */\n  modelvalue: object[]\n\n  /**\n   * 标题属性名\n   */\n  titleproperty?: string\n\n  /**\n   * 时间属性名\n   */\n  datetimeproperty?: string\n\n  /**\n   * 内容属性名\n   */\n  contentproperty?: string\n\n  /**\n   * 操作按钮\n   */\n  actionlist?: actiontypeenum[]\n}\n\n/**\n * 操作按钮信息\n */\nexport interface actioninfo {\n\n  /**\n   * class属性\n   */\n  classname: string\n\n  /**\n   * 显示的名称\n   */\n  label: string\n}\n\nexport interface events {\n\n  /**\n   * 操作按钮点击事件回调参数\n   */\n  action: actioncallbackresult\n}\n\n/**\n * 操作按钮点击事件返回值\n */\ninterface actioncallbackresult {\n\n  /**\n   * 绑定数据\n   */\n  value: object\n\n  /**\n   * 操作类型\n   */\n  type: actiontypeenum | string\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "多选框 y-checkbox",
      "frontmatter": {},
      "regularPath": "/component/form/checkbox.html",
      "relativePath": "component/form/checkbox.md",
      "key": "v-02caf804",
      "path": "/component/form/checkbox.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 31
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 75
        },
        {
          "level": 3,
          "title": "按钮类型",
          "slug": "按钮类型",
          "normalizedTitle": "按钮类型",
          "charIndex": 1572
        },
        {
          "level": 3,
          "title": "单选框组",
          "slug": "单选框组",
          "normalizedTitle": "单选框组",
          "charIndex": 2633
        },
        {
          "level": 3,
          "title": "checkbox属性",
          "slug": "checkbox属性",
          "normalizedTitle": "checkbox属性",
          "charIndex": 4189
        },
        {
          "level": 3,
          "title": "checkbox-group属性",
          "slug": "checkbox-group属性",
          "normalizedTitle": "checkbox-group属性",
          "charIndex": 4628
        },
        {
          "level": 3,
          "title": "checkbox事件",
          "slug": "checkbox事件",
          "normalizedTitle": "checkbox事件",
          "charIndex": 4844
        },
        {
          "level": 3,
          "title": "checkbox-group事件",
          "slug": "checkbox-group事件",
          "normalizedTitle": "checkbox-group事件",
          "charIndex": 4974
        }
      ],
      "headersStr": "组件名称 基础用法 按钮类型 单选框组 checkbox属性 checkbox-group属性 checkbox事件 checkbox-group事件",
      "content": "# 多选框 y-checkbox\n一组备选项中进行多选\n\n# 组件名称\n 1. y-checkbox\n 2. y-checkbox-group\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <view class=\"box\">\r\n      <y-checkbox :value=\"1\"\r\n                  v-model=\"checkboxValue1\">可选项</y-checkbox>\r\n      <y-checkbox :value=\"2\" v-model=\"checkboxValue2\">选中项</y-checkbox>\r\n    </view>\r\n\r\n    <y-checkbox :value=\"3\" v-model=\"checkboxValue3\"  :disabled=\"true\">不可选项</y-checkbox>\r\n    <y-checkbox :value=\"4\" v-model=\"checkboxValue4\" :disabled=\"true\">已选中，不可改</y-checkbox>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent,Ref,ref, watch } from 'vue'import './checkbox.scss'\r\n\r\n/**\r\n * 多选框\r\n */class CheckboxService{\r\n\r\n  /**\r\n   * 多选框选中值\r\n   */\r\n  checkboxValue1:Ref<number[]> = ref([])\r\n  checkboxValue2:Ref<number[]> = ref([2])\r\n  checkboxValue3:Ref<number[]> = ref([])\r\n  checkboxValue4:Ref<number[]> = ref([4])\r\n\r\n  constructor(){\r\n    watch(this.checkboxValue1,(value)=>{\r\n      console.log(value)\r\n    })\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-checkbox': defineAsyncComponent(() => import('@/components/yui/checkbox/checkbox.vue'))\r\n    // 'y-checkbox': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/checkbox/checkbox.vue'))\r\n  },\r\n  setup() {\r\n    const service = new CheckboxService()\r\n    return {\r\n      checkboxValue1: service.checkboxValue1,\r\n      checkboxValue2: service.checkboxValue2,\r\n      checkboxValue3: service.checkboxValue3,\r\n      checkboxValue4: service.checkboxValue4,\r\n    };\r\n  }});</script>\n\n# 按钮类型\n<template>\r\n  <view v-reSize id=\"container\" class=\"demo-container\">\r\n    兴趣：\r\n    <y-checkbox :value=\"1\" v-model=\"checkboxValue\" type=\"button\" :disabled=\"true\">游泳</y-checkbox>\r\n    <y-checkbox :value=\"2\" v-model=\"checkboxValue\" type=\"button\" :disabled=\"true\">听音乐</y-checkbox>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent,Ref,ref, watch } from 'vue'import './checkboxButton.scss'\r\n\r\n/**\r\n * 多选框\r\n */class CheckboxService{\r\n\r\n  /**\r\n   * 多选框选中值\r\n   */\r\n  checkboxValue:Ref<number[]> = ref([2])\r\n\r\n  constructor(){\r\n    watch(this.checkboxValue,(value)=>{\r\n      console.log(value)\r\n    })\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-checkbox': defineAsyncComponent(() => import('@/components/yui/checkbox/checkbox.vue'))\r\n    // 'y-checkbox': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/checkbox/checkbox.vue'))\r\n  },\r\n  setup() {\r\n    const service = new CheckboxService()\r\n    return {\r\n      checkboxValue: service.checkboxValue\r\n    };\r\n  }});</script>\n\n# 单选框组\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    兴趣：\r\n    <y-checkbox-group v-model=\"checkboxGroupValue\">\r\n      <y-checkbox :value=\"1\">游泳</y-checkbox>\r\n      <y-checkbox :value=\"2\">听音乐</y-checkbox>\r\n      <y-checkbox :value=\"3\">打篮球</y-checkbox>\r\n      <y-checkbox :value=\"4\">玩游戏</y-checkbox>\r\n    </y-checkbox-group>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent, Ref, ref } from \"vue\";import \"./checkboxGroup.scss\";import {Checkbox} from '@/components/yui/checkbox/types/checkbox.d';\r\n\r\n/**\r\n * 多选框组\r\n */class CheckboxGroupService {\r\n  /**\r\n   * 单选框选中值\r\n   */\r\n  checkboxGroupValue: Ref<number[]> = ref([2]);\r\n\r\n  /**\r\n   * checkbox发生变化\r\n   */\r\n  onCheckboxChange(value:Checkbox.IModelType[]){\r\n    console.log(value)\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-checkbox': defineAsyncComponent(() => import('@/components/yui/checkbox/checkbox.vue')),\r\n    'y-checkbox-group': defineAsyncComponent(() => import('@/components/yui/checkboxGroup/checkboxGroup.vue'))\r\n    // 'y-checkbox': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/checkbox/checkboxButton.vue')),\r\n    // 'y-checkbox-group': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/checkboxGroup/checkboxGroup.vue'))\r\n  },\r\n  setup() {\r\n    const service = new CheckboxGroupService();\r\n    return {\r\n      checkboxGroupValue: service.checkboxGroupValue,\r\n      onCheckboxChange: service.onCheckboxChange.bind(service),\r\n    };\r\n  },});</script>\n\n# checkbox属性\n/**\n * 多选框类型\n */\nexport enum YCheckboxType{\n    checkbox=\"checkbox\",\n    button = \"button\"\n}\n\nexport type IModelType = boolean | string | number\n/**\n * 属性\n */\nexport interface Props {\n  /**\n   * 类型：checkbox/button， 默认checkbox\n   */\n    type?: YCheckboxType\n    /**\n     * 选中值\n     */\n    modelValue?: IModelType[]\n\n    /**\n     * 值\n     */\n    value: IModelType\n\n    /**\n     * 是否不可选，默认false\n     */\n    disabled?: boolean\n}\n\n# checkbox-group属性\nexport type IModelType = boolean | string | number\n/**\n * 属性\n */\nexport interface Props {\n    /**\n     * 选中值\n     */\n    modelValue: IModelType[]\n\n    /**\n     * 值\n     */\n    value: IModelType\n}\n\n# checkbox事件\n/**\n * 事件\n */\nexport interface Events {\n\n    /**\n     * 绑定值变化时触发，选中的radio value值\n     */\n    change: IModelType[]\n}\n\n# checkbox-group事件\n/**\n * 事件\n */\nexport interface Events {\n\n    /**\n     * 绑定值变化时触发，选中的radio value值\n     */\n    change: IModelType[]\n}",
      "normalizedContent": "# 多选框 y-checkbox\n一组备选项中进行多选\n\n# 组件名称\n 1. y-checkbox\n 2. y-checkbox-group\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <view class=\"box\">\r\n      <y-checkbox :value=\"1\"\r\n                  v-model=\"checkboxvalue1\">可选项</y-checkbox>\r\n      <y-checkbox :value=\"2\" v-model=\"checkboxvalue2\">选中项</y-checkbox>\r\n    </view>\r\n\r\n    <y-checkbox :value=\"3\" v-model=\"checkboxvalue3\"  :disabled=\"true\">不可选项</y-checkbox>\r\n    <y-checkbox :value=\"4\" v-model=\"checkboxvalue4\" :disabled=\"true\">已选中，不可改</y-checkbox>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent,ref,ref, watch } from 'vue'import './checkbox.scss'\r\n\r\n/**\r\n * 多选框\r\n */class checkboxservice{\r\n\r\n  /**\r\n   * 多选框选中值\r\n   */\r\n  checkboxvalue1:ref<number[]> = ref([])\r\n  checkboxvalue2:ref<number[]> = ref([2])\r\n  checkboxvalue3:ref<number[]> = ref([])\r\n  checkboxvalue4:ref<number[]> = ref([4])\r\n\r\n  constructor(){\r\n    watch(this.checkboxvalue1,(value)=>{\r\n      console.log(value)\r\n    })\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-checkbox': defineasynccomponent(() => import('@/components/yui/checkbox/checkbox.vue'))\r\n    // 'y-checkbox': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/checkbox/checkbox.vue'))\r\n  },\r\n  setup() {\r\n    const service = new checkboxservice()\r\n    return {\r\n      checkboxvalue1: service.checkboxvalue1,\r\n      checkboxvalue2: service.checkboxvalue2,\r\n      checkboxvalue3: service.checkboxvalue3,\r\n      checkboxvalue4: service.checkboxvalue4,\r\n    };\r\n  }});</script>\n\n# 按钮类型\n<template>\r\n  <view v-resize id=\"container\" class=\"demo-container\">\r\n    兴趣：\r\n    <y-checkbox :value=\"1\" v-model=\"checkboxvalue\" type=\"button\" :disabled=\"true\">游泳</y-checkbox>\r\n    <y-checkbox :value=\"2\" v-model=\"checkboxvalue\" type=\"button\" :disabled=\"true\">听音乐</y-checkbox>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent,ref,ref, watch } from 'vue'import './checkboxbutton.scss'\r\n\r\n/**\r\n * 多选框\r\n */class checkboxservice{\r\n\r\n  /**\r\n   * 多选框选中值\r\n   */\r\n  checkboxvalue:ref<number[]> = ref([2])\r\n\r\n  constructor(){\r\n    watch(this.checkboxvalue,(value)=>{\r\n      console.log(value)\r\n    })\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-checkbox': defineasynccomponent(() => import('@/components/yui/checkbox/checkbox.vue'))\r\n    // 'y-checkbox': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/checkbox/checkbox.vue'))\r\n  },\r\n  setup() {\r\n    const service = new checkboxservice()\r\n    return {\r\n      checkboxvalue: service.checkboxvalue\r\n    };\r\n  }});</script>\n\n# 单选框组\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    兴趣：\r\n    <y-checkbox-group v-model=\"checkboxgroupvalue\">\r\n      <y-checkbox :value=\"1\">游泳</y-checkbox>\r\n      <y-checkbox :value=\"2\">听音乐</y-checkbox>\r\n      <y-checkbox :value=\"3\">打篮球</y-checkbox>\r\n      <y-checkbox :value=\"4\">玩游戏</y-checkbox>\r\n    </y-checkbox-group>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent, ref, ref } from \"vue\";import \"./checkboxgroup.scss\";import {checkbox} from '@/components/yui/checkbox/types/checkbox.d';\r\n\r\n/**\r\n * 多选框组\r\n */class checkboxgroupservice {\r\n  /**\r\n   * 单选框选中值\r\n   */\r\n  checkboxgroupvalue: ref<number[]> = ref([2]);\r\n\r\n  /**\r\n   * checkbox发生变化\r\n   */\r\n  oncheckboxchange(value:checkbox.imodeltype[]){\r\n    console.log(value)\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-checkbox': defineasynccomponent(() => import('@/components/yui/checkbox/checkbox.vue')),\r\n    'y-checkbox-group': defineasynccomponent(() => import('@/components/yui/checkboxgroup/checkboxgroup.vue'))\r\n    // 'y-checkbox': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/checkbox/checkboxbutton.vue')),\r\n    // 'y-checkbox-group': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/checkboxgroup/checkboxgroup.vue'))\r\n  },\r\n  setup() {\r\n    const service = new checkboxgroupservice();\r\n    return {\r\n      checkboxgroupvalue: service.checkboxgroupvalue,\r\n      oncheckboxchange: service.oncheckboxchange.bind(service),\r\n    };\r\n  },});</script>\n\n# checkbox属性\n/**\n * 多选框类型\n */\nexport enum ycheckboxtype{\n    checkbox=\"checkbox\",\n    button = \"button\"\n}\n\nexport type imodeltype = boolean | string | number\n/**\n * 属性\n */\nexport interface props {\n  /**\n   * 类型：checkbox/button， 默认checkbox\n   */\n    type?: ycheckboxtype\n    /**\n     * 选中值\n     */\n    modelvalue?: imodeltype[]\n\n    /**\n     * 值\n     */\n    value: imodeltype\n\n    /**\n     * 是否不可选，默认false\n     */\n    disabled?: boolean\n}\n\n# checkbox-group属性\nexport type imodeltype = boolean | string | number\n/**\n * 属性\n */\nexport interface props {\n    /**\n     * 选中值\n     */\n    modelvalue: imodeltype[]\n\n    /**\n     * 值\n     */\n    value: imodeltype\n}\n\n# checkbox事件\n/**\n * 事件\n */\nexport interface events {\n\n    /**\n     * 绑定值变化时触发，选中的radio value值\n     */\n    change: imodeltype[]\n}\n\n# checkbox-group事件\n/**\n * 事件\n */\nexport interface events {\n\n    /**\n     * 绑定值变化时触发，选中的radio value值\n     */\n    change: imodeltype[]\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "表单 y-form",
      "frontmatter": {},
      "regularPath": "/component/form/form.html",
      "relativePath": "component/form/form.md",
      "key": "v-b26801c4",
      "path": "/component/form/form.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 206
        },
        {
          "level": 3,
          "title": "依赖组件",
          "slug": "依赖组件",
          "normalizedTitle": "依赖组件",
          "charIndex": 221
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 352
        },
        {
          "level": 3,
          "title": "浏览模式",
          "slug": "浏览模式",
          "normalizedTitle": "浏览模式",
          "charIndex": 53
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 22755
        },
        {
          "level": 3,
          "title": "Slots",
          "slug": "slots",
          "normalizedTitle": "slots",
          "charIndex": 25584
        }
      ],
      "headersStr": "组件名称 依赖组件 基础用法 浏览模式 属性 Slots",
      "content": "# 表单 y-form\n由输入框、选择器、单选框、多选框等控件组成，用以收集、校验、提交数据； 支持编辑/浏览模式：pattern = edit / view [YFormElType.DATE_PICKER, YFormElType.DATE_TIME_PICKER, YFormElType.CUSTOM_SELECTOR, YFormElType.SELECTOR]支持清除配置，默认必填的不可清除\n\n# 组件名称\ny-form\n\n# 依赖组件\n 1. y-form-item-checkbox-group\n 2. y-textarea\n 3. y-date-picker\n 4. y-date-time-picker\n 5. y-upload\n 6. y-form-item-picker\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-form :rowList=\"rowList\" v-model=\"info\" @click=\"onFormClick\" @clear=\"onClear\">\r\n      <template #customSlot> <view>这是自定义插槽的内容</view> </template>\r\n      <template #customSlotRight-right> <view>这是自定义右侧插槽</view> </template>\r\n    </y-form>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent, ref, Ref } from \"vue\";import \"./form.scss\";import { YForm, YFormElType } from \"@/components/yui/form/types/form.d\";import { YFormItemInputElType } from \"@/components/yui/form/components/formItemInput/types/formItemInput.d\";import { YTextarea } from \"@/components/yui/textarea/types/textarea.d\";import { CalendarBasic, CalendarTypeEnum } from \"@/components/yui/calendar/calendarBasic/types/calendarBasic.d\";import { YUpload } from \"@/components/yui/upload/types/upload.d\";import { YCheckboxType } from \"@/components/yui/checkbox/types/checkbox.d\";import { YDateTimePicker } from '@/components/yui/dateTimePicker/types/dateTimePicker.d'import { YFormItemPicker } from '@/components/yui/formItemPicker/types/formItemPicker.d'import { YFormItemText } from '@/components/yui/form/components/formItemText/types/formItemText.d'import { YEditor, YEditorImgElType } from '@/components/yui/editor/types/editor.d'\r\n\r\n\r\n\r\n\r\nclass YFormService {\r\n  /**\r\n   * 表单数据列表\r\n   */\r\n  rowList: YForm.FormItem[] = [\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"单行文本框input\",\r\n      type: YFormElType.INPUT,\r\n      property: \"keyWord\",\r\n      options: <YForm.FormItemInputOptions>{\r\n        placeholder: \"单行文本框input\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"数字文本框input\",\r\n      type: YFormElType.INPUT,\r\n      property: \"numberKeyWord\",\r\n      options: <YForm.FormItemInputOptions>{\r\n        type: YFormItemInputElType.INPUT_NUMBER,\r\n        placeholder: \"单行数字文本框input\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"小数点文本框input\",\r\n      type: YFormElType.INPUT,\r\n      property: \"digitKeyWord\",\r\n      options: <YForm.FormItemInputOptions>{\r\n        type: YFormItemInputElType.INPUT_DIGIT,\r\n        placeholder: \"小数点文本框input\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"手机号input\",\r\n      type: YFormElType.INPUT,\r\n      property: \"phoneKeyWord\",\r\n      options: <YForm.FormItemInputOptions>{\r\n        type: YFormItemInputElType.INPUT_PHONE,\r\n        placeholder: \"手机号input\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"不可输入input\",\r\n      type: YFormElType.INPUT,\r\n      property: \"notInputKeyWord\",\r\n      options: <YForm.FormItemInputOptions>{\r\n        disabled: true,\r\n        placeholder: \"单行文本框input不可输入\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"仅文字显示无星号\",\r\n      type: YFormElType.TEXT,\r\n      property: \"textVal\",\r\n      options: <YFormItemText.FormItemTextOptions>{\r\n        placeholder: \"仅文字显示无星号\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"日期选择器\",\r\n      type: YFormElType.DATE_PICKER,\r\n      property: \"date\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        isMultiSelect: false,\r\n        showToolBar: true,\r\n        canClear: true\r\n      }\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"日期范围选择器\",\r\n      property: \"multiTime\",\r\n      type: YFormElType.DATE_PICKER,\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        isMultiSelect: true,\r\n        showToolBar: true,\r\n        // canClear: false\r\n        // maskOuterElId: '' 弹窗表单上配置 id名称, options类型用YDatePicker.YDatePickerOptions\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"年度选择器\",\r\n      property: \"year\",\r\n      type: YFormElType.DATE_PICKER,\r\n      options: <YDateTimePicker.timePickerOptions>{\r\n        placeholder: '年度选择器',\r\n        type: CalendarTypeEnum.YEAR,\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"年度范围选择器\",\r\n      property: \"multiYear\",\r\n      type: YFormElType.DATE_PICKER,\r\n      options: <YDateTimePicker.timePickerOptions>{\r\n        placeholder: '年度选择器',\r\n        type: CalendarTypeEnum.YEAR,\r\n        isMultiSelect: true,\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"年月选择器\",\r\n      property: \"yearMonth\",\r\n      type: YFormElType.DATE_PICKER,\r\n      options: <YDateTimePicker.timePickerOptions>{\r\n        placeholder: '日期时间选择器',\r\n        type: CalendarTypeEnum.MONTH\r\n        // canClear: false\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"年月范围选择器\",\r\n      property: \"multiYearMonth\",\r\n      type: YFormElType.DATE_PICKER,\r\n      options: <YDateTimePicker.timePickerOptions>{\r\n        placeholder: '日期时间选择器',\r\n        type: CalendarTypeEnum.MONTH,\r\n        isMultiSelect: true,\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"季度度选择器\",\r\n      property: \"yearQuarter\",\r\n      type: YFormElType.DATE_PICKER,\r\n      options: <YDateTimePicker.timePickerOptions>{\r\n        placeholder: '季度度选择器',\r\n        type: CalendarTypeEnum.QUARTER,\r\n        // canClear: false\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"季度范围选择器\",\r\n      property: \"multiYearQuarter\",\r\n      type: YFormElType.DATE_PICKER,\r\n      options: <YDateTimePicker.timePickerOptions>{\r\n        placeholder: '季度度选择器',\r\n        type: CalendarTypeEnum.QUARTER,\r\n        isMultiSelect: true,\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"日期时间选择器\",\r\n      property: \"dateTime\",\r\n      type: YFormElType.DATE_TIME_PICKER,\r\n      options: <YDateTimePicker.timePickerOptions>{\r\n        placeholder: '日期时间选择器',\r\n        isMultiSelect: false,\r\n        // canClear: false\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"单选框\",\r\n      type: YFormElType.RADIO_GROUP,\r\n      property: \"radioValue\",\r\n      options: <YForm.FormItemRadioGroupOptions[]>[\r\n        {\r\n          label: \"强\",\r\n          value: 1,\r\n        },\r\n        {\r\n          label: \"中\",\r\n          value: 2,\r\n        },\r\n        {\r\n          label: \"弱\",\r\n          value: 3,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"多选框\",\r\n      type: YFormElType.CHECKBOX_GROUP,\r\n      property: \"checkboxValueList\",\r\n      options: <YForm.FormItemCheckboxGroupOptions[]>[\r\n        {\r\n          label: \"添加\",\r\n          value: 1,\r\n        },\r\n        {\r\n          label: \"修改\",\r\n          value: 2,\r\n        },\r\n        {\r\n          label: \"删除\",\r\n          value: 3,\r\n        },\r\n      ],\r\n    },{\r\n      require: true,\r\n      show: true,\r\n      label: \"按钮式多选框\",\r\n      type: YFormElType.CHECKBOX_GROUP,\r\n      property: \"btnCheckboxValueList\",\r\n      options: <YForm.FormItemCheckboxGroupOptions[]>[\r\n        {\r\n          label: \"唱歌\",\r\n          value: 1,\r\n          type:YCheckboxType.button\r\n        },\r\n        {\r\n          label: \"玩游戏\",\r\n          value: 2,\r\n          type:YCheckboxType.button\r\n        },\r\n        {\r\n          label: \"游泳\",\r\n          value: 3,\r\n          type:YCheckboxType.button\r\n        },{\r\n          label: \"玩游戏\",\r\n          value: 4,\r\n          type:YCheckboxType.button\r\n        },\r\n        {\r\n          label: \"游泳\",\r\n          value: 5,\r\n          type:YCheckboxType.button\r\n        }\r\n      ],\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: \"单张图片\",\r\n      type: YFormElType.UPLOAD,\r\n      property: \"fileList\",\r\n      options: <YUpload.YUploadOptions>{\r\n        placeholder: '最多1张',\r\n        multiple: false,\r\n      },\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: \"多张图片\",\r\n      type: YFormElType.UPLOAD,\r\n      property: \"multiFileList\",\r\n      options: <YUpload.YUploadOptions>{\r\n        placeholder: '最多3张',\r\n        multiple: true,\r\n        count: 3,\r\n      },\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: \"自定义选择器\",\r\n      type: YFormElType.CUSTOM_SELECTOR,\r\n      property: \"customSelectorStr\",\r\n      options: <YForm.YFormItemCustomSelectorOptions>{\r\n        placeholder: '自定义选择器',\r\n        canClear: true\r\n      }\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: '普通选择器',\r\n      type: YFormElType.SELECTOR,\r\n      property: 'selectorId',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        placeholder: '普通选择器',\r\n        optionList: [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n        canClear: true\r\n      }\r\n    }, {\r\n      require: false,\r\n      show: true,\r\n      label: '多列选择器',\r\n      type: YFormElType.SELECTOR,\r\n      property: 'multiSelectorId',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        type: 'multiSelector',\r\n        placeholder: '多列选择器',\r\n        optionList: [\r\n          [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n          [{id: 11, label: 'ab1'}, {id: 13, label: 'ab2'}],\r\n        ],\r\n        // canClear: false\r\n      }\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: '时分选择器',\r\n      type: YFormElType.SELECTOR,\r\n      property: 'time',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        type: 'time',\r\n        placeholder: '时分选择器',\r\n        // canClear: false\r\n      }\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: '地区选择器',\r\n      type: YFormElType.SELECTOR,\r\n      property: 'region',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        type: 'region',\r\n        customItem: '自定义选项',\r\n        placeholder: '地区选择器',\r\n        // canClear: false\r\n      }\r\n    },{\r\n      require: true,\r\n      show: true,\r\n      label: \"多行文本框textarea\",\r\n      type: YFormElType.TEXTAREA,\r\n      property: \"remark\",\r\n      options: <YTextarea.TextAreaOptions>{\r\n        height: 100,\r\n        placeholder: \"多行文本框textarea\",\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"自定义插槽\",\r\n      type: YFormElType.SLOT,\r\n      property: \"customSlot\"\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"自定义右侧插槽\",\r\n      type: YFormElType.SLOT,\r\n      property: \"customSlotRight\"\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"编辑器\",\r\n      type: YFormElType.EDITOR,\r\n      property: \"EDITORHtml\",\r\n      options: <YEditor.EditorOptions>{\r\n        placeholder: '编辑器',\r\n        toolList: [\r\n          YEditorImgElType.FONT_SIZE,\r\n          YEditorImgElType.BOLD,\r\n          YEditorImgElType.ITALIC,\r\n          YEditorImgElType.COLOR,\r\n          YEditorImgElType.DIRECTION,\r\n          YEditorImgElType.BACKGROUND_COLOR,\r\n          YEditorImgElType.ALIGN_LEFT,\r\n          YEditorImgElType.ALIGN_RIGHT,\r\n          YEditorImgElType.ALIGN_CENTER,\r\n          YEditorImgElType.ALIGN_JUSTIFY,\r\n          YEditorImgElType.HEADER_1,\r\n          YEditorImgElType.HEADER_2,\r\n          YEditorImgElType.HEADER_3,\r\n          YEditorImgElType.HEADER_4,\r\n          YEditorImgElType.INDENT,\r\n          YEditorImgElType.OUTDENT,\r\n          YEditorImgElType.LETTER_SPACING,\r\n          YEditorImgElType.LINE_HEIGHT,\r\n          YEditorImgElType.SCRIPT_SUB,\r\n          YEditorImgElType.SCRIPT_SUPER,\r\n          YEditorImgElType.STRIKE,\r\n          YEditorImgElType.UNDER_LINE,\r\n          YEditorImgElType.LIST_ORDERED,\r\n          YEditorImgElType.LIST_BULLET,\r\n          YEditorImgElType.LIST_CHECK,\r\n          YEditorImgElType.MARGIN_BOTTOM,\r\n          YEditorImgElType.MARGIN_TOP,\r\n          YEditorImgElType.DATE,\r\n          YEditorImgElType.INSERT_DIVIDER,\r\n          YEditorImgElType.INSERT_IMAGE,\r\n          YEditorImgElType.RE_DO,\r\n          YEditorImgElType.UN_DO,\r\n          YEditorImgElType.REMOVE_FORMAT,\r\n          YEditorImgElType.CLEAR,\r\n        ],\r\n      }\r\n    },\r\n  ];\r\n\r\n  /**\r\n   * form信息\r\n   */\r\n  info: Ref<Object> = ref({\r\n    keyWord: \"11\",  // input， 默认空\r\n    numberKeyWord: 0,\r\n    digitKeyWord: 0,\r\n    phoneKeyWord: '15900000',\r\n    notInputKeyWord: \"不可修改\",  // input， 默认空\r\n    textVal: '仅文字显示无星号',\r\n    date: \"2020-01-22\",  // 日期选择器， 默认空\r\n    multiTime: ['2020-01-22', '2020-01-23'], // 日期范围选择器， 默认[]\r\n    year: '2015', // 年度选择器\r\n    multiYear: ['2014', '2016'], // 年度范围选择器\r\n    yearMonth: '2023-01', // 年月选择器\r\n    multiYearMonth: ['2026-01', '2026-05'], // 年月范围选择器\r\n    yearQuarter: '2023-01', // 季度选择器\r\n    multiYearQuarter: ['2020-01', '2020-02'], // 季度范围\r\n    dateTime: '2021-01-01 00:00:00', // 日期时间选择器， 默认空\r\n    radioValue: 2, // 单选的value值，默认0\r\n    customSelectorStr: \"自定义选择器\",\r\n    checkboxValueList: [1, 2], // 多选的value[],默认[]\r\n    btnCheckboxValueList: [1, 2], // 按钮式多选框(value[]), 默认[]\r\n    fileList: [\"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\"],\r\n    multiFileList: [\"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\", \"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\"],\r\n    selectorId: 3, // 普通选择器（id）, 默认0\r\n    multiSelectorId: [3,13], // 多列选择器（id[]）, 默认[]\r\n    time: '02:05', // 时间选择器（时:分）， 默认空\r\n    region: [], // 省市区选择器（['省', '市', '区']）, 默认[]\r\n    remark: \"\", // 文本框，默认空\r\n    EDITORHtml: '<p>这是编<span style=\"background-color: rgb(255, 0, 0); color: rgb(255, 255, 255);\">辑器内容</span></p><p><br></p><p><img src=\"https://yyres.bcadx.com/upload/2021-04-09/b39e762176daeaf30ab0d775e83f162b.md5\" width=\"100%\"></p><p><br></p><p><br></p>' // 编辑器\r\n  });\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * form点击事件\r\n   */\r\n  onFormClick(e: YForm.ClickCallbackResult) {\r\n    console.log(e)\r\n    if (e.index != 10) {\r\n      return;\r\n    }\r\n    alert(`点击行：${e.index + 1}`);\r\n  }\r\n\r\n  /**\r\n   * 清除->自定义下拉\r\n   */\r\n  onClear() {\r\n    console.log('自定义下拉')\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-form': defineAsyncComponent(() => import('@/components/yui/form/form.vue'))\r\n    // \"y-form\": defineAsyncComponent(\r\n    //   () => import(\"../../../../../taro-yui-vue/src/components/form/form.vue\")\r\n    // ),\r\n  },\r\n  setup() {\r\n    const service = new YFormService();\r\n    return {\r\n      rowList: service.rowList,\r\n      info: service.info,\r\n      onFormClick: service.onFormClick.bind(service),\r\n      onClear: service.onClear.bind(service),\r\n    };\r\n  },});</script>\n\n# 浏览模式\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-form :pattern=\"pattern\" :rowList=\"rowList\" v-model=\"info\" @click=\"onFormClick\">\r\n      <template #customSlot> <view>这是自定义插槽的内容</view> </template>\r\n      <template #customSlotRight-right> <view>这是自定义右侧插槽</view> </template>\r\n    </y-form>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent, ref, Ref } from \"vue\";import \"./form.scss\";import { YForm, YFormElType, YFormPattern } from \"@/components/yui/form/types/form.d\";import { YTextarea } from \"@/components/yui/textarea/types/textarea.d\";import { CalendarBasic } from \"@/components/yui/calendar/calendarBasic/types/calendarBasic.d\";import { YUpload } from \"@/components/yui/upload/types/upload.d\";import { YCheckboxType } from \"@/components/yui/checkbox/types/checkbox.d\";import { YDateTimePicker } from '@/components/yui/dateTimePicker/types/dateTimePicker.d'import { YFormItemPicker } from '@/components/yui/formItemPicker/types/formItemPicker.d'import { YFormItemText } from '@/components/yui/form/components/formItemText/types/formItemText.d'\r\n\r\nclass YFormService {\r\n  /**\r\n   * 表单模式，view: 查看模式\r\n   * */\r\n  pattern: Ref<string> = ref('view')\r\n\r\n  /**\r\n   * 表单数据列表\r\n   */\r\n  rowList: YForm.FormItem[] = [\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"单行文本框input\",\r\n      type: YFormElType.INPUT,\r\n      property: \"keyWord\",\r\n      options: <YForm.FormItemInputOptions>{\r\n        placeholder: \"单行文本框input\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"仅文字显示无星号\",\r\n      type: YFormElType.TEXT,\r\n      property: \"textVal\",\r\n      options: <YFormItemText.FormItemTextOptions>{\r\n        placeholder: \"仅文字显示无星号\",\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"日期选择器\",\r\n      type: YFormElType.DATE_PICKER,\r\n      property: \"date\",\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        isMultiSelect: false,\r\n        showToolBar: true,\r\n      }\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"日期范围选择器\",\r\n      property: \"multiTime\",\r\n      type: YFormElType.DATE_PICKER,\r\n      options: <CalendarBasic.CalendarOptions>{\r\n        isMultiSelect: true,\r\n        showToolBar: true,\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"日期时间选择器\",\r\n      property: \"dateTime\",\r\n      type: YFormElType.DATE_TIME_PICKER,\r\n      options: <YDateTimePicker.timePickerOptions>{\r\n        placeholder: '日期时间选择器',\r\n        isMultiSelect: false\r\n      },\r\n    },\r\n\r\n\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"单选框\",\r\n      type: YFormElType.RADIO_GROUP,\r\n      property: \"radioValue\",\r\n      options: <YForm.FormItemRadioGroupOptions[]>[\r\n        {\r\n          label: \"强\",\r\n          value: 1,\r\n        },\r\n        {\r\n          label: \"中\",\r\n          value: 2,\r\n        },\r\n        {\r\n          label: \"弱\",\r\n          value: 3,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"多选框\",\r\n      type: YFormElType.CHECKBOX_GROUP,\r\n      property: \"checkboxValueList\",\r\n      options: <YForm.FormItemCheckboxGroupOptions[]>[\r\n        {\r\n          label: \"添加\",\r\n          value: 1,\r\n        },\r\n        {\r\n          label: \"修改\",\r\n          value: 2,\r\n        },\r\n        {\r\n          label: \"删除\",\r\n          value: 3,\r\n        },\r\n      ],\r\n    },{\r\n      require: true,\r\n      show: true,\r\n      label: \"按钮式多选框\",\r\n      type: YFormElType.CHECKBOX_GROUP,\r\n      property: \"btnCheckboxValueList\",\r\n      options: <YForm.FormItemCheckboxGroupOptions[]>[\r\n        {\r\n          label: \"唱歌\",\r\n          value: 1,\r\n          type:YCheckboxType.button\r\n        },\r\n        {\r\n          label: \"玩游戏\",\r\n          value: 2,\r\n          type:YCheckboxType.button\r\n        },\r\n        {\r\n          label: \"游泳\",\r\n          value: 3,\r\n          type:YCheckboxType.button\r\n        },\r\n      ],\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: \"单张图片\",\r\n      type: YFormElType.UPLOAD,\r\n      property: \"fileList\",\r\n      options: <YUpload.YUploadOptions>{\r\n        placeholder: '最多1张',\r\n        multiple: false,\r\n      },\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: \"多张图片\",\r\n      type: YFormElType.UPLOAD,\r\n      property: \"multiFileList\",\r\n      options: <YUpload.YUploadOptions>{\r\n        placeholder: '最多3张',\r\n        multiple: true,\r\n        count: 3,\r\n      },\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: \"自定义选择器\",\r\n      type: YFormElType.CUSTOM_SELECTOR,\r\n      property: \"customSelectorStr\",\r\n      options: <YForm.YFormItemCustomSelectorOptions>{\r\n        placeholder: '自定义选择器'\r\n      }\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: '普通选择器',\r\n      type: YFormElType.SELECTOR,\r\n      property: 'selectorId',\r\n      // viewModeProperty: 'selectorName', // 配置时 optionList可以为[]\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        placeholder: '普通选择器',\r\n        optionList: [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}]\r\n      }\r\n    }, {\r\n      require: false,\r\n      show: true,\r\n      label: '多列选择器',\r\n      type: YFormElType.SELECTOR,\r\n      property: 'multiSelectorId',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        type: 'multiSelector',\r\n        placeholder: '多列选择器',\r\n        optionList: [\r\n          [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n          [{id: 11, label: 'ab1'}, {id: 13, label: 'ab2'}],\r\n        ]\r\n      }\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: '时分选择器',\r\n      type: YFormElType.SELECTOR,\r\n      property: 'time',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        type: 'time',\r\n        placeholder: '时分选择器',\r\n      }\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: '地区选择器',\r\n      type: YFormElType.SELECTOR,\r\n      property: 'region',\r\n      options: <YFormItemPicker.FormItemPickerInfo>{\r\n        type: 'region',\r\n        customItem: '自定义选项',\r\n        placeholder: '地区选择器',\r\n      }\r\n    },{\r\n      require: true,\r\n      show: true,\r\n      label: \"多行文本框textarea\",\r\n      type: YFormElType.TEXTAREA,\r\n      property: \"remark\",\r\n      options: <YTextarea.TextAreaOptions>{\r\n        height: 100,\r\n        placeholder: \"多行文本框textarea\",\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"自定义插槽\",\r\n      type: YFormElType.SLOT,\r\n      property: \"customSlot\"\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"自定义右侧插槽\",\r\n      type: YFormElType.SLOT,\r\n      property: \"customSlotRight\"\r\n    },\r\n  ];\r\n\r\n  /**\r\n   * form信息\r\n   */\r\n  info: Ref<Object> = ref({\r\n    keyWord: \"11\",  // input， 默认空\r\n    textVal: '仅文字显示无星号',\r\n    date: \"2020-01-22\",  // 日期选择器， 默认空\r\n    multiTime: ['2020-01-22', '2020-01-23'], // 日期范围选择器， 默认[]\r\n    dateTime: '2021-01-01 00:00:00', // 日期时间选择器， 默认空\r\n    radioValue: 2, // 单选的value值，默认0\r\n    companyName: \"自定义选择器\",\r\n    checkboxValueList: [1, 2], // 多选的value[],默认[]\r\n    btnCheckboxValueList: [1, 2], // 按钮式多选框(value[]), 默认[]\r\n    fileList: [\"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\"],\r\n    multiFileList: [\"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\", \"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\"],\r\n    selectorId: 3, // 普通选择器（id）, 默认0\r\n    selectorName: '普通选择器值', // 普通选择器值\r\n    multiSelectorId: [3,13], // 多列选择器（id[]）, 默认[]\r\n    time: '02:05', // 时间选择器（时:分）， 默认空\r\n    region: [], // 省市区选择器（['省', '市', '区']）, 默认[]\r\n    remark: \"111\",\r\n  });\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * form点击事件\r\n   */\r\n  onFormClick(e: YForm.ClickCallbackResult) {\r\n    if (e.index != 10) {\r\n      return;\r\n    }\r\n    alert(`点击行：${e.index + 1}`);\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    // 'y-form': defineAsyncComponent(() => import('@/components/yui/form/form.vue'))\r\n    \"y-form\": defineAsyncComponent(\r\n      () => import(\"../../../../../taro-yui-vue/src/components/form/form.vue\")\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new YFormService();\r\n    return {\r\n      pattern: service.pattern,\r\n      rowList: service.rowList,\r\n      info: service.info,\r\n      onFormClick: service.onFormClick.bind(service),\r\n    };\r\n  },});</script>\n\n# 属性\n/**\n * 表单模式\n */\nexport enum YFormPattern {\n  /**\n   * 编辑\n   */\n  EDIT = 'edit',\n\n  /**\n   * 查看\n   */\n  VIEW = 'view',\n}\n\n/**\n * 元素类型\n */\nexport enum YFormElType {\n\n  /**\n   * 文本\n   */\n  INPUT = \"y-form-item-input\",\n\n  /**\n   * 文本\n   */\n  TEXT = \"y-form-item-text\",\n\n  /**\n   * 单选框组\n   */\n  RADIO_GROUP = \"y-form-item-radio-group\",\n\n  /**\n   * 多行文本框\n   */\n  TEXTAREA = \"y-textarea\",\n\n  /**\n   * 自定义选择器\n   */\n  CUSTOM_SELECTOR = \"y-form-item-custom-selector\",\n\n  /**\n   * 选择器\n   */\n  SELECTOR = 'y-form-item-picker',\n\n  /**\n   * 日期选择器\n   */\n  DATE_PICKER = \"y-date-picker\",\n\n  /**\n   * 日期时间选择器\n   */\n  DATE_TIME_PICKER = \"y-date-time-picker\",\n\n  /**\n   * 图片上传\n   */\n  UPLOAD = \"y-upload\",\n\n  /**\n   * 多选框组\n   */\n  CHECKBOX_GROUP = \"y-form-item-checkbox-group\",\n\n  /**\n   * 插槽\n   */\n  SLOT = \"y-form-item-slot\",\n\n  /**\n   * 编辑器\n   */\n  EDITOR = \"y-editor\",\n}\n\n/**\n * 多选框类型\n */\nexport enum YCheckboxType{\n    checkbox=\"checkbox\",\n    button = \"button\"\n}\n\n/**\n * 表单项\n */\nexport interface FormItem {\n\n  /**\n   * 是否必须\n   */\n  require: boolean\n\n  /**\n   * 是否显示\n   */\n  show: boolean\n\n  /**\n   * 单表行名称\n   */\n  label: string\n\n  /**\n   * 类型\n   */\n  type: YFormElType\n\n  /**\n   * 绑定的字段\n   */\n  property: string\n\n  /**\n   * 浏览模式，绑定的字段\n   * */\n  viewModeProperty?: string\n\n  /**\n   * 参数\n   */\n  options?: FormItemInputOptions | YFormItemText.FormItemTextOptions | FormItemRadioGroupOptions[] | YTextarea.TextAreaOptions | YFormItemCustomSelectorOptions\n    | CalendarBasic.CalendarOptions | YDateTimePicker.timePickerOptions | YUpload.YUploadOptions | FormItemCheckboxGroupOptions | YFormItemPicker.FormItemPickerInfo\n}\n\n/**\n * 文本框参数\n */\nexport interface FormItemInputOptions {\n\n  /**\n   * 提示信息\n   */\n  placeholder: string\n\n  /**\n   * input 类型，数字：INPUT_NUMBER 手机号：INPUT_PHONE\n   */\n  type?: string\n\n  /***\n   * 是否能输入\n   */\n  disabled?: boolean\n}\n\n\n\n/**\n * 自定义选择器参数\n */\nexport interface YFormItemCustomSelectorOptions {\n\n  /**\n   * 提示信息\n   */\n  placeholder: string\n\n\n  /**\n   * 是否能输入\n   */\n  disabled?: boolean\n\n  /**\n   * 是否可清除，默认true\n   */\n  canClear?: boolean\n}\n\n/**\n * 单选框组参数\n */\nexport interface FormItemRadioGroupOptions {\n\n  /**\n   * 显示标签\n   */\n  label: string\n\n  /**\n   * 值\n   */\n  value: boolean | string | number\n}\n\n/**\n * 多选框组参数\n */\nexport interface FormItemCheckboxGroupOptions {\n\n  /**\n   * 显示标签\n   */\n  label: string\n\n  /**\n   * 值\n   */\n  value: boolean | string | number\n\n  /**\n   * 类型：checkbox/button， 默认checkbox\n   */\n  type?: YCheckboxType\n}\n\n/**\n * 选择器选项列表项\n */\nexport interface FormItemPickerOption {\n  /**\n   * 显示标签\n   */\n  label: string;\n\n  /**\n   * 选项值\n   */\n  id: number | string;\n}\n\n/**\n * 属性\n */\nexport interface Props extends Record<string, unknown> {\n  /**\n   * 表单类型：编辑(edit)或查看(view), 默认edit\n   */\n  pattern?: string\n\n  /**\n   * 表单行列表\n   */\n  rowList: FormItem[]\n\n  /**\n   * 绑定数据\n   */\n  modelValue: Object\n}\n\n# Slots\nname                说明        \n${property}-right   表单项右侧内容   \n${property}         表单项",
      "normalizedContent": "# 表单 y-form\n由输入框、选择器、单选框、多选框等控件组成，用以收集、校验、提交数据； 支持编辑/浏览模式：pattern = edit / view [yformeltype.date_picker, yformeltype.date_time_picker, yformeltype.custom_selector, yformeltype.selector]支持清除配置，默认必填的不可清除\n\n# 组件名称\ny-form\n\n# 依赖组件\n 1. y-form-item-checkbox-group\n 2. y-textarea\n 3. y-date-picker\n 4. y-date-time-picker\n 5. y-upload\n 6. y-form-item-picker\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-form :rowlist=\"rowlist\" v-model=\"info\" @click=\"onformclick\" @clear=\"onclear\">\r\n      <template #customslot> <view>这是自定义插槽的内容</view> </template>\r\n      <template #customslotright-right> <view>这是自定义右侧插槽</view> </template>\r\n    </y-form>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent, ref, ref } from \"vue\";import \"./form.scss\";import { yform, yformeltype } from \"@/components/yui/form/types/form.d\";import { yformiteminputeltype } from \"@/components/yui/form/components/formiteminput/types/formiteminput.d\";import { ytextarea } from \"@/components/yui/textarea/types/textarea.d\";import { calendarbasic, calendartypeenum } from \"@/components/yui/calendar/calendarbasic/types/calendarbasic.d\";import { yupload } from \"@/components/yui/upload/types/upload.d\";import { ycheckboxtype } from \"@/components/yui/checkbox/types/checkbox.d\";import { ydatetimepicker } from '@/components/yui/datetimepicker/types/datetimepicker.d'import { yformitempicker } from '@/components/yui/formitempicker/types/formitempicker.d'import { yformitemtext } from '@/components/yui/form/components/formitemtext/types/formitemtext.d'import { yeditor, yeditorimgeltype } from '@/components/yui/editor/types/editor.d'\r\n\r\n\r\n\r\n\r\nclass yformservice {\r\n  /**\r\n   * 表单数据列表\r\n   */\r\n  rowlist: yform.formitem[] = [\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"单行文本框input\",\r\n      type: yformeltype.input,\r\n      property: \"keyword\",\r\n      options: <yform.formiteminputoptions>{\r\n        placeholder: \"单行文本框input\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"数字文本框input\",\r\n      type: yformeltype.input,\r\n      property: \"numberkeyword\",\r\n      options: <yform.formiteminputoptions>{\r\n        type: yformiteminputeltype.input_number,\r\n        placeholder: \"单行数字文本框input\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"小数点文本框input\",\r\n      type: yformeltype.input,\r\n      property: \"digitkeyword\",\r\n      options: <yform.formiteminputoptions>{\r\n        type: yformiteminputeltype.input_digit,\r\n        placeholder: \"小数点文本框input\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"手机号input\",\r\n      type: yformeltype.input,\r\n      property: \"phonekeyword\",\r\n      options: <yform.formiteminputoptions>{\r\n        type: yformiteminputeltype.input_phone,\r\n        placeholder: \"手机号input\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"不可输入input\",\r\n      type: yformeltype.input,\r\n      property: \"notinputkeyword\",\r\n      options: <yform.formiteminputoptions>{\r\n        disabled: true,\r\n        placeholder: \"单行文本框input不可输入\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"仅文字显示无星号\",\r\n      type: yformeltype.text,\r\n      property: \"textval\",\r\n      options: <yformitemtext.formitemtextoptions>{\r\n        placeholder: \"仅文字显示无星号\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"日期选择器\",\r\n      type: yformeltype.date_picker,\r\n      property: \"date\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        ismultiselect: false,\r\n        showtoolbar: true,\r\n        canclear: true\r\n      }\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"日期范围选择器\",\r\n      property: \"multitime\",\r\n      type: yformeltype.date_picker,\r\n      options: <calendarbasic.calendaroptions>{\r\n        ismultiselect: true,\r\n        showtoolbar: true,\r\n        // canclear: false\r\n        // maskouterelid: '' 弹窗表单上配置 id名称, options类型用ydatepicker.ydatepickeroptions\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"年度选择器\",\r\n      property: \"year\",\r\n      type: yformeltype.date_picker,\r\n      options: <ydatetimepicker.timepickeroptions>{\r\n        placeholder: '年度选择器',\r\n        type: calendartypeenum.year,\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"年度范围选择器\",\r\n      property: \"multiyear\",\r\n      type: yformeltype.date_picker,\r\n      options: <ydatetimepicker.timepickeroptions>{\r\n        placeholder: '年度选择器',\r\n        type: calendartypeenum.year,\r\n        ismultiselect: true,\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"年月选择器\",\r\n      property: \"yearmonth\",\r\n      type: yformeltype.date_picker,\r\n      options: <ydatetimepicker.timepickeroptions>{\r\n        placeholder: '日期时间选择器',\r\n        type: calendartypeenum.month\r\n        // canclear: false\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"年月范围选择器\",\r\n      property: \"multiyearmonth\",\r\n      type: yformeltype.date_picker,\r\n      options: <ydatetimepicker.timepickeroptions>{\r\n        placeholder: '日期时间选择器',\r\n        type: calendartypeenum.month,\r\n        ismultiselect: true,\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"季度度选择器\",\r\n      property: \"yearquarter\",\r\n      type: yformeltype.date_picker,\r\n      options: <ydatetimepicker.timepickeroptions>{\r\n        placeholder: '季度度选择器',\r\n        type: calendartypeenum.quarter,\r\n        // canclear: false\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"季度范围选择器\",\r\n      property: \"multiyearquarter\",\r\n      type: yformeltype.date_picker,\r\n      options: <ydatetimepicker.timepickeroptions>{\r\n        placeholder: '季度度选择器',\r\n        type: calendartypeenum.quarter,\r\n        ismultiselect: true,\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"日期时间选择器\",\r\n      property: \"datetime\",\r\n      type: yformeltype.date_time_picker,\r\n      options: <ydatetimepicker.timepickeroptions>{\r\n        placeholder: '日期时间选择器',\r\n        ismultiselect: false,\r\n        // canclear: false\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"单选框\",\r\n      type: yformeltype.radio_group,\r\n      property: \"radiovalue\",\r\n      options: <yform.formitemradiogroupoptions[]>[\r\n        {\r\n          label: \"强\",\r\n          value: 1,\r\n        },\r\n        {\r\n          label: \"中\",\r\n          value: 2,\r\n        },\r\n        {\r\n          label: \"弱\",\r\n          value: 3,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"多选框\",\r\n      type: yformeltype.checkbox_group,\r\n      property: \"checkboxvaluelist\",\r\n      options: <yform.formitemcheckboxgroupoptions[]>[\r\n        {\r\n          label: \"添加\",\r\n          value: 1,\r\n        },\r\n        {\r\n          label: \"修改\",\r\n          value: 2,\r\n        },\r\n        {\r\n          label: \"删除\",\r\n          value: 3,\r\n        },\r\n      ],\r\n    },{\r\n      require: true,\r\n      show: true,\r\n      label: \"按钮式多选框\",\r\n      type: yformeltype.checkbox_group,\r\n      property: \"btncheckboxvaluelist\",\r\n      options: <yform.formitemcheckboxgroupoptions[]>[\r\n        {\r\n          label: \"唱歌\",\r\n          value: 1,\r\n          type:ycheckboxtype.button\r\n        },\r\n        {\r\n          label: \"玩游戏\",\r\n          value: 2,\r\n          type:ycheckboxtype.button\r\n        },\r\n        {\r\n          label: \"游泳\",\r\n          value: 3,\r\n          type:ycheckboxtype.button\r\n        },{\r\n          label: \"玩游戏\",\r\n          value: 4,\r\n          type:ycheckboxtype.button\r\n        },\r\n        {\r\n          label: \"游泳\",\r\n          value: 5,\r\n          type:ycheckboxtype.button\r\n        }\r\n      ],\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: \"单张图片\",\r\n      type: yformeltype.upload,\r\n      property: \"filelist\",\r\n      options: <yupload.yuploadoptions>{\r\n        placeholder: '最多1张',\r\n        multiple: false,\r\n      },\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: \"多张图片\",\r\n      type: yformeltype.upload,\r\n      property: \"multifilelist\",\r\n      options: <yupload.yuploadoptions>{\r\n        placeholder: '最多3张',\r\n        multiple: true,\r\n        count: 3,\r\n      },\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: \"自定义选择器\",\r\n      type: yformeltype.custom_selector,\r\n      property: \"customselectorstr\",\r\n      options: <yform.yformitemcustomselectoroptions>{\r\n        placeholder: '自定义选择器',\r\n        canclear: true\r\n      }\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: '普通选择器',\r\n      type: yformeltype.selector,\r\n      property: 'selectorid',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        placeholder: '普通选择器',\r\n        optionlist: [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n        canclear: true\r\n      }\r\n    }, {\r\n      require: false,\r\n      show: true,\r\n      label: '多列选择器',\r\n      type: yformeltype.selector,\r\n      property: 'multiselectorid',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        type: 'multiselector',\r\n        placeholder: '多列选择器',\r\n        optionlist: [\r\n          [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n          [{id: 11, label: 'ab1'}, {id: 13, label: 'ab2'}],\r\n        ],\r\n        // canclear: false\r\n      }\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: '时分选择器',\r\n      type: yformeltype.selector,\r\n      property: 'time',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        type: 'time',\r\n        placeholder: '时分选择器',\r\n        // canclear: false\r\n      }\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: '地区选择器',\r\n      type: yformeltype.selector,\r\n      property: 'region',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        type: 'region',\r\n        customitem: '自定义选项',\r\n        placeholder: '地区选择器',\r\n        // canclear: false\r\n      }\r\n    },{\r\n      require: true,\r\n      show: true,\r\n      label: \"多行文本框textarea\",\r\n      type: yformeltype.textarea,\r\n      property: \"remark\",\r\n      options: <ytextarea.textareaoptions>{\r\n        height: 100,\r\n        placeholder: \"多行文本框textarea\",\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"自定义插槽\",\r\n      type: yformeltype.slot,\r\n      property: \"customslot\"\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"自定义右侧插槽\",\r\n      type: yformeltype.slot,\r\n      property: \"customslotright\"\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"编辑器\",\r\n      type: yformeltype.editor,\r\n      property: \"editorhtml\",\r\n      options: <yeditor.editoroptions>{\r\n        placeholder: '编辑器',\r\n        toollist: [\r\n          yeditorimgeltype.font_size,\r\n          yeditorimgeltype.bold,\r\n          yeditorimgeltype.italic,\r\n          yeditorimgeltype.color,\r\n          yeditorimgeltype.direction,\r\n          yeditorimgeltype.background_color,\r\n          yeditorimgeltype.align_left,\r\n          yeditorimgeltype.align_right,\r\n          yeditorimgeltype.align_center,\r\n          yeditorimgeltype.align_justify,\r\n          yeditorimgeltype.header_1,\r\n          yeditorimgeltype.header_2,\r\n          yeditorimgeltype.header_3,\r\n          yeditorimgeltype.header_4,\r\n          yeditorimgeltype.indent,\r\n          yeditorimgeltype.outdent,\r\n          yeditorimgeltype.letter_spacing,\r\n          yeditorimgeltype.line_height,\r\n          yeditorimgeltype.script_sub,\r\n          yeditorimgeltype.script_super,\r\n          yeditorimgeltype.strike,\r\n          yeditorimgeltype.under_line,\r\n          yeditorimgeltype.list_ordered,\r\n          yeditorimgeltype.list_bullet,\r\n          yeditorimgeltype.list_check,\r\n          yeditorimgeltype.margin_bottom,\r\n          yeditorimgeltype.margin_top,\r\n          yeditorimgeltype.date,\r\n          yeditorimgeltype.insert_divider,\r\n          yeditorimgeltype.insert_image,\r\n          yeditorimgeltype.re_do,\r\n          yeditorimgeltype.un_do,\r\n          yeditorimgeltype.remove_format,\r\n          yeditorimgeltype.clear,\r\n        ],\r\n      }\r\n    },\r\n  ];\r\n\r\n  /**\r\n   * form信息\r\n   */\r\n  info: ref<object> = ref({\r\n    keyword: \"11\",  // input， 默认空\r\n    numberkeyword: 0,\r\n    digitkeyword: 0,\r\n    phonekeyword: '15900000',\r\n    notinputkeyword: \"不可修改\",  // input， 默认空\r\n    textval: '仅文字显示无星号',\r\n    date: \"2020-01-22\",  // 日期选择器， 默认空\r\n    multitime: ['2020-01-22', '2020-01-23'], // 日期范围选择器， 默认[]\r\n    year: '2015', // 年度选择器\r\n    multiyear: ['2014', '2016'], // 年度范围选择器\r\n    yearmonth: '2023-01', // 年月选择器\r\n    multiyearmonth: ['2026-01', '2026-05'], // 年月范围选择器\r\n    yearquarter: '2023-01', // 季度选择器\r\n    multiyearquarter: ['2020-01', '2020-02'], // 季度范围\r\n    datetime: '2021-01-01 00:00:00', // 日期时间选择器， 默认空\r\n    radiovalue: 2, // 单选的value值，默认0\r\n    customselectorstr: \"自定义选择器\",\r\n    checkboxvaluelist: [1, 2], // 多选的value[],默认[]\r\n    btncheckboxvaluelist: [1, 2], // 按钮式多选框(value[]), 默认[]\r\n    filelist: [\"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\"],\r\n    multifilelist: [\"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\", \"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\"],\r\n    selectorid: 3, // 普通选择器（id）, 默认0\r\n    multiselectorid: [3,13], // 多列选择器（id[]）, 默认[]\r\n    time: '02:05', // 时间选择器（时:分）， 默认空\r\n    region: [], // 省市区选择器（['省', '市', '区']）, 默认[]\r\n    remark: \"\", // 文本框，默认空\r\n    editorhtml: '<p>这是编<span style=\"background-color: rgb(255, 0, 0); color: rgb(255, 255, 255);\">辑器内容</span></p><p><br></p><p><img src=\"https://yyres.bcadx.com/upload/2021-04-09/b39e762176daeaf30ab0d775e83f162b.md5\" width=\"100%\"></p><p><br></p><p><br></p>' // 编辑器\r\n  });\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * form点击事件\r\n   */\r\n  onformclick(e: yform.clickcallbackresult) {\r\n    console.log(e)\r\n    if (e.index != 10) {\r\n      return;\r\n    }\r\n    alert(`点击行：${e.index + 1}`);\r\n  }\r\n\r\n  /**\r\n   * 清除->自定义下拉\r\n   */\r\n  onclear() {\r\n    console.log('自定义下拉')\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-form': defineasynccomponent(() => import('@/components/yui/form/form.vue'))\r\n    // \"y-form\": defineasynccomponent(\r\n    //   () => import(\"../../../../../taro-yui-vue/src/components/form/form.vue\")\r\n    // ),\r\n  },\r\n  setup() {\r\n    const service = new yformservice();\r\n    return {\r\n      rowlist: service.rowlist,\r\n      info: service.info,\r\n      onformclick: service.onformclick.bind(service),\r\n      onclear: service.onclear.bind(service),\r\n    };\r\n  },});</script>\n\n# 浏览模式\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-form :pattern=\"pattern\" :rowlist=\"rowlist\" v-model=\"info\" @click=\"onformclick\">\r\n      <template #customslot> <view>这是自定义插槽的内容</view> </template>\r\n      <template #customslotright-right> <view>这是自定义右侧插槽</view> </template>\r\n    </y-form>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent, ref, ref } from \"vue\";import \"./form.scss\";import { yform, yformeltype, yformpattern } from \"@/components/yui/form/types/form.d\";import { ytextarea } from \"@/components/yui/textarea/types/textarea.d\";import { calendarbasic } from \"@/components/yui/calendar/calendarbasic/types/calendarbasic.d\";import { yupload } from \"@/components/yui/upload/types/upload.d\";import { ycheckboxtype } from \"@/components/yui/checkbox/types/checkbox.d\";import { ydatetimepicker } from '@/components/yui/datetimepicker/types/datetimepicker.d'import { yformitempicker } from '@/components/yui/formitempicker/types/formitempicker.d'import { yformitemtext } from '@/components/yui/form/components/formitemtext/types/formitemtext.d'\r\n\r\nclass yformservice {\r\n  /**\r\n   * 表单模式，view: 查看模式\r\n   * */\r\n  pattern: ref<string> = ref('view')\r\n\r\n  /**\r\n   * 表单数据列表\r\n   */\r\n  rowlist: yform.formitem[] = [\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"单行文本框input\",\r\n      type: yformeltype.input,\r\n      property: \"keyword\",\r\n      options: <yform.formiteminputoptions>{\r\n        placeholder: \"单行文本框input\",\r\n      },\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"仅文字显示无星号\",\r\n      type: yformeltype.text,\r\n      property: \"textval\",\r\n      options: <yformitemtext.formitemtextoptions>{\r\n        placeholder: \"仅文字显示无星号\",\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"日期选择器\",\r\n      type: yformeltype.date_picker,\r\n      property: \"date\",\r\n      options: <calendarbasic.calendaroptions>{\r\n        ismultiselect: false,\r\n        showtoolbar: true,\r\n      }\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"日期范围选择器\",\r\n      property: \"multitime\",\r\n      type: yformeltype.date_picker,\r\n      options: <calendarbasic.calendaroptions>{\r\n        ismultiselect: true,\r\n        showtoolbar: true,\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"日期时间选择器\",\r\n      property: \"datetime\",\r\n      type: yformeltype.date_time_picker,\r\n      options: <ydatetimepicker.timepickeroptions>{\r\n        placeholder: '日期时间选择器',\r\n        ismultiselect: false\r\n      },\r\n    },\r\n\r\n\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"单选框\",\r\n      type: yformeltype.radio_group,\r\n      property: \"radiovalue\",\r\n      options: <yform.formitemradiogroupoptions[]>[\r\n        {\r\n          label: \"强\",\r\n          value: 1,\r\n        },\r\n        {\r\n          label: \"中\",\r\n          value: 2,\r\n        },\r\n        {\r\n          label: \"弱\",\r\n          value: 3,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      require: true,\r\n      show: true,\r\n      label: \"多选框\",\r\n      type: yformeltype.checkbox_group,\r\n      property: \"checkboxvaluelist\",\r\n      options: <yform.formitemcheckboxgroupoptions[]>[\r\n        {\r\n          label: \"添加\",\r\n          value: 1,\r\n        },\r\n        {\r\n          label: \"修改\",\r\n          value: 2,\r\n        },\r\n        {\r\n          label: \"删除\",\r\n          value: 3,\r\n        },\r\n      ],\r\n    },{\r\n      require: true,\r\n      show: true,\r\n      label: \"按钮式多选框\",\r\n      type: yformeltype.checkbox_group,\r\n      property: \"btncheckboxvaluelist\",\r\n      options: <yform.formitemcheckboxgroupoptions[]>[\r\n        {\r\n          label: \"唱歌\",\r\n          value: 1,\r\n          type:ycheckboxtype.button\r\n        },\r\n        {\r\n          label: \"玩游戏\",\r\n          value: 2,\r\n          type:ycheckboxtype.button\r\n        },\r\n        {\r\n          label: \"游泳\",\r\n          value: 3,\r\n          type:ycheckboxtype.button\r\n        },\r\n      ],\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: \"单张图片\",\r\n      type: yformeltype.upload,\r\n      property: \"filelist\",\r\n      options: <yupload.yuploadoptions>{\r\n        placeholder: '最多1张',\r\n        multiple: false,\r\n      },\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: \"多张图片\",\r\n      type: yformeltype.upload,\r\n      property: \"multifilelist\",\r\n      options: <yupload.yuploadoptions>{\r\n        placeholder: '最多3张',\r\n        multiple: true,\r\n        count: 3,\r\n      },\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: \"自定义选择器\",\r\n      type: yformeltype.custom_selector,\r\n      property: \"customselectorstr\",\r\n      options: <yform.yformitemcustomselectoroptions>{\r\n        placeholder: '自定义选择器'\r\n      }\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: '普通选择器',\r\n      type: yformeltype.selector,\r\n      property: 'selectorid',\r\n      // viewmodeproperty: 'selectorname', // 配置时 optionlist可以为[]\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        placeholder: '普通选择器',\r\n        optionlist: [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}]\r\n      }\r\n    }, {\r\n      require: false,\r\n      show: true,\r\n      label: '多列选择器',\r\n      type: yformeltype.selector,\r\n      property: 'multiselectorid',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        type: 'multiselector',\r\n        placeholder: '多列选择器',\r\n        optionlist: [\r\n          [{id: 1, label: 'aa'}, {id: 3, label: 'bb'}],\r\n          [{id: 11, label: 'ab1'}, {id: 13, label: 'ab2'}],\r\n        ]\r\n      }\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: '时分选择器',\r\n      type: yformeltype.selector,\r\n      property: 'time',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        type: 'time',\r\n        placeholder: '时分选择器',\r\n      }\r\n    }, {\r\n      require: true,\r\n      show: true,\r\n      label: '地区选择器',\r\n      type: yformeltype.selector,\r\n      property: 'region',\r\n      options: <yformitempicker.formitempickerinfo>{\r\n        type: 'region',\r\n        customitem: '自定义选项',\r\n        placeholder: '地区选择器',\r\n      }\r\n    },{\r\n      require: true,\r\n      show: true,\r\n      label: \"多行文本框textarea\",\r\n      type: yformeltype.textarea,\r\n      property: \"remark\",\r\n      options: <ytextarea.textareaoptions>{\r\n        height: 100,\r\n        placeholder: \"多行文本框textarea\",\r\n      },\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"自定义插槽\",\r\n      type: yformeltype.slot,\r\n      property: \"customslot\"\r\n    },\r\n    {\r\n      require: false,\r\n      show: true,\r\n      label: \"自定义右侧插槽\",\r\n      type: yformeltype.slot,\r\n      property: \"customslotright\"\r\n    },\r\n  ];\r\n\r\n  /**\r\n   * form信息\r\n   */\r\n  info: ref<object> = ref({\r\n    keyword: \"11\",  // input， 默认空\r\n    textval: '仅文字显示无星号',\r\n    date: \"2020-01-22\",  // 日期选择器， 默认空\r\n    multitime: ['2020-01-22', '2020-01-23'], // 日期范围选择器， 默认[]\r\n    datetime: '2021-01-01 00:00:00', // 日期时间选择器， 默认空\r\n    radiovalue: 2, // 单选的value值，默认0\r\n    companyname: \"自定义选择器\",\r\n    checkboxvaluelist: [1, 2], // 多选的value[],默认[]\r\n    btncheckboxvaluelist: [1, 2], // 按钮式多选框(value[]), 默认[]\r\n    filelist: [\"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\"],\r\n    multifilelist: [\"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\", \"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\"],\r\n    selectorid: 3, // 普通选择器（id）, 默认0\r\n    selectorname: '普通选择器值', // 普通选择器值\r\n    multiselectorid: [3,13], // 多列选择器（id[]）, 默认[]\r\n    time: '02:05', // 时间选择器（时:分）， 默认空\r\n    region: [], // 省市区选择器（['省', '市', '区']）, 默认[]\r\n    remark: \"111\",\r\n  });\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * form点击事件\r\n   */\r\n  onformclick(e: yform.clickcallbackresult) {\r\n    if (e.index != 10) {\r\n      return;\r\n    }\r\n    alert(`点击行：${e.index + 1}`);\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    // 'y-form': defineasynccomponent(() => import('@/components/yui/form/form.vue'))\r\n    \"y-form\": defineasynccomponent(\r\n      () => import(\"../../../../../taro-yui-vue/src/components/form/form.vue\")\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new yformservice();\r\n    return {\r\n      pattern: service.pattern,\r\n      rowlist: service.rowlist,\r\n      info: service.info,\r\n      onformclick: service.onformclick.bind(service),\r\n    };\r\n  },});</script>\n\n# 属性\n/**\n * 表单模式\n */\nexport enum yformpattern {\n  /**\n   * 编辑\n   */\n  edit = 'edit',\n\n  /**\n   * 查看\n   */\n  view = 'view',\n}\n\n/**\n * 元素类型\n */\nexport enum yformeltype {\n\n  /**\n   * 文本\n   */\n  input = \"y-form-item-input\",\n\n  /**\n   * 文本\n   */\n  text = \"y-form-item-text\",\n\n  /**\n   * 单选框组\n   */\n  radio_group = \"y-form-item-radio-group\",\n\n  /**\n   * 多行文本框\n   */\n  textarea = \"y-textarea\",\n\n  /**\n   * 自定义选择器\n   */\n  custom_selector = \"y-form-item-custom-selector\",\n\n  /**\n   * 选择器\n   */\n  selector = 'y-form-item-picker',\n\n  /**\n   * 日期选择器\n   */\n  date_picker = \"y-date-picker\",\n\n  /**\n   * 日期时间选择器\n   */\n  date_time_picker = \"y-date-time-picker\",\n\n  /**\n   * 图片上传\n   */\n  upload = \"y-upload\",\n\n  /**\n   * 多选框组\n   */\n  checkbox_group = \"y-form-item-checkbox-group\",\n\n  /**\n   * 插槽\n   */\n  slot = \"y-form-item-slot\",\n\n  /**\n   * 编辑器\n   */\n  editor = \"y-editor\",\n}\n\n/**\n * 多选框类型\n */\nexport enum ycheckboxtype{\n    checkbox=\"checkbox\",\n    button = \"button\"\n}\n\n/**\n * 表单项\n */\nexport interface formitem {\n\n  /**\n   * 是否必须\n   */\n  require: boolean\n\n  /**\n   * 是否显示\n   */\n  show: boolean\n\n  /**\n   * 单表行名称\n   */\n  label: string\n\n  /**\n   * 类型\n   */\n  type: yformeltype\n\n  /**\n   * 绑定的字段\n   */\n  property: string\n\n  /**\n   * 浏览模式，绑定的字段\n   * */\n  viewmodeproperty?: string\n\n  /**\n   * 参数\n   */\n  options?: formiteminputoptions | yformitemtext.formitemtextoptions | formitemradiogroupoptions[] | ytextarea.textareaoptions | yformitemcustomselectoroptions\n    | calendarbasic.calendaroptions | ydatetimepicker.timepickeroptions | yupload.yuploadoptions | formitemcheckboxgroupoptions | yformitempicker.formitempickerinfo\n}\n\n/**\n * 文本框参数\n */\nexport interface formiteminputoptions {\n\n  /**\n   * 提示信息\n   */\n  placeholder: string\n\n  /**\n   * input 类型，数字：input_number 手机号：input_phone\n   */\n  type?: string\n\n  /***\n   * 是否能输入\n   */\n  disabled?: boolean\n}\n\n\n\n/**\n * 自定义选择器参数\n */\nexport interface yformitemcustomselectoroptions {\n\n  /**\n   * 提示信息\n   */\n  placeholder: string\n\n\n  /**\n   * 是否能输入\n   */\n  disabled?: boolean\n\n  /**\n   * 是否可清除，默认true\n   */\n  canclear?: boolean\n}\n\n/**\n * 单选框组参数\n */\nexport interface formitemradiogroupoptions {\n\n  /**\n   * 显示标签\n   */\n  label: string\n\n  /**\n   * 值\n   */\n  value: boolean | string | number\n}\n\n/**\n * 多选框组参数\n */\nexport interface formitemcheckboxgroupoptions {\n\n  /**\n   * 显示标签\n   */\n  label: string\n\n  /**\n   * 值\n   */\n  value: boolean | string | number\n\n  /**\n   * 类型：checkbox/button， 默认checkbox\n   */\n  type?: ycheckboxtype\n}\n\n/**\n * 选择器选项列表项\n */\nexport interface formitempickeroption {\n  /**\n   * 显示标签\n   */\n  label: string;\n\n  /**\n   * 选项值\n   */\n  id: number | string;\n}\n\n/**\n * 属性\n */\nexport interface props extends record<string, unknown> {\n  /**\n   * 表单类型：编辑(edit)或查看(view), 默认edit\n   */\n  pattern?: string\n\n  /**\n   * 表单行列表\n   */\n  rowlist: formitem[]\n\n  /**\n   * 绑定数据\n   */\n  modelvalue: object\n}\n\n# slots\nname                说明        \n${property}-right   表单项右侧内容   \n${property}         表单项",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "表单项-多选框组 y-form-item-checkbox-group",
      "frontmatter": {},
      "regularPath": "/component/form/formItemCheckboxGroup.html",
      "relativePath": "component/form/formItemCheckboxGroup.md",
      "key": "v-4e25ae5c",
      "path": "/component/form/formItemCheckboxGroup.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 65
        },
        {
          "level": 3,
          "title": "依赖组件",
          "slug": "依赖组件",
          "normalizedTitle": "依赖组件",
          "charIndex": 100
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 155
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 1868
        }
      ],
      "headersStr": "组件名称 依赖组件 基础用法 属性",
      "content": "# 表单项-多选框组 y-form-item-checkbox-group\n用于y-search-bar、y-form组件\n\n# 组件名称\ny-form-item-checkbox-group\n\n# 依赖组件\n 1. y-checkbox\n 2. y-checkbox-group\n 3. y-form\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    权限：\r\n    <y-form-item-checkbox-group :options=\"optionList\" v-model=\"modelValue\">\r\n    </y-form-item-checkbox-group>\r\n  </view></template><script lang=\"ts\">\r\n  import { defineComponent, defineAsyncComponent, ref, Ref } from \"vue\";\r\n  import \"./formItemCheckboxGroup.scss\";\r\n  // import { YForm } from \"../../../../taro-yui-vue/src/components/form/types/form.d\";\r\n  import { YForm } from \"@/components/yui/formItemCheckboxGroup/types/formItemCheckboxGroup.d\";\r\n\r\n  /**\r\n   * 表单项-多选框组\r\n   */\r\n  class YFormItemCheckboxGroupService {\r\n    /**\r\n     * 表单数据列表\r\n     */\r\n    optionList: YForm.FormItemCheckboxGroupOptions[] = [\r\n      {\r\n        label: \"添加\",\r\n        value: 1,\r\n      },\r\n      {\r\n        label: \"修改\",\r\n        value: 2,\r\n      },\r\n      {\r\n        label: \"删除\",\r\n        value: 3,\r\n      },\r\n    ];\r\n\r\n    /**\r\n     * 选中值\r\n     */\r\n    modelValue: Ref<number[]> = ref([1]);\r\n  }\r\n\r\n  export default defineComponent({\r\n    components: {\r\n      'y-form-item-checkbox-group': defineAsyncComponent(() => import('@/components/yui/formItemCheckboxGroup/formItemCheckboxGroup.vue'))\r\n      // \"y-form-item-checkbox-group\": defineAsyncComponent(\r\n      //   () =>\r\n      //     import(\r\n      //       \"../../../../taro-yui-vue/src/components/formItemCheckboxGroup/formItemCheckboxGroup.vue\"\r\n      //     )\r\n      // ),\r\n    },\r\n    setup() {\r\n      const service = new YFormItemCheckboxGroupService();\r\n      return {\r\n        optionList: service.optionList,\r\n        modelValue: service.modelValue,\r\n      };\r\n    },\r\n  });</script><style lang=\"scss\">\r\n  .container{\r\n    .y-checkbox{\r\n      margin-right: 30px;\r\n    }\r\n  }</style>\n\n# 属性\n/**\n * 属性\n */\nexport interface Props extends Record<string, unknown> {\n    /***\n     * 模式：可编辑edit/可查看view, 默认edit\n     */\n    pattern?: string\n\n    /**\n     * 参数\n     */\n    options: YForm.FormItemCheckboxGroupOptions[]\n\n    /**\n     * 绑定值\n     */\n    modelValue: Checkbox.IModelType[]\n}",
      "normalizedContent": "# 表单项-多选框组 y-form-item-checkbox-group\n用于y-search-bar、y-form组件\n\n# 组件名称\ny-form-item-checkbox-group\n\n# 依赖组件\n 1. y-checkbox\n 2. y-checkbox-group\n 3. y-form\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    权限：\r\n    <y-form-item-checkbox-group :options=\"optionlist\" v-model=\"modelvalue\">\r\n    </y-form-item-checkbox-group>\r\n  </view></template><script lang=\"ts\">\r\n  import { definecomponent, defineasynccomponent, ref, ref } from \"vue\";\r\n  import \"./formitemcheckboxgroup.scss\";\r\n  // import { yform } from \"../../../../taro-yui-vue/src/components/form/types/form.d\";\r\n  import { yform } from \"@/components/yui/formitemcheckboxgroup/types/formitemcheckboxgroup.d\";\r\n\r\n  /**\r\n   * 表单项-多选框组\r\n   */\r\n  class yformitemcheckboxgroupservice {\r\n    /**\r\n     * 表单数据列表\r\n     */\r\n    optionlist: yform.formitemcheckboxgroupoptions[] = [\r\n      {\r\n        label: \"添加\",\r\n        value: 1,\r\n      },\r\n      {\r\n        label: \"修改\",\r\n        value: 2,\r\n      },\r\n      {\r\n        label: \"删除\",\r\n        value: 3,\r\n      },\r\n    ];\r\n\r\n    /**\r\n     * 选中值\r\n     */\r\n    modelvalue: ref<number[]> = ref([1]);\r\n  }\r\n\r\n  export default definecomponent({\r\n    components: {\r\n      'y-form-item-checkbox-group': defineasynccomponent(() => import('@/components/yui/formitemcheckboxgroup/formitemcheckboxgroup.vue'))\r\n      // \"y-form-item-checkbox-group\": defineasynccomponent(\r\n      //   () =>\r\n      //     import(\r\n      //       \"../../../../taro-yui-vue/src/components/formitemcheckboxgroup/formitemcheckboxgroup.vue\"\r\n      //     )\r\n      // ),\r\n    },\r\n    setup() {\r\n      const service = new yformitemcheckboxgroupservice();\r\n      return {\r\n        optionlist: service.optionlist,\r\n        modelvalue: service.modelvalue,\r\n      };\r\n    },\r\n  });</script><style lang=\"scss\">\r\n  .container{\r\n    .y-checkbox{\r\n      margin-right: 30px;\r\n    }\r\n  }</style>\n\n# 属性\n/**\n * 属性\n */\nexport interface props extends record<string, unknown> {\n    /***\n     * 模式：可编辑edit/可查看view, 默认edit\n     */\n    pattern?: string\n\n    /**\n     * 参数\n     */\n    options: yform.formitemcheckboxgroupoptions[]\n\n    /**\n     * 绑定值\n     */\n    modelvalue: checkbox.imodeltype[]\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "单选框 y-radio",
      "frontmatter": {},
      "regularPath": "/component/form/radio.html",
      "relativePath": "component/form/radio.md",
      "key": "v-9fe0bc34",
      "path": "/component/form/radio.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 29
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 67
        },
        {
          "level": 3,
          "title": "单选框组",
          "slug": "单选框组",
          "normalizedTitle": "单选框组",
          "charIndex": 1199
        },
        {
          "level": 3,
          "title": "radio属性",
          "slug": "radio属性",
          "normalizedTitle": "radio属性",
          "charIndex": 2050
        },
        {
          "level": 3,
          "title": "radio-group属性",
          "slug": "radio-group属性",
          "normalizedTitle": "radio-group属性",
          "charIndex": 2318
        },
        {
          "level": 3,
          "title": "radio事件",
          "slug": "radio事件",
          "normalizedTitle": "radio事件",
          "charIndex": 2437
        },
        {
          "level": 3,
          "title": "radio-group事件",
          "slug": "radio-group事件",
          "normalizedTitle": "radio-group事件",
          "charIndex": 2560
        }
      ],
      "headersStr": "组件名称 基础用法 单选框组 radio属性 radio-group属性 radio事件 radio-group事件",
      "content": "# 单选框 y-radio\n在一组备选项中进行单选\n\n# 组件名称\n 1. y-radio\n 2. y-radio-group\n\n# 基础用法\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <view class=\"box\">\r\n      <y-radio :value=\"2\"\r\n               v-model=\"radioValue1\">可选项</y-radio>\r\n      <y-radio :value=\"2\" v-model=\"radioValue\">选中项</y-radio>\r\n    </view>\r\n\r\n    <view>\r\n      <y-radio :value=\"1\" v-model=\"radioValue\" :disabled=\"disabled\">不可选项</y-radio>\r\n      <y-radio :value=\"2\" v-model=\"radioValue\" :disabled=\"disabled\">已选中，不可改</y-radio>\r\n    </view>\r\n\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent,Ref,ref } from 'vue'import './radio.scss'\r\n\r\nclass RadioService{\r\n  /**\r\n   * 单选框选中值\r\n   */\r\n  radioValue1:Ref<number> = ref(0)\r\n\r\n  /**\r\n   * 单选框选中值\r\n   */\r\n  radioValue:Ref<number> = ref(2)\r\n\r\n  /**\r\n   * 是否不可选\r\n   */\r\n  disabled = ref(true)}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-radio': defineAsyncComponent(() => import('@/components/yui/radio/radio.vue'))\r\n  },\r\n  setup() {\r\n    const service = new RadioService()\r\n    return {\r\n      radioValue: service.radioValue,\r\n      radioValue1: service.radioValue1,\r\n      disabled: service.disabled\r\n    };\r\n  }});</script>\n\n# 单选框组\n<template>\r\n  <view v-reSize id=\"container\" class=\"container\">\r\n    <y-radio-group v-model=\"radioValue\">\r\n      <y-radio :value=\"1\">男</y-radio>\r\n      <y-radio :value=\"2\">女</y-radio>\r\n    </y-radio-group>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent, Ref, ref } from \"vue\";import \"./radioGroup.scss\";\r\n\r\nclass RadioService {\r\n  /**\r\n   * 单选框选中值\r\n   */\r\n  radioValue: Ref<number> = ref(2);}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    \"y-radio\": defineAsyncComponent(\r\n      () => import(\"@/components/yui/radio/radio.vue\")\r\n    ),\r\n    \"y-radio-group\": defineAsyncComponent(\r\n      () => import(\"@/components/yui/radioGroup/radioGroup.vue\")\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new RadioService();\r\n    return {\r\n      radioValue: service.radioValue,\r\n    };\r\n  },});</script>\n\n# radio属性\nexport type IModelType = boolean | string | number\n\n/**\n * 属性\n */\nexport interface Props {\n\n    /**\n     * 选中值\n     */\n    modelValue: IModelType\n\n    /**\n     * 值\n     */\n    value: IModelType\n\n    /**\n     * 是否不可选，默认false\n     */\n    disabled?: boolean\n}\n\n# radio-group属性\n/**\n * 属性\n */\nexport interface Props {\n\n    /**\n     * 选中值\n     */\n    modelValue: Radio.IModelType\n}\n\n# radio事件\n/**\n * 事件\n */\nexport interface Events{\n\n    /**\n     * 绑定值变化时触发，选中的radio value值\n     */\n    change:IModelType\n}\n\n# radio-group事件\n/**\n * 事件\n */\nexport interface Events{\n\n    /**\n     * 绑定值变化时触发，选中的radio value值\n     */\n    change:Radio.IModelType\n}",
      "normalizedContent": "# 单选框 y-radio\n在一组备选项中进行单选\n\n# 组件名称\n 1. y-radio\n 2. y-radio-group\n\n# 基础用法\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <view class=\"box\">\r\n      <y-radio :value=\"2\"\r\n               v-model=\"radiovalue1\">可选项</y-radio>\r\n      <y-radio :value=\"2\" v-model=\"radiovalue\">选中项</y-radio>\r\n    </view>\r\n\r\n    <view>\r\n      <y-radio :value=\"1\" v-model=\"radiovalue\" :disabled=\"disabled\">不可选项</y-radio>\r\n      <y-radio :value=\"2\" v-model=\"radiovalue\" :disabled=\"disabled\">已选中，不可改</y-radio>\r\n    </view>\r\n\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent,ref,ref } from 'vue'import './radio.scss'\r\n\r\nclass radioservice{\r\n  /**\r\n   * 单选框选中值\r\n   */\r\n  radiovalue1:ref<number> = ref(0)\r\n\r\n  /**\r\n   * 单选框选中值\r\n   */\r\n  radiovalue:ref<number> = ref(2)\r\n\r\n  /**\r\n   * 是否不可选\r\n   */\r\n  disabled = ref(true)}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-radio': defineasynccomponent(() => import('@/components/yui/radio/radio.vue'))\r\n  },\r\n  setup() {\r\n    const service = new radioservice()\r\n    return {\r\n      radiovalue: service.radiovalue,\r\n      radiovalue1: service.radiovalue1,\r\n      disabled: service.disabled\r\n    };\r\n  }});</script>\n\n# 单选框组\n<template>\r\n  <view v-resize id=\"container\" class=\"container\">\r\n    <y-radio-group v-model=\"radiovalue\">\r\n      <y-radio :value=\"1\">男</y-radio>\r\n      <y-radio :value=\"2\">女</y-radio>\r\n    </y-radio-group>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent, ref, ref } from \"vue\";import \"./radiogroup.scss\";\r\n\r\nclass radioservice {\r\n  /**\r\n   * 单选框选中值\r\n   */\r\n  radiovalue: ref<number> = ref(2);}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    \"y-radio\": defineasynccomponent(\r\n      () => import(\"@/components/yui/radio/radio.vue\")\r\n    ),\r\n    \"y-radio-group\": defineasynccomponent(\r\n      () => import(\"@/components/yui/radiogroup/radiogroup.vue\")\r\n    ),\r\n  },\r\n  setup() {\r\n    const service = new radioservice();\r\n    return {\r\n      radiovalue: service.radiovalue,\r\n    };\r\n  },});</script>\n\n# radio属性\nexport type imodeltype = boolean | string | number\n\n/**\n * 属性\n */\nexport interface props {\n\n    /**\n     * 选中值\n     */\n    modelvalue: imodeltype\n\n    /**\n     * 值\n     */\n    value: imodeltype\n\n    /**\n     * 是否不可选，默认false\n     */\n    disabled?: boolean\n}\n\n# radio-group属性\n/**\n * 属性\n */\nexport interface props {\n\n    /**\n     * 选中值\n     */\n    modelvalue: radio.imodeltype\n}\n\n# radio事件\n/**\n * 事件\n */\nexport interface events{\n\n    /**\n     * 绑定值变化时触发，选中的radio value值\n     */\n    change:imodeltype\n}\n\n# radio-group事件\n/**\n * 事件\n */\nexport interface events{\n\n    /**\n     * 绑定值变化时触发，选中的radio value值\n     */\n    change:radio.imodeltype\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "图片上传 y-upload",
      "frontmatter": {},
      "regularPath": "/component/form/upload.html",
      "relativePath": "component/form/upload.md",
      "key": "v-1054e93e",
      "path": "/component/form/upload.html",
      "headers": [
        {
          "level": 3,
          "title": "组件名称",
          "slug": "组件名称",
          "normalizedTitle": "组件名称",
          "charIndex": 35
        },
        {
          "level": 3,
          "title": "关联组件",
          "slug": "关联组件",
          "normalizedTitle": "关联组件",
          "charIndex": 52
        },
        {
          "level": 3,
          "title": "基础用法",
          "slug": "基础用法",
          "normalizedTitle": "基础用法",
          "charIndex": 324
        },
        {
          "level": 3,
          "title": "多选",
          "slug": "多选",
          "normalizedTitle": "多选",
          "charIndex": 21
        },
        {
          "level": 3,
          "title": "属性",
          "slug": "属性",
          "normalizedTitle": "属性",
          "charIndex": 2732
        },
        {
          "level": 3,
          "title": "事件",
          "slug": "事件",
          "normalizedTitle": "事件",
          "charIndex": 3416
        }
      ],
      "headersStr": "组件名称 关联组件 基础用法 多选 属性 事件",
      "content": "# 图片上传 y-upload\n支持单选/多选/指定数量/视频\n\n# 组件名称\ny-upload\n\n# 关联组件\n 1. y-textarea\n 2. y-date-picker\n 3. y-upload\n\n配置（app.ts）\n\nimport { uploadKey } from 'taro-yui-vue/src/components/upload/token'\napp.provide(uploadKey,{\ngetSignatureUrl: \"https://yy.bcadx.com/upload/get_signature\",\nbucket: 'yyres-bcadx-com',\noperator: 'lmm2019'\n})\n\n# 基础用法\n<template>\r\n  <view id=\"container\" class=\"container\">\r\n    <y-upload v-model=\"fileList\" :options=\"options\"></y-upload>\r\n  </view></template><script lang=\"ts\">import { ref, Ref, defineComponent, defineAsyncComponent } from 'vue'import './upload.scss'import { YUpload, UploadTypeEnum } from '@/components/yui/upload/types/upload.d'\r\n\r\nclass UploadService {\r\n  /**\r\n   * 选中图片值\r\n   * */\r\n  fileList: Ref<string[]> = ref([])\r\n\r\n  /**\r\n   * 组件内部参数\r\n   * */\r\n  options: Ref<YUpload.YUploadOptions> = ref({\r\n    placeholder: '最多1张',\r\n    multiple: false,\r\n    type: [UploadTypeEnum.IMAGE, UploadTypeEnum.VIDEO]\r\n  })\r\n\r\n  /**\r\n   * 获取组件上传的url\r\n   * @param files 上传url集合\r\n   */\r\n  onCatchChange(files: string[]) {\r\n    console.log('上传集合', files)\r\n  }}\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-upload': defineAsyncComponent(() => import('@/components/yui/upload/upload.vue'))\r\n    // 'y-upload': defineAsyncComponent(() => import('../../../../../taro-yui-vue/src/components/upload/upload.vue'))\r\n  },\r\n  setup() {\r\n    const service = new UploadService()\r\n    return {\r\n      fileList: service.fileList,\r\n      options: service.options,\r\n      onCatchChange: service.onCatchChange.bind(service)\r\n    };\r\n  }});</script>\n\n# 多选\n<template>\r\n  <view id=\"container\" class=\"container\">\r\n    <y-upload v-model=\"fileList\" :options=\"options\"></y-upload>\r\n  </view></template><script lang=\"ts\">import { defineComponent, defineAsyncComponent, ref, Ref } from \"vue\";import \"./upload.scss\";import { YUpload, UploadTypeEnum } from \"@/components/yui/upload/types/upload.d\";\r\n\r\nclass UploadService {\r\n  /**\r\n   * 图片集合\r\n   * */\r\n  fileList: Ref<string[]> = ref([\r\n    \"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\",\r\n  ]);\r\n\r\n  /**\r\n   * 参数\r\n   */\r\n  options: YUpload.YUploadOptions = {\r\n    multiple: true,\r\n    count: 11,\r\n    type: [UploadTypeEnum.IMAGE, UploadTypeEnum.VIDEO, UploadTypeEnum.PDF]\r\n  };}\r\n\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    'y-upload': defineAsyncComponent(() => import('@/components/yui/upload/upload.vue'))\r\n    // \"y-upload\": defineAsyncComponent(\r\n    //   () =>\r\n    //     import(\"../../../../../taro-yui-vue/src/components/upload/upload.vue\")\r\n    // ),\r\n  },\r\n  setup() {\r\n    const service = new UploadService();\r\n    return {\r\n      fileList: service.fileList,\r\n      options: service.options,\r\n    };\r\n  },});</script>\n\n# 属性\n/**\n * 上传类型\n */\nexport enum UploadTypeEnum {\n  /**\n   * 视频\n   */\n  VIDEO= 'video',\n\n  /**\n   * 图片\n   */\n  IMAGE = 'image',\n\n  /**\n   * pdf文件\n   */\n  PDF = 'pdf'\n}\n\n/**\n * 属性\n */\nexport interface Props extends Record<string, unknown> {\n  /***\n   * 模式：可编辑edit/可查看view, 默认edit\n   */\n  pattern?: string\n\n  /**\n   * 参数\n   */\n  options: YUploadOptions\n\n  /**\n   * 图片url列表，必填\n   */\n  modelValue: string[]\n}\n\n/**\n * 参数\n */\nexport interface YUploadOptions {\n\n  /**\n   * 是否支持多选 默认false\n   */\n  multiple?: boolean\n\n  /**\n   * 上传类型：图片image/视频video， 默认图片\n   */\n  type?: UploadTypeEnum[]\n\n  /**\n   * 最多可以选择的图片张数\n   * 默认为1，当multiple为true时候，为99，此选项设置和multiple冲突时，以该项优先\n   */\n  count?: number\n}\n\n# 事件\nexport interface Events{\n  /**\n   * 上传触发\n   */\n  onChange: string[]\n}",
      "normalizedContent": "# 图片上传 y-upload\n支持单选/多选/指定数量/视频\n\n# 组件名称\ny-upload\n\n# 关联组件\n 1. y-textarea\n 2. y-date-picker\n 3. y-upload\n\n配置（app.ts）\n\nimport { uploadkey } from 'taro-yui-vue/src/components/upload/token'\napp.provide(uploadkey,{\ngetsignatureurl: \"https://yy.bcadx.com/upload/get_signature\",\nbucket: 'yyres-bcadx-com',\noperator: 'lmm2019'\n})\n\n# 基础用法\n<template>\r\n  <view id=\"container\" class=\"container\">\r\n    <y-upload v-model=\"filelist\" :options=\"options\"></y-upload>\r\n  </view></template><script lang=\"ts\">import { ref, ref, definecomponent, defineasynccomponent } from 'vue'import './upload.scss'import { yupload, uploadtypeenum } from '@/components/yui/upload/types/upload.d'\r\n\r\nclass uploadservice {\r\n  /**\r\n   * 选中图片值\r\n   * */\r\n  filelist: ref<string[]> = ref([])\r\n\r\n  /**\r\n   * 组件内部参数\r\n   * */\r\n  options: ref<yupload.yuploadoptions> = ref({\r\n    placeholder: '最多1张',\r\n    multiple: false,\r\n    type: [uploadtypeenum.image, uploadtypeenum.video]\r\n  })\r\n\r\n  /**\r\n   * 获取组件上传的url\r\n   * @param files 上传url集合\r\n   */\r\n  oncatchchange(files: string[]) {\r\n    console.log('上传集合', files)\r\n  }}\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-upload': defineasynccomponent(() => import('@/components/yui/upload/upload.vue'))\r\n    // 'y-upload': defineasynccomponent(() => import('../../../../../taro-yui-vue/src/components/upload/upload.vue'))\r\n  },\r\n  setup() {\r\n    const service = new uploadservice()\r\n    return {\r\n      filelist: service.filelist,\r\n      options: service.options,\r\n      oncatchchange: service.oncatchchange.bind(service)\r\n    };\r\n  }});</script>\n\n# 多选\n<template>\r\n  <view id=\"container\" class=\"container\">\r\n    <y-upload v-model=\"filelist\" :options=\"options\"></y-upload>\r\n  </view></template><script lang=\"ts\">import { definecomponent, defineasynccomponent, ref, ref } from \"vue\";import \"./upload.scss\";import { yupload, uploadtypeenum } from \"@/components/yui/upload/types/upload.d\";\r\n\r\nclass uploadservice {\r\n  /**\r\n   * 图片集合\r\n   * */\r\n  filelist: ref<string[]> = ref([\r\n    \"https://yyres.bcadx.com/upload/2021-01-25/b39e762176daeaf30ab0d775e83f162b.md5\",\r\n  ]);\r\n\r\n  /**\r\n   * 参数\r\n   */\r\n  options: yupload.yuploadoptions = {\r\n    multiple: true,\r\n    count: 11,\r\n    type: [uploadtypeenum.image, uploadtypeenum.video, uploadtypeenum.pdf]\r\n  };}\r\n\r\n\r\nexport default definecomponent({\r\n  components: {\r\n    'y-upload': defineasynccomponent(() => import('@/components/yui/upload/upload.vue'))\r\n    // \"y-upload\": defineasynccomponent(\r\n    //   () =>\r\n    //     import(\"../../../../../taro-yui-vue/src/components/upload/upload.vue\")\r\n    // ),\r\n  },\r\n  setup() {\r\n    const service = new uploadservice();\r\n    return {\r\n      filelist: service.filelist,\r\n      options: service.options,\r\n    };\r\n  },});</script>\n\n# 属性\n/**\n * 上传类型\n */\nexport enum uploadtypeenum {\n  /**\n   * 视频\n   */\n  video= 'video',\n\n  /**\n   * 图片\n   */\n  image = 'image',\n\n  /**\n   * pdf文件\n   */\n  pdf = 'pdf'\n}\n\n/**\n * 属性\n */\nexport interface props extends record<string, unknown> {\n  /***\n   * 模式：可编辑edit/可查看view, 默认edit\n   */\n  pattern?: string\n\n  /**\n   * 参数\n   */\n  options: yuploadoptions\n\n  /**\n   * 图片url列表，必填\n   */\n  modelvalue: string[]\n}\n\n/**\n * 参数\n */\nexport interface yuploadoptions {\n\n  /**\n   * 是否支持多选 默认false\n   */\n  multiple?: boolean\n\n  /**\n   * 上传类型：图片image/视频video， 默认图片\n   */\n  type?: uploadtypeenum[]\n\n  /**\n   * 最多可以选择的图片张数\n   * 默认为1，当multiple为true时候，为99，此选项设置和multiple冲突时，以该项优先\n   */\n  count?: number\n}\n\n# 事件\nexport interface events{\n  /**\n   * 上传触发\n   */\n  onchange: string[]\n}",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "安装",
      "frontmatter": {
        "title": "安装",
        "sidebarDepth": 2
      },
      "regularPath": "/guide/",
      "relativePath": "guide/README.md",
      "key": "v-7c34cb70",
      "path": "/guide/",
      "headers": [
        {
          "level": 3,
          "title": "环境",
          "slug": "环境",
          "normalizedTitle": "环境",
          "charIndex": 2
        },
        {
          "level": 3,
          "title": "使用 npm 安装",
          "slug": "使用-npm-安装",
          "normalizedTitle": "使用 npm 安装",
          "charIndex": 19
        },
        {
          "level": 3,
          "title": "切换至官方源",
          "slug": "切换至官方源",
          "normalizedTitle": "切换至官方源",
          "charIndex": 117
        }
      ],
      "headersStr": "环境 使用 npm 安装 切换至官方源",
      "content": "# 环境\nTaro3+Vue3\n\n# 使用 npm 安装\nnpm set registry http://doctor.ilefang.io:4783\n\nnpm login\n\nnpm install taro-yui-vue\n\n\n# 切换至官方源\nnpm config set registry https://registry.npmjs.org\n\n\n继续\n\n登录账号密码：http://doctor.ilefang.io:4783/-/web/detail/taro-yui-vue",
      "normalizedContent": "# 环境\ntaro3+vue3\n\n# 使用 npm 安装\nnpm set registry http://doctor.ilefang.io:4783\n\nnpm login\n\nnpm install taro-yui-vue\n\n\n# 切换至官方源\nnpm config set registry https://registry.npmjs.org\n\n\n继续\n\n登录账号密码：http://doctor.ilefang.io:4783/-/web/detail/taro-yui-vue",
      "charsets": {
        "cjk": true
      }
    }
  ],
  "themeConfig": {
    "nav": [
      {
        "text": "组件",
        "items": [
          {
            "text": "基础",
            "link": "/component/#basic"
          },
          {
            "text": "表单",
            "link": "/component/#form"
          }
        ]
      }
    ],
    "sidebar": {
      "/component/": [
        {
          "title": "基础",
          "collapsable": true,
          "children": [
            "basic/avatar",
            "basic/calendar",
            "basic/card",
            "basic/datePicker",
            "basic/dateTimePicker",
            "basic/editor",
            "basic/empty",
            "basic/fixedButton",
            "basic/floatLayout",
            "basic/formItemPicker",
            "basic/inputNumber",
            "basic/pageContainer",
            "basic/searchBar",
            "basic/section",
            "basic/steps",
            "basic/table",
            "basic/tabs",
            "basic/textarea",
            "basic/timeline"
          ]
        },
        {
          "title": "表单",
          "collapsable": true,
          "children": [
            "form/checkbox",
            "form/form",
            "form/formItemCheckboxGroup",
            "form/radio",
            "form/upload"
          ]
        }
      ],
      "/guide/": []
    }
  }
}